
byggern_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800100  0000156e  00001602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000156e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080029c  0080029c  0000179e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ceb  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2c  00000000  00000000  0000475b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001235  00000000  00000000  00005487  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000600  00000000  00000000  000066bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095d  00000000  00000000  00006cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000106e  00000000  00000000  00007619  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00008687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_1>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 09 04 	jmp	0x812	; 0x812 <__vector_3>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ee e6       	ldi	r30, 0x6E	; 110
     200:	f5 e1       	ldi	r31, 0x15	; 21
     202:	02 c0       	rjmp	.+4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ac 39       	cpi	r26, 0x9C	; 156
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	ac e9       	ldi	r26, 0x9C	; 156
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	ac 3a       	cpi	r26, 0xAC	; 172
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 4a 04 	call	0x894	; 0x894 <main>
     222:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <set_ctc_mode>:
void init_interrupt(){
	clear_bit(GICR,5);		//clear the INT2 bit in GICR to avoid unintentional interrupts
	clear_bit(EMCUCR, 0);	//set ISC2 bit low to enable INT2 triggered by falling edge
	set_bit(GIFR, 5);		//clear interrupt flagg by writing a logic one to it
	set_bit(GICR, 5);		//set the INT2 bit in GICR to enable interrupts
	sei();					//set the I-bit in SREG (Global interrupt enable)
     22a:	eb e8       	ldi	r30, 0x8B	; 139
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	8e 7f       	andi	r24, 0xFE	; 254
     232:	80 83       	st	Z, r24
     234:	80 81       	ld	r24, Z
     236:	8d 7f       	andi	r24, 0xFD	; 253
     238:	80 83       	st	Z, r24
     23a:	ea e8       	ldi	r30, 0x8A	; 138
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	88 60       	ori	r24, 0x08	; 8
     242:	80 83       	st	Z, r24
     244:	80 81       	ld	r24, Z
     246:	8f 7e       	andi	r24, 0xEF	; 239
     248:	80 83       	st	Z, r24
     24a:	08 95       	ret

0000024c <set_selected_clock>:
     24c:	ea e8       	ldi	r30, 0x8A	; 138
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	81 60       	ori	r24, 0x01	; 1
     254:	80 83       	st	Z, r24
     256:	80 81       	ld	r24, Z
     258:	8d 7f       	andi	r24, 0xFD	; 253
     25a:	80 83       	st	Z, r24
     25c:	80 81       	ld	r24, Z
     25e:	8b 7f       	andi	r24, 0xFB	; 251
     260:	80 83       	st	Z, r24
     262:	08 95       	ret

00000264 <set_compare_match_mode>:
     264:	eb e8       	ldi	r30, 0x8B	; 139
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	80 83       	st	Z, r24
     26e:	80 81       	ld	r24, Z
     270:	8f 77       	andi	r24, 0x7F	; 127
     272:	80 83       	st	Z, r24
     274:	08 95       	ret

00000276 <init_pwm>:
     276:	81 b3       	in	r24, 0x11	; 17
     278:	80 61       	ori	r24, 0x10	; 16
     27a:	81 bb       	out	0x11, r24	; 17
     27c:	0e 94 15 01 	call	0x22a	; 0x22a <set_ctc_mode>
     280:	0e 94 26 01 	call	0x24c	; 0x24c <set_selected_clock>
     284:	0e 94 32 01 	call	0x264	; 0x264 <set_compare_match_mode>
     288:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     28c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     290:	08 95       	ret

00000292 <read_adc>:
     292:	e0 e0       	ldi	r30, 0x00	; 0
     294:	f4 e1       	ldi	r31, 0x14	; 20
     296:	10 82       	st	Z, r1
     298:	82 e6       	ldi	r24, 0x62	; 98
     29a:	8a 95       	dec	r24
     29c:	f1 f7       	brne	.-4      	; 0x29a <read_adc+0x8>
     29e:	00 00       	nop
     2a0:	60 81       	ld	r22, Z
     2a2:	70 91 01 14 	lds	r23, 0x1401	; 0x801401 <__bss_end+0x1155>
     2a6:	80 91 02 14 	lds	r24, 0x1402	; 0x801402 <__bss_end+0x1156>
     2aa:	90 91 03 14 	lds	r25, 0x1403	; 0x801403 <__bss_end+0x1157>
     2ae:	08 95       	ret

000002b0 <init_adc>:
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <init_adc+0x10>
     2b6:	20 e1       	ldi	r18, 0x10	; 16
     2b8:	28 0f       	add	r18, r24
     2ba:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x1154>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	88 30       	cpi	r24, 0x08	; 8
     2c2:	91 05       	cpc	r25, r1
     2c4:	c4 f3       	brlt	.-16     	; 0x2b6 <init_adc+0x6>
     2c6:	08 95       	ret

000002c8 <get_joystick_analog>:
     2c8:	0e 94 49 01 	call	0x292	; 0x292 <read_adc>
     2cc:	96 2f       	mov	r25, r22
     2ce:	87 2f       	mov	r24, r23
     2d0:	08 95       	ret

000002d2 <get_joystick_direction>:
     2d2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <get_joystick_analog>
     2d6:	29 2f       	mov	r18, r25
     2d8:	84 31       	cpi	r24, 0x14	; 20
     2da:	70 f0       	brcs	.+28     	; 0x2f8 <get_joystick_direction+0x26>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 3e       	cpi	r24, 0xEC	; 236
     2e0:	91 05       	cpc	r25, r1
     2e2:	6c f4       	brge	.+26     	; 0x2fe <get_joystick_direction+0x2c>
     2e4:	24 31       	cpi	r18, 0x14	; 20
     2e6:	70 f0       	brcs	.+28     	; 0x304 <get_joystick_direction+0x32>
     2e8:	82 2f       	mov	r24, r18
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	8c 3e       	cpi	r24, 0xEC	; 236
     2ee:	91 05       	cpc	r25, r1
     2f0:	64 f4       	brge	.+24     	; 0x30a <get_joystick_direction+0x38>
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	08 95       	ret
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	08 95       	ret
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	08 95       	ret
     304:	83 e0       	ldi	r24, 0x03	; 3
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	08 95       	ret
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	08 95       	ret

00000310 <draw_selected_arrow>:
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	0e 94 ca 04 	call	0x994	; 0x994 <oled_goto_page>
     318:	8a e7       	ldi	r24, 0x7A	; 122
     31a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <oled_goto_col>
     31e:	c0 e0       	ldi	r28, 0x00	; 0
     320:	d0 e0       	ldi	r29, 0x00	; 0
     322:	07 c0       	rjmp	.+14     	; 0x332 <draw_selected_arrow+0x22>
     324:	fe 01       	movw	r30, r28
     326:	e1 58       	subi	r30, 0x81	; 129
     328:	fd 4f       	sbci	r31, 0xFD	; 253
     32a:	80 81       	ld	r24, Z
     32c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <oled_write>
     330:	21 96       	adiw	r28, 0x01	; 1
     332:	c6 30       	cpi	r28, 0x06	; 6
     334:	d1 05       	cpc	r29, r1
     336:	b4 f3       	brlt	.-20     	; 0x324 <draw_selected_arrow+0x14>
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <oled_menu_display>:
     33e:	cf 93       	push	r28
     340:	c0 e0       	ldi	r28, 0x00	; 0
     342:	1f c0       	rjmp	.+62     	; 0x382 <oled_menu_display+0x44>
     344:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <top_item>
     348:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <top_item+0x1>
     34c:	8c 0f       	add	r24, r28
     34e:	91 1d       	adc	r25, r1
     350:	8a 30       	cpi	r24, 0x0A	; 10
     352:	91 05       	cpc	r25, r1
     354:	44 f4       	brge	.+16     	; 0x366 <oled_menu_display+0x28>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	fc 01       	movw	r30, r24
     35c:	e5 59       	subi	r30, 0x95	; 149
     35e:	fd 4f       	sbci	r31, 0xFD	; 253
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	02 c0       	rjmp	.+4      	; 0x36a <oled_menu_display+0x2c>
     366:	81 e2       	ldi	r24, 0x21	; 33
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	fc 01       	movw	r30, r24
     36c:	01 90       	ld	r0, Z+
     36e:	00 20       	and	r0, r0
     370:	e9 f7       	brne	.-6      	; 0x36c <oled_menu_display+0x2e>
     372:	31 97       	sbiw	r30, 0x01	; 1
     374:	bf 01       	movw	r22, r30
     376:	68 1b       	sub	r22, r24
     378:	79 0b       	sbc	r23, r25
     37a:	4c 2f       	mov	r20, r28
     37c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_write_string_on_line>
     380:	cf 5f       	subi	r28, 0xFF	; 255
     382:	c8 30       	cpi	r28, 0x08	; 8
     384:	f8 f2       	brcs	.-66     	; 0x344 <oled_menu_display+0x6>
     386:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
     38a:	0e 94 88 01 	call	0x310	; 0x310 <draw_selected_arrow>
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <oled_menu_scroll_up>:
     392:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <top_item>
     396:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <top_item+0x1>
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <top_item+0x1>
     3a0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <top_item>
     3a4:	99 23       	and	r25, r25
     3a6:	24 f4       	brge	.+8      	; 0x3b0 <oled_menu_scroll_up+0x1e>
     3a8:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <top_item+0x1>
     3ac:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <top_item>
     3b0:	08 95       	ret

000003b2 <oled_menu_scroll_down>:
     3b2:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <top_item>
     3b6:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <top_item+0x1>
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <top_item+0x1>
     3c0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <top_item>
     3c4:	09 97       	sbiw	r24, 0x09	; 9
     3c6:	34 f0       	brlt	.+12     	; 0x3d4 <oled_menu_scroll_down+0x22>
     3c8:	88 e0       	ldi	r24, 0x08	; 8
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <top_item+0x1>
     3d0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <top_item>
     3d4:	08 95       	ret

000003d6 <oled_menu_sel_down>:
     3d6:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
     3da:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__data_end+0x1>
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x1>
     3e4:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     3e8:	08 97       	sbiw	r24, 0x08	; 8
     3ea:	44 f0       	brlt	.+16     	; 0x3fc <oled_menu_sel_down+0x26>
     3ec:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <oled_menu_scroll_down>
     3f0:	87 e0       	ldi	r24, 0x07	; 7
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x1>
     3f8:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     3fc:	0e 94 9f 01 	call	0x33e	; 0x33e <oled_menu_display>
     400:	08 95       	ret

00000402 <oled_menu_sel_up>:
     402:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
     406:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__data_end+0x1>
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x1>
     410:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     414:	99 23       	and	r25, r25
     416:	34 f4       	brge	.+12     	; 0x424 <oled_menu_sel_up+0x22>
     418:	0e 94 c9 01 	call	0x392	; 0x392 <oled_menu_scroll_up>
     41c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <__data_end+0x1>
     420:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <__data_end>
     424:	0e 94 9f 01 	call	0x33e	; 0x33e <oled_menu_display>
     428:	08 95       	ret

0000042a <SPI_MasterTransmit>:
     42a:	8f b9       	out	0x0f, r24	; 15
     42c:	77 9b       	sbis	0x0e, 7	; 14
     42e:	fe cf       	rjmp	.-4      	; 0x42c <SPI_MasterTransmit+0x2>
     430:	08 95       	ret

00000432 <SPI_MasterTrancieve>:
     432:	8f b9       	out	0x0f, r24	; 15
     434:	77 9b       	sbis	0x0e, 7	; 14
     436:	fe cf       	rjmp	.-4      	; 0x434 <SPI_MasterTrancieve+0x2>
     438:	8f b1       	in	r24, 0x0f	; 15
     43a:	08 95       	ret

0000043c <SPI_set_slave_select>:
     43c:	86 b3       	in	r24, 0x16	; 22
     43e:	8f 7e       	andi	r24, 0xEF	; 239
     440:	88 bb       	out	0x18, r24	; 24
     442:	08 95       	ret

00000444 <SPI_clear_slave_select>:
     444:	86 b3       	in	r24, 0x16	; 22
     446:	80 61       	ori	r24, 0x10	; 16
     448:	88 bb       	out	0x18, r24	; 24
     44a:	08 95       	ret

0000044c <SPI_MasterInit>:
     44c:	87 b3       	in	r24, 0x17	; 23
     44e:	80 62       	ori	r24, 0x20	; 32
     450:	87 bb       	out	0x17, r24	; 23
     452:	87 b3       	in	r24, 0x17	; 23
     454:	80 68       	ori	r24, 0x80	; 128
     456:	87 bb       	out	0x17, r24	; 23
     458:	87 b3       	in	r24, 0x17	; 23
     45a:	80 61       	ori	r24, 0x10	; 16
     45c:	87 bb       	out	0x17, r24	; 23
     45e:	87 b3       	in	r24, 0x17	; 23
     460:	8f 7b       	andi	r24, 0xBF	; 191
     462:	87 bb       	out	0x17, r24	; 23
     464:	0e 94 22 02 	call	0x444	; 0x444 <SPI_clear_slave_select>
     468:	83 e5       	ldi	r24, 0x53	; 83
     46a:	8d b9       	out	0x0d, r24	; 13
     46c:	0e 94 22 02 	call	0x444	; 0x444 <SPI_clear_slave_select>
     470:	08 95       	ret

00000472 <mcp2515_read>:
     472:	cf 93       	push	r28
     474:	c8 2f       	mov	r28, r24
     476:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_set_slave_select>
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     480:	8c 2f       	mov	r24, r28
     482:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     486:	8f e0       	ldi	r24, 0x0F	; 15
     488:	0e 94 19 02 	call	0x432	; 0x432 <SPI_MasterTrancieve>
     48c:	c8 2f       	mov	r28, r24
     48e:	0e 94 22 02 	call	0x444	; 0x444 <SPI_clear_slave_select>
     492:	8c 2f       	mov	r24, r28
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <mcp2515_write>:
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	d8 2f       	mov	r29, r24
     49e:	c6 2f       	mov	r28, r22
     4a0:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_set_slave_select>
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     4aa:	8d 2f       	mov	r24, r29
     4ac:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     4b0:	8c 2f       	mov	r24, r28
     4b2:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     4b6:	0e 94 22 02 	call	0x444	; 0x444 <SPI_clear_slave_select>
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <mcp2515_send_req>:
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_set_slave_select>
     4c8:	c8 30       	cpi	r28, 0x08	; 8
     4ca:	30 f4       	brcc	.+12     	; 0x4d8 <mcp2515_send_req+0x18>
     4cc:	80 e8       	ldi	r24, 0x80	; 128
     4ce:	8c 0f       	add	r24, r28
     4d0:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     4d4:	0e 94 22 02 	call	0x444	; 0x444 <SPI_clear_slave_select>
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <mcp2515_bit_mod>:
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	18 2f       	mov	r17, r24
     4e4:	d6 2f       	mov	r29, r22
     4e6:	c4 2f       	mov	r28, r20
     4e8:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_set_slave_select>
     4ec:	85 e0       	ldi	r24, 0x05	; 5
     4ee:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     4f2:	81 2f       	mov	r24, r17
     4f4:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     4f8:	8d 2f       	mov	r24, r29
     4fa:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     4fe:	8c 2f       	mov	r24, r28
     500:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     504:	0e 94 22 02 	call	0x444	; 0x444 <SPI_clear_slave_select>
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	08 95       	ret

00000510 <mcp2515_reset>:
     510:	0e 94 1e 02 	call	0x43c	; 0x43c <SPI_set_slave_select>
     514:	80 ec       	ldi	r24, 0xC0	; 192
     516:	0e 94 15 02 	call	0x42a	; 0x42a <SPI_MasterTransmit>
     51a:	0e 94 22 02 	call	0x444	; 0x444 <SPI_clear_slave_select>
     51e:	08 95       	ret

00000520 <can_interrupt_enable>:
     520:	8a b7       	in	r24, 0x3a	; 58
     522:	80 64       	ori	r24, 0x40	; 64
     524:	8a bf       	out	0x3a, r24	; 58
     526:	8b b7       	in	r24, 0x3b	; 59
     528:	80 64       	ori	r24, 0x40	; 64
     52a:	8b bf       	out	0x3b, r24	; 59
     52c:	85 b7       	in	r24, 0x35	; 53
     52e:	82 60       	ori	r24, 0x02	; 2
     530:	85 bf       	out	0x35, r24	; 53
     532:	85 b7       	in	r24, 0x35	; 53
     534:	8e 7f       	andi	r24, 0xFE	; 254
     536:	85 bf       	out	0x35, r24	; 53
     538:	78 94       	sei
     53a:	08 95       	ret

0000053c <can_set_config_mode>:
     53c:	48 2f       	mov	r20, r24
     53e:	60 ee       	ldi	r22, 0xE0	; 224
     540:	8f e0       	ldi	r24, 0x0F	; 15
     542:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     546:	08 95       	ret

00000548 <init_can>:
     548:	0e 94 90 02 	call	0x520	; 0x520 <can_interrupt_enable>
     54c:	43 e0       	ldi	r20, 0x03	; 3
     54e:	6f ef       	ldi	r22, 0xFF	; 255
     550:	8a e2       	ldi	r24, 0x2A	; 42
     552:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     556:	41 eb       	ldi	r20, 0xB1	; 177
     558:	6f ef       	ldi	r22, 0xFF	; 255
     55a:	89 e2       	ldi	r24, 0x29	; 41
     55c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     560:	45 e0       	ldi	r20, 0x05	; 5
     562:	6f ef       	ldi	r22, 0xFF	; 255
     564:	88 e2       	ldi	r24, 0x28	; 40
     566:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 9e 02 	call	0x53c	; 0x53c <can_set_config_mode>
     570:	43 e0       	ldi	r20, 0x03	; 3
     572:	63 e0       	ldi	r22, 0x03	; 3
     574:	8b e2       	ldi	r24, 0x2B	; 43
     576:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     57a:	40 e2       	ldi	r20, 0x20	; 32
     57c:	60 e2       	ldi	r22, 0x20	; 32
     57e:	8b e2       	ldi	r24, 0x2B	; 43
     580:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     584:	40 e6       	ldi	r20, 0x60	; 96
     586:	60 e6       	ldi	r22, 0x60	; 96
     588:	80 e6       	ldi	r24, 0x60	; 96
     58a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     58e:	48 e0       	ldi	r20, 0x08	; 8
     590:	68 e0       	ldi	r22, 0x08	; 8
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     598:	08 95       	ret

0000059a <can_transmit_tx_buf0>:
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	c6 2f       	mov	r28, r22
     5a6:	f7 2e       	mov	r15, r23
     5a8:	08 2f       	mov	r16, r24
     5aa:	19 2f       	mov	r17, r25
     5ac:	66 95       	lsr	r22
     5ae:	66 95       	lsr	r22
     5b0:	66 95       	lsr	r22
     5b2:	81 e3       	ldi	r24, 0x31	; 49
     5b4:	0e 94 4c 02 	call	0x498	; 0x498 <mcp2515_write>
     5b8:	6c 2f       	mov	r22, r28
     5ba:	62 95       	swap	r22
     5bc:	66 0f       	add	r22, r22
     5be:	60 7e       	andi	r22, 0xE0	; 224
     5c0:	68 5f       	subi	r22, 0xF8	; 248
     5c2:	82 e3       	ldi	r24, 0x32	; 50
     5c4:	0e 94 4c 02 	call	0x498	; 0x498 <mcp2515_write>
     5c8:	6f ef       	ldi	r22, 0xFF	; 255
     5ca:	84 e3       	ldi	r24, 0x34	; 52
     5cc:	0e 94 4c 02 	call	0x498	; 0x498 <mcp2515_write>
     5d0:	6f ef       	ldi	r22, 0xFF	; 255
     5d2:	83 e3       	ldi	r24, 0x33	; 51
     5d4:	0e 94 4c 02 	call	0x498	; 0x498 <mcp2515_write>
     5d8:	df 2d       	mov	r29, r15
     5da:	6f 2d       	mov	r22, r15
     5dc:	85 e3       	ldi	r24, 0x35	; 53
     5de:	0e 94 4c 02 	call	0x498	; 0x498 <mcp2515_write>
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
     5e4:	0b c0       	rjmp	.+22     	; 0x5fc <can_transmit_tx_buf0+0x62>
     5e6:	80 2f       	mov	r24, r16
     5e8:	91 2f       	mov	r25, r17
     5ea:	fc 01       	movw	r30, r24
     5ec:	ec 0f       	add	r30, r28
     5ee:	f1 1d       	adc	r31, r1
     5f0:	60 81       	ld	r22, Z
     5f2:	86 e3       	ldi	r24, 0x36	; 54
     5f4:	8c 0f       	add	r24, r28
     5f6:	0e 94 4c 02 	call	0x498	; 0x498 <mcp2515_write>
     5fa:	cf 5f       	subi	r28, 0xFF	; 255
     5fc:	cd 17       	cp	r28, r29
     5fe:	10 f4       	brcc	.+4      	; 0x604 <can_transmit_tx_buf0+0x6a>
     600:	c8 30       	cpi	r28, 0x08	; 8
     602:	88 f3       	brcs	.-30     	; 0x5e6 <can_transmit_tx_buf0+0x4c>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp2515_send_req>
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	08 95       	ret

00000616 <can_read_rx_buf0>:
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	81 e6       	ldi	r24, 0x61	; 97
     626:	0e 94 39 02 	call	0x472	; 0x472 <mcp2515_read>
     62a:	d8 2e       	mov	r13, r24
     62c:	dd 0c       	add	r13, r13
     62e:	dd 0c       	add	r13, r13
     630:	dd 0c       	add	r13, r13
     632:	82 e6       	ldi	r24, 0x62	; 98
     634:	0e 94 39 02 	call	0x472	; 0x472 <mcp2515_read>
     638:	82 95       	swap	r24
     63a:	86 95       	lsr	r24
     63c:	87 70       	andi	r24, 0x07	; 7
     63e:	d8 0e       	add	r13, r24
     640:	85 e6       	ldi	r24, 0x65	; 101
     642:	0e 94 39 02 	call	0x472	; 0x472 <mcp2515_read>
     646:	d8 2f       	mov	r29, r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 48 06 	call	0xc90	; 0xc90 <malloc>
     64e:	7c 01       	movw	r14, r24
     650:	c0 e0       	ldi	r28, 0x00	; 0
     652:	0a c0       	rjmp	.+20     	; 0x668 <can_read_rx_buf0+0x52>
     654:	87 01       	movw	r16, r14
     656:	0c 0f       	add	r16, r28
     658:	11 1d       	adc	r17, r1
     65a:	86 e6       	ldi	r24, 0x66	; 102
     65c:	8c 0f       	add	r24, r28
     65e:	0e 94 39 02 	call	0x472	; 0x472 <mcp2515_read>
     662:	f8 01       	movw	r30, r16
     664:	80 83       	st	Z, r24
     666:	cf 5f       	subi	r28, 0xFF	; 255
     668:	cd 17       	cp	r28, r29
     66a:	10 f4       	brcc	.+4      	; 0x670 <can_read_rx_buf0+0x5a>
     66c:	c8 30       	cpi	r28, 0x08	; 8
     66e:	90 f3       	brcs	.-28     	; 0x654 <can_read_rx_buf0+0x3e>
     670:	6d 2d       	mov	r22, r13
     672:	7d 2f       	mov	r23, r29
     674:	8e 2d       	mov	r24, r14
     676:	9f 2d       	mov	r25, r15
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	08 95       	ret

00000688 <display_can_frame>:
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	d6 2f       	mov	r29, r22
     692:	c7 2f       	mov	r28, r23
     694:	08 2f       	mov	r16, r24
     696:	19 2f       	mov	r17, r25
     698:	86 e2       	ldi	r24, 0x26	; 38
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	0e 94 b4 07 	call	0xf68	; 0xf68 <printf>
     6a4:	1f 92       	push	r1
     6a6:	df 93       	push	r29
     6a8:	81 e3       	ldi	r24, 0x31	; 49
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	0e 94 b4 07 	call	0xf68	; 0xf68 <printf>
     6b4:	dc 2f       	mov	r29, r28
     6b6:	1f 92       	push	r1
     6b8:	cf 93       	push	r28
     6ba:	8d e3       	ldi	r24, 0x3D	; 61
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	9f 93       	push	r25
     6c0:	8f 93       	push	r24
     6c2:	0e 94 b4 07 	call	0xf68	; 0xf68 <printf>
     6c6:	8d b7       	in	r24, 0x3d	; 61
     6c8:	9e b7       	in	r25, 0x3e	; 62
     6ca:	0a 96       	adiw	r24, 0x0a	; 10
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	9e bf       	out	0x3e, r25	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	8d bf       	out	0x3d, r24	; 61
     6d6:	c0 e0       	ldi	r28, 0x00	; 0
     6d8:	13 c0       	rjmp	.+38     	; 0x700 <display_can_frame+0x78>
     6da:	80 2f       	mov	r24, r16
     6dc:	91 2f       	mov	r25, r17
     6de:	fc 01       	movw	r30, r24
     6e0:	ec 0f       	add	r30, r28
     6e2:	f1 1d       	adc	r31, r1
     6e4:	80 81       	ld	r24, Z
     6e6:	1f 92       	push	r1
     6e8:	8f 93       	push	r24
     6ea:	88 e3       	ldi	r24, 0x38	; 56
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	0e 94 b4 07 	call	0xf68	; 0xf68 <printf>
     6f6:	cf 5f       	subi	r28, 0xFF	; 255
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	cd 17       	cp	r28, r29
     702:	58 f3       	brcs	.-42     	; 0x6da <display_can_frame+0x52>
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <__vector_1>:
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	2f 93       	push	r18
     71a:	3f 93       	push	r19
     71c:	4f 93       	push	r20
     71e:	5f 93       	push	r21
     720:	6f 93       	push	r22
     722:	7f 93       	push	r23
     724:	8f 93       	push	r24
     726:	9f 93       	push	r25
     728:	af 93       	push	r26
     72a:	bf 93       	push	r27
     72c:	cf 93       	push	r28
     72e:	ef 93       	push	r30
     730:	ff 93       	push	r31
     732:	8e e0       	ldi	r24, 0x0E	; 14
     734:	0e 94 39 02 	call	0x472	; 0x472 <mcp2515_read>
     738:	8e 70       	andi	r24, 0x0E	; 14
     73a:	c8 2f       	mov	r28, r24
     73c:	c6 95       	lsr	r28
     73e:	1f 92       	push	r1
     740:	cf 93       	push	r28
     742:	84 e5       	ldi	r24, 0x54	; 84
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	0e 94 b4 07 	call	0xf68	; 0xf68 <printf>
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	c1 30       	cpi	r28, 0x01	; 1
     758:	a9 f4       	brne	.+42     	; 0x784 <__vector_1+0x76>
     75a:	8d e2       	ldi	r24, 0x2D	; 45
     75c:	0e 94 39 02 	call	0x472	; 0x472 <mcp2515_read>
     760:	1f 92       	push	r1
     762:	8f 93       	push	r24
     764:	8a e6       	ldi	r24, 0x6A	; 106
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 b4 07 	call	0xf68	; 0xf68 <printf>
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	61 e2       	ldi	r22, 0x21	; 33
     774:	8c e2       	ldi	r24, 0x2C	; 44
     776:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	17 c0       	rjmp	.+46     	; 0x7b2 <__vector_1+0xa4>
     784:	c6 30       	cpi	r28, 0x06	; 6
     786:	51 f4       	brne	.+20     	; 0x79c <__vector_1+0x8e>
     788:	0e 94 0b 03 	call	0x616	; 0x616 <can_read_rx_buf0>
     78c:	0e 94 44 03 	call	0x688	; 0x688 <display_can_frame>
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	8c e2       	ldi	r24, 0x2C	; 44
     796:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     79a:	0b c0       	rjmp	.+22     	; 0x7b2 <__vector_1+0xa4>
     79c:	c7 30       	cpi	r28, 0x07	; 7
     79e:	49 f4       	brne	.+18     	; 0x7b2 <__vector_1+0xa4>
     7a0:	0e 94 0b 03 	call	0x616	; 0x616 <can_read_rx_buf0>
     7a4:	0e 94 44 03 	call	0x688	; 0x688 <display_can_frame>
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	62 e0       	ldi	r22, 0x02	; 2
     7ac:	8c e2       	ldi	r24, 0x2C	; 44
     7ae:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	64 e0       	ldi	r22, 0x04	; 4
     7b6:	8c e2       	ldi	r24, 0x2C	; 44
     7b8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_bit_mod>
     7bc:	8a b7       	in	r24, 0x3a	; 58
     7be:	80 64       	ori	r24, 0x40	; 64
     7c0:	8a bf       	out	0x3a, r24	; 58
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	cf 91       	pop	r28
     7c8:	bf 91       	pop	r27
     7ca:	af 91       	pop	r26
     7cc:	9f 91       	pop	r25
     7ce:	8f 91       	pop	r24
     7d0:	7f 91       	pop	r23
     7d2:	6f 91       	pop	r22
     7d4:	5f 91       	pop	r21
     7d6:	4f 91       	pop	r20
     7d8:	3f 91       	pop	r19
     7da:	2f 91       	pop	r18
     7dc:	0f 90       	pop	r0
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	0f 90       	pop	r0
     7e2:	1f 90       	pop	r1
     7e4:	18 95       	reti

000007e6 <can_transmit>:
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	18 2f       	mov	r17, r24
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 48 06 	call	0xc90	; 0xc90 <malloc>
     7f6:	ec 01       	movw	r28, r24
     7f8:	18 83       	st	Y, r17
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	71 e0       	ldi	r23, 0x01	; 1
     7fe:	9d 2f       	mov	r25, r29
     800:	0e 94 cd 02 	call	0x59a	; 0x59a <can_transmit_tx_buf0>
     804:	ce 01       	movw	r24, r28
     806:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <free>
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	08 95       	ret

00000812 <__vector_3>:
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	4f 93       	push	r20
     822:	5f 93       	push	r21
     824:	6f 93       	push	r22
     826:	7f 93       	push	r23
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
     834:	85 e8       	ldi	r24, 0x85	; 133
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 b4 07 	call	0xf68	; 0xf68 <printf>
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	ff 91       	pop	r31
     846:	ef 91       	pop	r30
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	0f 90       	pop	r0
     85e:	0f be       	out	0x3f, r0	; 63
     860:	0f 90       	pop	r0
     862:	1f 90       	pop	r1
     864:	18 95       	reti

00000866 <init_pin_directions>:
#include "joystick_button.h"

void init_pin_directions()
{
	// set PORTB PIN0 direction as output
	set_bit(DDRB, DDB0);
     866:	87 b3       	in	r24, 0x17	; 23
     868:	81 60       	ori	r24, 0x01	; 1
     86a:	87 bb       	out	0x17, r24	; 23
	// mcp transistor
	set_bit(DDRB, DDB1);
     86c:	87 b3       	in	r24, 0x17	; 23
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	87 bb       	out	0x17, r24	; 23
	char reg = PINB;
     872:	86 b3       	in	r24, 0x16	; 22
	set_bit(reg, DDB1);
     874:	82 60       	ori	r24, 0x02	; 2
	PORTB = reg;
     876:	88 bb       	out	0x18, r24	; 24
     878:	08 95       	ret

0000087a <init_ext_mem>:
}

void init_ext_mem()
{
	// enable XMEM
	set_bit(MCUCR, SRE);
     87a:	85 b7       	in	r24, 0x35	; 53
     87c:	80 68       	ori	r24, 0x80	; 128
     87e:	85 bf       	out	0x35, r24	; 53
	// release 4 msb to jtag
	set_bit(SFIOR, XMM2);
     880:	80 b7       	in	r24, 0x30	; 48
     882:	80 62       	ori	r24, 0x20	; 32
     884:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     886:	80 b7       	in	r24, 0x30	; 48
     888:	8f 7e       	andi	r24, 0xEF	; 239
     88a:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     88c:	80 b7       	in	r24, 0x30	; 48
     88e:	87 7f       	andi	r24, 0xF7	; 247
     890:	80 bf       	out	0x30, r24	; 48
     892:	08 95       	ret

00000894 <main>:

void test_static_address();

int main(void)
{
    init_pin_directions();
     894:	0e 94 33 04 	call	0x866	; 0x866 <init_pin_directions>
	init_ext_mem();
     898:	0e 94 3d 04 	call	0x87a	; 0x87a <init_ext_mem>
	init_pwm();
     89c:	0e 94 3b 01 	call	0x276	; 0x276 <init_pwm>
	USART_Init(MYUBRR);
     8a0:	8f e1       	ldi	r24, 0x1F	; 31
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 36 06 	call	0xc6c	; 0xc6c <USART_Init>
	init_adc();
     8a8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_adc>
	init_oled();
     8ac:	0e 94 a8 04 	call	0x950	; 0x950 <init_oled>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b0:	23 e0       	ldi	r18, 0x03	; 3
     8b2:	2a 95       	dec	r18
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <main+0x1e>
     8b6:	00 00       	nop
	//init_can();
	//init_interrupt();
	
	
	_delay_us(2); // the MCP takes a maximum of 2 us to be ready for a reset
	SPI_MasterInit();
     8b8:	0e 94 26 02 	call	0x44c	; 0x44c <SPI_MasterInit>
	mcp2515_reset();
     8bc:	0e 94 88 02 	call	0x510	; 0x510 <mcp2515_reset>
	
	// todo: change transmit and receive to int return, error handling?
	fdevopen(USART_Transmit, USART_Receive);
     8c0:	63 e4       	ldi	r22, 0x43	; 67
     8c2:	76 e0       	ldi	r23, 0x06	; 6
     8c4:	8d e3       	ldi	r24, 0x3D	; 61
     8c6:	96 e0       	ldi	r25, 0x06	; 6
     8c8:	0e 94 69 07 	call	0xed2	; 0xed2 <fdevopen>
	
	// test functions
	//test_static_address();
	//SRAM_test();
	
	oled_fill_entire(0x0F);
     8cc:	8f e0       	ldi	r24, 0x0F	; 15
     8ce:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <oled_fill_entire>
	// oled_goto_page(0);
	//printf("\n\r arrow = ");
	//oled_draw_arrow();
	
	//_delay_ms(10000);
	toggle_pin('B', 1);
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	82 e4       	ldi	r24, 0x42	; 66
     8d6:	0e 94 aa 05 	call	0xb54	; 0xb54 <toggle_pin>
	//_delay_ms(2000);
	//toggle_pin('B', 1);
	
	oled_write_string_on_line("string test", strlen("string test"), 0);
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	6b e0       	ldi	r22, 0x0B	; 11
     8de:	8b e8       	ldi	r24, 0x8B	; 139
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_write_string_on_line>
	
	//mcp2515_reset();
	//_delay_ms(1000);
	
	
	init_can();
     8e6:	0e 94 a4 02 	call	0x548	; 0x548 <init_can>
		//oled_write_char((unsigned char)'a', 8);
		//oled_fill_entire();
		//display_adc_info(); // using printf
		
		/* OLED MENU */
		oled_menu_display();
     8ea:	0e 94 9f 01 	call	0x33e	; 0x33e <oled_menu_display>
		
		/* Joystick poll */
		switch (get_joystick_direction())
     8ee:	0e 94 69 01 	call	0x2d2	; 0x2d2 <get_joystick_direction>
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	91 05       	cpc	r25, r1
     8f6:	a9 f0       	breq	.+42     	; 0x922 <main+0x8e>
     8f8:	1c f4       	brge	.+6      	; 0x900 <main+0x6c>
     8fa:	89 2b       	or	r24, r25
     8fc:	b1 f0       	breq	.+44     	; 0x92a <main+0x96>
     8fe:	18 c0       	rjmp	.+48     	; 0x930 <main+0x9c>
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	91 05       	cpc	r25, r1
     904:	41 f0       	breq	.+16     	; 0x916 <main+0x82>
     906:	03 97       	sbiw	r24, 0x03	; 3
     908:	99 f4       	brne	.+38     	; 0x930 <main+0x9c>
		{
			case DOWN:
				oled_menu_sel_down();
     90a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <oled_menu_sel_down>
				can_transmit(1);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <can_transmit>
				break;
     914:	0d c0       	rjmp	.+26     	; 0x930 <main+0x9c>
			case UP:
				oled_menu_sel_up();
     916:	0e 94 01 02 	call	0x402	; 0x402 <oled_menu_sel_up>
				can_transmit(2);
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <can_transmit>
				break;
     920:	07 c0       	rjmp	.+14     	; 0x930 <main+0x9c>
			case RIGHT:
				can_transmit(3);
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <can_transmit>
				break;
     928:	03 c0       	rjmp	.+6      	; 0x930 <main+0x9c>
			case LEFT:
				can_transmit(4);
     92a:	84 e0       	ldi	r24, 0x04	; 4
     92c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <can_transmit>
				break;
				
		}
		
		/* OLED RENDER */
		oled_render();
     930:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_render>
		// read rx buffer
		//struct can_msg_t msg = can_read_rx_buf0();
		//display_can_frame(msg);
		
		/* LOOP PERIOD AND LED */
		toggle_pin('B', 0);
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	82 e4       	ldi	r24, 0x42	; 66
     938:	0e 94 aa 05 	call	0xb54	; 0xb54 <toggle_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	9f e7       	ldi	r25, 0x7F	; 127
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	81 50       	subi	r24, 0x01	; 1
     944:	90 40       	sbci	r25, 0x00	; 0
     946:	20 40       	sbci	r18, 0x00	; 0
     948:	e1 f7       	brne	.-8      	; 0x942 <main+0xae>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <main+0xb8>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <main+0xba>
     94e:	cd cf       	rjmp	.-102    	; 0x8ea <main+0x56>

00000950 <init_oled>:

static unsigned char init_data[22] = {0xae, 0xa1, 0xda, 0x12, 0xc8, 0xa8, 0x3f, 0xd5, 0x80, 0x81, 0x50, 0xd9, 0x21, 0x20, 0x02, 0xdb, 0x30, 0xad, 0x00, 0xa4, 0xa6, 0xaf};

void init_oled()
{
	for(int i = 0; i < 22; i++) {
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	07 c0       	rjmp	.+14     	; 0x964 <init_oled+0x14>
		oled_c_base[0] = init_data[i];
     956:	fc 01       	movw	r30, r24
     958:	eb 57       	subi	r30, 0x7B	; 123
     95a:	fd 4f       	sbci	r31, 0xFD	; 253
     95c:	20 81       	ld	r18, Z
     95e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__bss_end+0xd54>

static unsigned char init_data[22] = {0xae, 0xa1, 0xda, 0x12, 0xc8, 0xa8, 0x3f, 0xd5, 0x80, 0x81, 0x50, 0xd9, 0x21, 0x20, 0x02, 0xdb, 0x30, 0xad, 0x00, 0xa4, 0xa6, 0xaf};

void init_oled()
{
	for(int i = 0; i < 22; i++) {
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	86 31       	cpi	r24, 0x16	; 22
     966:	91 05       	cpc	r25, r1
     968:	b4 f3       	brlt	.-20     	; 0x956 <init_oled+0x6>
		oled_c_base[0] = init_data[i];
		//printf("\n\r%x", init_data[i]);
	}
	*oled_c_base = 0x20;
     96a:	e0 e0       	ldi	r30, 0x00	; 0
     96c:	f0 e1       	ldi	r31, 0x10	; 16
     96e:	80 e2       	ldi	r24, 0x20	; 32
     970:	80 83       	st	Z, r24
	*oled_c_base = 0x02;
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	80 83       	st	Z, r24
     976:	08 95       	ret

00000978 <oled_goto_page_direct>:
}

void oled_goto_page_direct(uint8_t p)
{
	if (p > 7) {
     978:	88 30       	cpi	r24, 0x08	; 8
     97a:	18 f4       	brcc	.+6      	; 0x982 <oled_goto_page_direct+0xa>
		return;
	}
	*oled_c_base = 0xb0 + p;
     97c:	80 55       	subi	r24, 0x50	; 80
     97e:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd54>
     982:	08 95       	ret

00000984 <oled_goto_col_direct>:
}

void oled_goto_col_direct(uint8_t col)
{
	*oled_c_base = 0x21;
     984:	e0 e0       	ldi	r30, 0x00	; 0
     986:	f0 e1       	ldi	r31, 0x10	; 16
     988:	91 e2       	ldi	r25, 0x21	; 33
     98a:	90 83       	st	Z, r25
	*oled_c_base = 0x00 + col;
     98c:	80 83       	st	Z, r24
	*oled_c_base = 0xFF;
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	80 83       	st	Z, r24
     992:	08 95       	ret

00000994 <oled_goto_page>:
}

void oled_goto_page(uint8_t p)
{
	if (p > 7) {
     994:	88 30       	cpi	r24, 0x08	; 8
     996:	40 f4       	brcc	.+16     	; 0x9a8 <oled_goto_page+0x14>
		return;
	}
	current_adr = 128 * p;
     998:	20 e8       	ldi	r18, 0x80	; 128
     99a:	82 9f       	mul	r24, r18
     99c:	c0 01       	movw	r24, r0
     99e:	11 24       	eor	r1, r1
     9a0:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <current_adr+0x1>
     9a4:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <current_adr>
     9a8:	08 95       	ret

000009aa <oled_goto_col>:
}

void oled_goto_col(uint8_t col)
{
	uint8_t page = current_adr / 128;
     9aa:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <current_adr>
     9ae:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <current_adr+0x1>
     9b2:	22 0f       	add	r18, r18
     9b4:	23 2f       	mov	r18, r19
     9b6:	22 1f       	adc	r18, r18
     9b8:	33 0b       	sbc	r19, r19
     9ba:	31 95       	neg	r19
	current_adr = page * 128 + col;
     9bc:	33 27       	eor	r19, r19
     9be:	36 95       	lsr	r19
     9c0:	32 2f       	mov	r19, r18
     9c2:	22 27       	eor	r18, r18
     9c4:	37 95       	ror	r19
     9c6:	27 95       	ror	r18
     9c8:	28 0f       	add	r18, r24
     9ca:	31 1d       	adc	r19, r1
     9cc:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <current_adr+0x1>
     9d0:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <current_adr>
     9d4:	08 95       	ret

000009d6 <oled_write>:
}


void oled_write(unsigned char c){
	oled_sram_base[current_adr] = c;
     9d6:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <current_adr>
     9da:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <current_adr+0x1>
     9de:	f9 01       	movw	r30, r18
     9e0:	f4 5e       	subi	r31, 0xE4	; 228
     9e2:	80 83       	st	Z, r24
	current_adr++;
     9e4:	2f 5f       	subi	r18, 0xFF	; 255
     9e6:	3f 4f       	sbci	r19, 0xFF	; 255
	current_adr %= 1024;
     9e8:	33 70       	andi	r19, 0x03	; 3
     9ea:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <current_adr+0x1>
     9ee:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <current_adr>
     9f2:	08 95       	ret

000009f4 <oled_fill_entire>:
}

void oled_fill_entire(unsigned char c)
{	
	for(int i = 0; i < 1024; i++) {
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <oled_fill_entire+0x10>
		//if (i % 128 == 0) *oled_c_base = 0xb0 + i / 128;
		oled_sram_base[i] = c;
     9fa:	f9 01       	movw	r30, r18
     9fc:	f4 5e       	subi	r31, 0xE4	; 228
     9fe:	80 83       	st	Z, r24
	current_adr %= 1024;
}

void oled_fill_entire(unsigned char c)
{	
	for(int i = 0; i < 1024; i++) {
     a00:	2f 5f       	subi	r18, 0xFF	; 255
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	21 15       	cp	r18, r1
     a06:	94 e0       	ldi	r25, 0x04	; 4
     a08:	39 07       	cpc	r19, r25
     a0a:	bc f3       	brlt	.-18     	; 0x9fa <oled_fill_entire+0x6>
		//if (i % 128 == 0) *oled_c_base = 0xb0 + i / 128;
		oled_sram_base[i] = c;
	}
	current_adr = 0;
     a0c:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <current_adr+0x1>
     a10:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <current_adr>
     a14:	08 95       	ret

00000a16 <oled_write_char>:
}

int oled_write_char(char c, FILE* file)
{
	if (c == '\n'){
     a16:	8a 30       	cpi	r24, 0x0A	; 10
     a18:	69 f4       	brne	.+26     	; 0xa34 <oled_write_char+0x1e>
		//current_page++;
		//current_page %= 8;
		//*oled_c_base = 0xb0 + current_page;
		current_adr += 128;
     a1a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <current_adr>
     a1e:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <current_adr+0x1>
     a22:	80 58       	subi	r24, 0x80	; 128
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <current_adr+0x1>
     a2a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <current_adr>
		return 0;
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	08 95       	ret
	} else if (c == '\r') {
     a34:	8d 30       	cpi	r24, 0x0D	; 13
     a36:	49 f4       	brne	.+18     	; 0xa4a <oled_write_char+0x34>
		//*oled_c_base = 0x21;
		//*oled_c_base = 0x00;
		//*oled_c_base = 0xFF;
		current_adr = current_adr - (current_adr % 128);
     a38:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <current_adr>
     a3c:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <current_adr+0x1>
     a40:	20 78       	andi	r18, 0x80	; 128
     a42:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <current_adr+0x1>
     a46:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <current_adr>
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
     a4a:	90 ee       	ldi	r25, 0xE0	; 224
     a4c:	98 0f       	add	r25, r24
     a4e:	90 36       	cpi	r25, 0x60	; 96
     a50:	28 f5       	brcc	.+74     	; 0xa9c <oled_write_char+0x86>
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	1c c0       	rjmp	.+56     	; 0xa90 <oled_write_char+0x7a>
	switch(size){
		case 4:
			for(int i = 0; i < size; i++){
				oled_sram_base[current_adr] = pgm_read_byte(&(font4[c - 32][i]));
     a58:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <current_adr>
     a5c:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <current_adr+0x1>
     a60:	d9 01       	movw	r26, r18
     a62:	b4 5e       	subi	r27, 0xE4	; 228
     a64:	e8 2f       	mov	r30, r24
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	b0 97       	sbiw	r30, 0x20	; 32
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	e4 0f       	add	r30, r20
     a74:	f5 1f       	adc	r31, r21
     a76:	e0 59       	subi	r30, 0x90	; 144
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	e4 91       	lpm	r30, Z
     a7c:	ec 93       	st	X, r30
				current_adr++;
     a7e:	2f 5f       	subi	r18, 0xFF	; 255
     a80:	3f 4f       	sbci	r19, 0xFF	; 255
				current_adr %= 1024;
     a82:	33 70       	andi	r19, 0x03	; 3
     a84:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <current_adr+0x1>
     a88:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <current_adr>
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
	switch(size){
		case 4:
			for(int i = 0; i < size; i++){
     a8c:	4f 5f       	subi	r20, 0xFF	; 255
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	44 30       	cpi	r20, 0x04	; 4
     a92:	51 05       	cpc	r21, r1
     a94:	0c f3       	brlt	.-62     	; 0xa58 <oled_write_char+0x42>
			}
			break;
		default: 
			return 1;
	}
	return 0;
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	08 95       	ret
		//*oled_c_base = 0x00;
		//*oled_c_base = 0xFF;
		current_adr = current_adr - (current_adr % 128);
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default: 
			return 1;
	}
	return 0;
}
     aa0:	08 95       	ret

00000aa2 <oled_write_string_on_line>:

void oled_write_string_on_line(char* s, uint8_t len, uint8_t line)
{
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
	if (line > 7) return;
     aac:	48 30       	cpi	r20, 0x08	; 8
     aae:	20 f5       	brcc	.+72     	; 0xaf8 <oled_write_string_on_line+0x56>
     ab0:	16 2f       	mov	r17, r22
     ab2:	7c 01       	movw	r14, r24
	current_adr = 128 * line;
     ab4:	20 e8       	ldi	r18, 0x80	; 128
     ab6:	42 9f       	mul	r20, r18
     ab8:	c0 01       	movw	r24, r0
     aba:	11 24       	eor	r1, r1
     abc:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <current_adr+0x1>
     ac0:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <current_adr>
	for (int i = 0; i < 128 / 4; i++)
     ac4:	c0 e0       	ldi	r28, 0x00	; 0
     ac6:	d0 e0       	ldi	r29, 0x00	; 0
     ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <oled_write_string_on_line+0x50>
	{
		if(i < len) oled_write_char(s[i], NULL);
     aca:	21 2f       	mov	r18, r17
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	c2 17       	cp	r28, r18
     ad0:	d3 07       	cpc	r29, r19
     ad2:	4c f4       	brge	.+18     	; 0xae6 <oled_write_string_on_line+0x44>
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	f7 01       	movw	r30, r14
     ada:	ec 0f       	add	r30, r28
     adc:	fd 1f       	adc	r31, r29
     ade:	80 81       	ld	r24, Z
     ae0:	0e 94 0b 05 	call	0xa16	; 0xa16 <oled_write_char>
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <oled_write_string_on_line+0x4e>
		else		oled_write_char(' ', NULL);
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e2       	ldi	r24, 0x20	; 32
     aec:	0e 94 0b 05 	call	0xa16	; 0xa16 <oled_write_char>

void oled_write_string_on_line(char* s, uint8_t len, uint8_t line)
{
	if (line > 7) return;
	current_adr = 128 * line;
	for (int i = 0; i < 128 / 4; i++)
     af0:	21 96       	adiw	r28, 0x01	; 1
     af2:	c0 32       	cpi	r28, 0x20	; 32
     af4:	d1 05       	cpc	r29, r1
     af6:	4c f3       	brlt	.-46     	; 0xaca <oled_write_string_on_line+0x28>
	{
		if(i < len) oled_write_char(s[i], NULL);
		else		oled_write_char(' ', NULL);
	}
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	08 95       	ret

00000b04 <oled_render>:

void oled_render()
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
	/*
	SRAM 0x1800 - 0x1FFF
	*/
	//oled_fill_entire(0xff);
	// current_adr = 0;
	oled_goto_page_direct(0);
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	0e 94 bc 04 	call	0x978	; 0x978 <oled_goto_page_direct>
	oled_goto_col_direct(0);
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 c2 04 	call	0x984	; 0x984 <oled_goto_col_direct>
	for(int i = 0; i < 1024; i++){
     b14:	c0 e0       	ldi	r28, 0x00	; 0
     b16:	d0 e0       	ldi	r29, 0x00	; 0
     b18:	16 c0       	rjmp	.+44     	; 0xb46 <oled_render+0x42>
		*oled_d_base = oled_sram_base[i];
     b1a:	fe 01       	movw	r30, r28
     b1c:	f4 5e       	subi	r31, 0xE4	; 228
     b1e:	80 81       	ld	r24, Z
     b20:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf54>
		if (i % 128 == 0) oled_goto_page_direct(i / 128);
     b24:	ce 01       	movw	r24, r28
     b26:	8f 77       	andi	r24, 0x7F	; 127
     b28:	99 27       	eor	r25, r25
     b2a:	89 2b       	or	r24, r25
     b2c:	59 f4       	brne	.+22     	; 0xb44 <oled_render+0x40>
     b2e:	ce 01       	movw	r24, r28
     b30:	dd 23       	and	r29, r29
     b32:	14 f4       	brge	.+4      	; 0xb38 <oled_render+0x34>
     b34:	81 58       	subi	r24, 0x81	; 129
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	88 0f       	add	r24, r24
     b3a:	89 2f       	mov	r24, r25
     b3c:	88 1f       	adc	r24, r24
     b3e:	99 0b       	sbc	r25, r25
     b40:	0e 94 bc 04 	call	0x978	; 0x978 <oled_goto_page_direct>
	*/
	//oled_fill_entire(0xff);
	// current_adr = 0;
	oled_goto_page_direct(0);
	oled_goto_col_direct(0);
	for(int i = 0; i < 1024; i++){
     b44:	21 96       	adiw	r28, 0x01	; 1
     b46:	c1 15       	cp	r28, r1
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	d8 07       	cpc	r29, r24
     b4c:	34 f3       	brlt	.-52     	; 0xb1a <oled_render+0x16>
		*oled_d_base = oled_sram_base[i];
		if (i % 128 == 0) oled_goto_page_direct(i / 128);
	}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	08 95       	ret

00000b54 <toggle_pin>:

#include "pin_util.h"

void toggle_pin(char port, uint8_t pin)
{
	if(pin > 7){
     b54:	68 30       	cpi	r22, 0x08	; 8
     b56:	08 f0       	brcs	.+2      	; 0xb5a <toggle_pin+0x6>
     b58:	88 c0       	rjmp	.+272    	; 0xc6a <toggle_pin+0x116>
		// too high pin number
		return;
	}
	
	switch (port)
     b5a:	82 34       	cpi	r24, 0x42	; 66
     b5c:	51 f1       	breq	.+84     	; 0xbb2 <toggle_pin+0x5e>
     b5e:	18 f4       	brcc	.+6      	; 0xb66 <toggle_pin+0x12>
     b60:	81 34       	cpi	r24, 0x41	; 65
     b62:	41 f0       	breq	.+16     	; 0xb74 <toggle_pin+0x20>
     b64:	08 95       	ret
     b66:	83 34       	cpi	r24, 0x43	; 67
     b68:	09 f4       	brne	.+2      	; 0xb6c <toggle_pin+0x18>
     b6a:	42 c0       	rjmp	.+132    	; 0xbf0 <toggle_pin+0x9c>
     b6c:	84 34       	cpi	r24, 0x44	; 68
     b6e:	09 f4       	brne	.+2      	; 0xb72 <toggle_pin+0x1e>
     b70:	5e c0       	rjmp	.+188    	; 0xc2e <toggle_pin+0xda>
     b72:	08 95       	ret
	{
		unsigned char reg;
		uint8_t pin_value;
		case 'A':
			reg = PINA;
     b74:	89 b3       	in	r24, 0x19	; 25
			// 0000x000
			// 0000000x & 00000001
			pin_value = (reg>>pin)&1;
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	06 2e       	mov	r0, r22
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <toggle_pin+0x2e>
     b7e:	35 95       	asr	r19
     b80:	27 95       	ror	r18
     b82:	0a 94       	dec	r0
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <toggle_pin+0x2a>
			// reg = xxxxxxxx
			// set_bit(reg, 2)
			// reg = xxxxx1xx
			if (pin_value){
     b86:	20 ff       	sbrs	r18, 0
     b88:	0a c0       	rjmp	.+20     	; 0xb9e <toggle_pin+0x4a>
				clear_bit(reg, pin);
     b8a:	21 e0       	ldi	r18, 0x01	; 1
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <toggle_pin+0x40>
     b90:	22 0f       	add	r18, r18
     b92:	33 1f       	adc	r19, r19
     b94:	6a 95       	dec	r22
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <toggle_pin+0x3c>
     b98:	20 95       	com	r18
     b9a:	82 23       	and	r24, r18
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <toggle_pin+0x5a>
			} else {
				set_bit(reg, pin);
     b9e:	21 e0       	ldi	r18, 0x01	; 1
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <toggle_pin+0x54>
     ba4:	22 0f       	add	r18, r18
     ba6:	33 1f       	adc	r19, r19
     ba8:	6a 95       	dec	r22
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <toggle_pin+0x50>
     bac:	82 2b       	or	r24, r18
			}
			PORTA = reg;
     bae:	8b bb       	out	0x1b, r24	; 27
			break;
     bb0:	08 95       	ret
		case 'B':
			reg = PINB;
     bb2:	86 b3       	in	r24, 0x16	; 22
			pin_value = (reg>>pin)&1;
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	06 2e       	mov	r0, r22
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <toggle_pin+0x6c>
     bbc:	35 95       	asr	r19
     bbe:	27 95       	ror	r18
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <toggle_pin+0x68>
			if (pin_value){
     bc4:	20 ff       	sbrs	r18, 0
     bc6:	0a c0       	rjmp	.+20     	; 0xbdc <toggle_pin+0x88>
				clear_bit(reg, pin);
     bc8:	21 e0       	ldi	r18, 0x01	; 1
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <toggle_pin+0x7e>
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	6a 95       	dec	r22
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <toggle_pin+0x7a>
     bd6:	20 95       	com	r18
     bd8:	82 23       	and	r24, r18
     bda:	08 c0       	rjmp	.+16     	; 0xbec <toggle_pin+0x98>
			} else {
				set_bit(reg, pin);
     bdc:	21 e0       	ldi	r18, 0x01	; 1
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <toggle_pin+0x92>
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	6a 95       	dec	r22
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <toggle_pin+0x8e>
     bea:	82 2b       	or	r24, r18
			}
			PORTB = reg;
     bec:	88 bb       	out	0x18, r24	; 24
			break;
     bee:	08 95       	ret
		case 'C':
			reg = PINC;
     bf0:	83 b3       	in	r24, 0x13	; 19
			pin_value = (reg>>pin)&1;
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	06 2e       	mov	r0, r22
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <toggle_pin+0xaa>
     bfa:	35 95       	asr	r19
     bfc:	27 95       	ror	r18
     bfe:	0a 94       	dec	r0
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <toggle_pin+0xa6>
			if (pin_value){
     c02:	20 ff       	sbrs	r18, 0
     c04:	0a c0       	rjmp	.+20     	; 0xc1a <toggle_pin+0xc6>
				clear_bit(reg, pin);
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <toggle_pin+0xbc>
     c0c:	22 0f       	add	r18, r18
     c0e:	33 1f       	adc	r19, r19
     c10:	6a 95       	dec	r22
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <toggle_pin+0xb8>
     c14:	20 95       	com	r18
     c16:	82 23       	and	r24, r18
     c18:	08 c0       	rjmp	.+16     	; 0xc2a <toggle_pin+0xd6>
			} else {
				set_bit(reg, pin);
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <toggle_pin+0xd0>
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	6a 95       	dec	r22
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <toggle_pin+0xcc>
     c28:	82 2b       	or	r24, r18
			}
			PORTC = reg;
     c2a:	85 bb       	out	0x15, r24	; 21
			break;
     c2c:	08 95       	ret
		case 'D':
			reg = PIND;
     c2e:	80 b3       	in	r24, 0x10	; 16
			pin_value = (reg>>pin)&1;
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	06 2e       	mov	r0, r22
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <toggle_pin+0xe8>
     c38:	35 95       	asr	r19
     c3a:	27 95       	ror	r18
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <toggle_pin+0xe4>
			if (pin_value){
     c40:	20 ff       	sbrs	r18, 0
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <toggle_pin+0x104>
				clear_bit(reg, pin);
     c44:	21 e0       	ldi	r18, 0x01	; 1
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <toggle_pin+0xfa>
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	6a 95       	dec	r22
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <toggle_pin+0xf6>
     c52:	20 95       	com	r18
     c54:	82 23       	and	r24, r18
     c56:	08 c0       	rjmp	.+16     	; 0xc68 <toggle_pin+0x114>
			} else {
				set_bit(reg, pin);
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <toggle_pin+0x10e>
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	6a 95       	dec	r22
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <toggle_pin+0x10a>
     c66:	82 2b       	or	r24, r18
			}
			PORTD = reg;
     c68:	82 bb       	out	0x12, r24	; 18
     c6a:	08 95       	ret

00000c6c <USART_Init>:
// Following functions are taken from "Atmel AVR ATmega162 datasheet"

void USART_Init(unsigned int ubrr)
{
	/* set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     c6c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     c6e:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     c70:	88 e1       	ldi	r24, 0x18	; 24
     c72:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     c74:	8e e8       	ldi	r24, 0x8E	; 142
     c76:	80 bd       	out	0x20, r24	; 32
     c78:	08 95       	ret

00000c7a <USART_Transmit>:
}

int USART_Transmit (char data, FILE* file)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0) ));
     c7a:	5d 9b       	sbis	0x0b, 5	; 11
     c7c:	fe cf       	rjmp	.-4      	; 0xc7a <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     c7e:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	08 95       	ret

00000c86 <USART_Receive>:

int USART_Receive ( FILE* file )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     c86:	5f 9b       	sbis	0x0b, 7	; 11
     c88:	fe cf       	rjmp	.-4      	; 0xc86 <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
     c8a:	8c b1       	in	r24, 0x0c	; 12
}
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	08 95       	ret

00000c90 <malloc>:
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	91 05       	cpc	r25, r1
     c9c:	10 f4       	brcc	.+4      	; 0xca2 <malloc+0x12>
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <__flp>
     ca6:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <__flp+0x1>
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	a0 e0       	ldi	r26, 0x00	; 0
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	30 97       	sbiw	r30, 0x00	; 0
     cb4:	19 f1       	breq	.+70     	; 0xcfc <malloc+0x6c>
     cb6:	40 81       	ld	r20, Z
     cb8:	51 81       	ldd	r21, Z+1	; 0x01
     cba:	02 81       	ldd	r16, Z+2	; 0x02
     cbc:	13 81       	ldd	r17, Z+3	; 0x03
     cbe:	48 17       	cp	r20, r24
     cc0:	59 07       	cpc	r21, r25
     cc2:	c8 f0       	brcs	.+50     	; 0xcf6 <malloc+0x66>
     cc4:	84 17       	cp	r24, r20
     cc6:	95 07       	cpc	r25, r21
     cc8:	69 f4       	brne	.+26     	; 0xce4 <malloc+0x54>
     cca:	10 97       	sbiw	r26, 0x00	; 0
     ccc:	31 f0       	breq	.+12     	; 0xcda <malloc+0x4a>
     cce:	12 96       	adiw	r26, 0x02	; 2
     cd0:	0c 93       	st	X, r16
     cd2:	12 97       	sbiw	r26, 0x02	; 2
     cd4:	13 96       	adiw	r26, 0x03	; 3
     cd6:	1c 93       	st	X, r17
     cd8:	27 c0       	rjmp	.+78     	; 0xd28 <malloc+0x98>
     cda:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <__flp>
     cde:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <__flp+0x1>
     ce2:	22 c0       	rjmp	.+68     	; 0xd28 <malloc+0x98>
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <malloc+0x60>
     cea:	42 17       	cp	r20, r18
     cec:	53 07       	cpc	r21, r19
     cee:	18 f4       	brcc	.+6      	; 0xcf6 <malloc+0x66>
     cf0:	9a 01       	movw	r18, r20
     cf2:	bd 01       	movw	r22, r26
     cf4:	ef 01       	movw	r28, r30
     cf6:	df 01       	movw	r26, r30
     cf8:	f8 01       	movw	r30, r16
     cfa:	db cf       	rjmp	.-74     	; 0xcb2 <malloc+0x22>
     cfc:	21 15       	cp	r18, r1
     cfe:	31 05       	cpc	r19, r1
     d00:	f9 f0       	breq	.+62     	; 0xd40 <malloc+0xb0>
     d02:	28 1b       	sub	r18, r24
     d04:	39 0b       	sbc	r19, r25
     d06:	24 30       	cpi	r18, 0x04	; 4
     d08:	31 05       	cpc	r19, r1
     d0a:	80 f4       	brcc	.+32     	; 0xd2c <malloc+0x9c>
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	9b 81       	ldd	r25, Y+3	; 0x03
     d10:	61 15       	cp	r22, r1
     d12:	71 05       	cpc	r23, r1
     d14:	21 f0       	breq	.+8      	; 0xd1e <malloc+0x8e>
     d16:	fb 01       	movw	r30, r22
     d18:	93 83       	std	Z+3, r25	; 0x03
     d1a:	82 83       	std	Z+2, r24	; 0x02
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <malloc+0x96>
     d1e:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__flp+0x1>
     d22:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__flp>
     d26:	fe 01       	movw	r30, r28
     d28:	32 96       	adiw	r30, 0x02	; 2
     d2a:	44 c0       	rjmp	.+136    	; 0xdb4 <malloc+0x124>
     d2c:	fe 01       	movw	r30, r28
     d2e:	e2 0f       	add	r30, r18
     d30:	f3 1f       	adc	r31, r19
     d32:	81 93       	st	Z+, r24
     d34:	91 93       	st	Z+, r25
     d36:	22 50       	subi	r18, 0x02	; 2
     d38:	31 09       	sbc	r19, r1
     d3a:	39 83       	std	Y+1, r19	; 0x01
     d3c:	28 83       	st	Y, r18
     d3e:	3a c0       	rjmp	.+116    	; 0xdb4 <malloc+0x124>
     d40:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <__brkval>
     d44:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <__brkval+0x1>
     d48:	23 2b       	or	r18, r19
     d4a:	41 f4       	brne	.+16     	; 0xd5c <malloc+0xcc>
     d4c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d50:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d54:	30 93 a3 02 	sts	0x02A3, r19	; 0x8002a3 <__brkval+0x1>
     d58:	20 93 a2 02 	sts	0x02A2, r18	; 0x8002a2 <__brkval>
     d5c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d60:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	41 f4       	brne	.+16     	; 0xd7a <malloc+0xea>
     d6a:	2d b7       	in	r18, 0x3d	; 61
     d6c:	3e b7       	in	r19, 0x3e	; 62
     d6e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d72:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d76:	24 1b       	sub	r18, r20
     d78:	35 0b       	sbc	r19, r21
     d7a:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <__brkval>
     d7e:	f0 91 a3 02 	lds	r31, 0x02A3	; 0x8002a3 <__brkval+0x1>
     d82:	e2 17       	cp	r30, r18
     d84:	f3 07       	cpc	r31, r19
     d86:	a0 f4       	brcc	.+40     	; 0xdb0 <malloc+0x120>
     d88:	2e 1b       	sub	r18, r30
     d8a:	3f 0b       	sbc	r19, r31
     d8c:	28 17       	cp	r18, r24
     d8e:	39 07       	cpc	r19, r25
     d90:	78 f0       	brcs	.+30     	; 0xdb0 <malloc+0x120>
     d92:	ac 01       	movw	r20, r24
     d94:	4e 5f       	subi	r20, 0xFE	; 254
     d96:	5f 4f       	sbci	r21, 0xFF	; 255
     d98:	24 17       	cp	r18, r20
     d9a:	35 07       	cpc	r19, r21
     d9c:	48 f0       	brcs	.+18     	; 0xdb0 <malloc+0x120>
     d9e:	4e 0f       	add	r20, r30
     da0:	5f 1f       	adc	r21, r31
     da2:	50 93 a3 02 	sts	0x02A3, r21	; 0x8002a3 <__brkval+0x1>
     da6:	40 93 a2 02 	sts	0x02A2, r20	; 0x8002a2 <__brkval>
     daa:	81 93       	st	Z+, r24
     dac:	91 93       	st	Z+, r25
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <malloc+0x124>
     db0:	e0 e0       	ldi	r30, 0x00	; 0
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	cf 01       	movw	r24, r30
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	08 95       	ret

00000dc0 <free>:
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	09 f4       	brne	.+2      	; 0xdca <free+0xa>
     dc8:	81 c0       	rjmp	.+258    	; 0xecc <free+0x10c>
     dca:	fc 01       	movw	r30, r24
     dcc:	32 97       	sbiw	r30, 0x02	; 2
     dce:	13 82       	std	Z+3, r1	; 0x03
     dd0:	12 82       	std	Z+2, r1	; 0x02
     dd2:	a0 91 a4 02 	lds	r26, 0x02A4	; 0x8002a4 <__flp>
     dd6:	b0 91 a5 02 	lds	r27, 0x02A5	; 0x8002a5 <__flp+0x1>
     dda:	10 97       	sbiw	r26, 0x00	; 0
     ddc:	81 f4       	brne	.+32     	; 0xdfe <free+0x3e>
     dde:	20 81       	ld	r18, Z
     de0:	31 81       	ldd	r19, Z+1	; 0x01
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <__brkval>
     dea:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <__brkval+0x1>
     dee:	28 17       	cp	r18, r24
     df0:	39 07       	cpc	r19, r25
     df2:	51 f5       	brne	.+84     	; 0xe48 <free+0x88>
     df4:	f0 93 a3 02 	sts	0x02A3, r31	; 0x8002a3 <__brkval+0x1>
     df8:	e0 93 a2 02 	sts	0x02A2, r30	; 0x8002a2 <__brkval>
     dfc:	67 c0       	rjmp	.+206    	; 0xecc <free+0x10c>
     dfe:	ed 01       	movw	r28, r26
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	ce 17       	cp	r28, r30
     e06:	df 07       	cpc	r29, r31
     e08:	40 f4       	brcc	.+16     	; 0xe1a <free+0x5a>
     e0a:	4a 81       	ldd	r20, Y+2	; 0x02
     e0c:	5b 81       	ldd	r21, Y+3	; 0x03
     e0e:	9e 01       	movw	r18, r28
     e10:	41 15       	cp	r20, r1
     e12:	51 05       	cpc	r21, r1
     e14:	f1 f0       	breq	.+60     	; 0xe52 <free+0x92>
     e16:	ea 01       	movw	r28, r20
     e18:	f5 cf       	rjmp	.-22     	; 0xe04 <free+0x44>
     e1a:	d3 83       	std	Z+3, r29	; 0x03
     e1c:	c2 83       	std	Z+2, r28	; 0x02
     e1e:	40 81       	ld	r20, Z
     e20:	51 81       	ldd	r21, Z+1	; 0x01
     e22:	84 0f       	add	r24, r20
     e24:	95 1f       	adc	r25, r21
     e26:	c8 17       	cp	r28, r24
     e28:	d9 07       	cpc	r29, r25
     e2a:	59 f4       	brne	.+22     	; 0xe42 <free+0x82>
     e2c:	88 81       	ld	r24, Y
     e2e:	99 81       	ldd	r25, Y+1	; 0x01
     e30:	84 0f       	add	r24, r20
     e32:	95 1f       	adc	r25, r21
     e34:	02 96       	adiw	r24, 0x02	; 2
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	9b 81       	ldd	r25, Y+3	; 0x03
     e3e:	93 83       	std	Z+3, r25	; 0x03
     e40:	82 83       	std	Z+2, r24	; 0x02
     e42:	21 15       	cp	r18, r1
     e44:	31 05       	cpc	r19, r1
     e46:	29 f4       	brne	.+10     	; 0xe52 <free+0x92>
     e48:	f0 93 a5 02 	sts	0x02A5, r31	; 0x8002a5 <__flp+0x1>
     e4c:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <__flp>
     e50:	3d c0       	rjmp	.+122    	; 0xecc <free+0x10c>
     e52:	e9 01       	movw	r28, r18
     e54:	fb 83       	std	Y+3, r31	; 0x03
     e56:	ea 83       	std	Y+2, r30	; 0x02
     e58:	49 91       	ld	r20, Y+
     e5a:	59 91       	ld	r21, Y+
     e5c:	c4 0f       	add	r28, r20
     e5e:	d5 1f       	adc	r29, r21
     e60:	ec 17       	cp	r30, r28
     e62:	fd 07       	cpc	r31, r29
     e64:	61 f4       	brne	.+24     	; 0xe7e <free+0xbe>
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	84 0f       	add	r24, r20
     e6c:	95 1f       	adc	r25, r21
     e6e:	02 96       	adiw	r24, 0x02	; 2
     e70:	e9 01       	movw	r28, r18
     e72:	99 83       	std	Y+1, r25	; 0x01
     e74:	88 83       	st	Y, r24
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	9b 83       	std	Y+3, r25	; 0x03
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	e0 e0       	ldi	r30, 0x00	; 0
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	12 96       	adiw	r26, 0x02	; 2
     e84:	8d 91       	ld	r24, X+
     e86:	9c 91       	ld	r25, X
     e88:	13 97       	sbiw	r26, 0x03	; 3
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	19 f0       	breq	.+6      	; 0xe94 <free+0xd4>
     e8e:	fd 01       	movw	r30, r26
     e90:	dc 01       	movw	r26, r24
     e92:	f7 cf       	rjmp	.-18     	; 0xe82 <free+0xc2>
     e94:	8d 91       	ld	r24, X+
     e96:	9c 91       	ld	r25, X
     e98:	11 97       	sbiw	r26, 0x01	; 1
     e9a:	9d 01       	movw	r18, r26
     e9c:	2e 5f       	subi	r18, 0xFE	; 254
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <__brkval>
     ea8:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <__brkval+0x1>
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	69 f4       	brne	.+26     	; 0xecc <free+0x10c>
     eb2:	30 97       	sbiw	r30, 0x00	; 0
     eb4:	29 f4       	brne	.+10     	; 0xec0 <free+0x100>
     eb6:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <__flp+0x1>
     eba:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <__flp>
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <free+0x104>
     ec0:	13 82       	std	Z+3, r1	; 0x03
     ec2:	12 82       	std	Z+2, r1	; 0x02
     ec4:	b0 93 a3 02 	sts	0x02A3, r27	; 0x8002a3 <__brkval+0x1>
     ec8:	a0 93 a2 02 	sts	0x02A2, r26	; 0x8002a2 <__brkval>
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <fdevopen>:
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	31 f4       	brne	.+12     	; 0xeea <fdevopen+0x18>
     ede:	61 15       	cp	r22, r1
     ee0:	71 05       	cpc	r23, r1
     ee2:	19 f4       	brne	.+6      	; 0xeea <fdevopen+0x18>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	3a c0       	rjmp	.+116    	; 0xf5e <fdevopen+0x8c>
     eea:	8b 01       	movw	r16, r22
     eec:	ec 01       	movw	r28, r24
     eee:	6e e0       	ldi	r22, 0x0E	; 14
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 ab 09 	call	0x1356	; 0x1356 <calloc>
     efa:	fc 01       	movw	r30, r24
     efc:	89 2b       	or	r24, r25
     efe:	91 f3       	breq	.-28     	; 0xee4 <fdevopen+0x12>
     f00:	80 e8       	ldi	r24, 0x80	; 128
     f02:	83 83       	std	Z+3, r24	; 0x03
     f04:	01 15       	cp	r16, r1
     f06:	11 05       	cpc	r17, r1
     f08:	71 f0       	breq	.+28     	; 0xf26 <fdevopen+0x54>
     f0a:	13 87       	std	Z+11, r17	; 0x0b
     f0c:	02 87       	std	Z+10, r16	; 0x0a
     f0e:	81 e8       	ldi	r24, 0x81	; 129
     f10:	83 83       	std	Z+3, r24	; 0x03
     f12:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <__iob>
     f16:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <__iob+0x1>
     f1a:	89 2b       	or	r24, r25
     f1c:	21 f4       	brne	.+8      	; 0xf26 <fdevopen+0x54>
     f1e:	f0 93 a7 02 	sts	0x02A7, r31	; 0x8002a7 <__iob+0x1>
     f22:	e0 93 a6 02 	sts	0x02A6, r30	; 0x8002a6 <__iob>
     f26:	20 97       	sbiw	r28, 0x00	; 0
     f28:	c9 f0       	breq	.+50     	; 0xf5c <fdevopen+0x8a>
     f2a:	d1 87       	std	Z+9, r29	; 0x09
     f2c:	c0 87       	std	Z+8, r28	; 0x08
     f2e:	83 81       	ldd	r24, Z+3	; 0x03
     f30:	82 60       	ori	r24, 0x02	; 2
     f32:	83 83       	std	Z+3, r24	; 0x03
     f34:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__iob+0x2>
     f38:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <__iob+0x3>
     f3c:	89 2b       	or	r24, r25
     f3e:	71 f4       	brne	.+28     	; 0xf5c <fdevopen+0x8a>
     f40:	f0 93 a9 02 	sts	0x02A9, r31	; 0x8002a9 <__iob+0x3>
     f44:	e0 93 a8 02 	sts	0x02A8, r30	; 0x8002a8 <__iob+0x2>
     f48:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__iob+0x4>
     f4c:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__iob+0x5>
     f50:	89 2b       	or	r24, r25
     f52:	21 f4       	brne	.+8      	; 0xf5c <fdevopen+0x8a>
     f54:	f0 93 ab 02 	sts	0x02AB, r31	; 0x8002ab <__iob+0x5>
     f58:	e0 93 aa 02 	sts	0x02AA, r30	; 0x8002aa <__iob+0x4>
     f5c:	cf 01       	movw	r24, r30
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <printf>:
     f68:	a0 e0       	ldi	r26, 0x00	; 0
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ea eb       	ldi	r30, 0xBA	; 186
     f6e:	f7 e0       	ldi	r31, 0x07	; 7
     f70:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__prologue_saves__+0x20>
     f74:	ae 01       	movw	r20, r28
     f76:	4b 5f       	subi	r20, 0xFB	; 251
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	fa 01       	movw	r30, r20
     f7c:	61 91       	ld	r22, Z+
     f7e:	71 91       	ld	r23, Z+
     f80:	af 01       	movw	r20, r30
     f82:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__iob+0x2>
     f86:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <__iob+0x3>
     f8a:	0e 94 ca 07 	call	0xf94	; 0xf94 <vfprintf>
     f8e:	e2 e0       	ldi	r30, 0x02	; 2
     f90:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__epilogue_restores__+0x20>

00000f94 <vfprintf>:
     f94:	ab e0       	ldi	r26, 0x0B	; 11
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e0 ed       	ldi	r30, 0xD0	; 208
     f9a:	f7 e0       	ldi	r31, 0x07	; 7
     f9c:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__prologue_saves__>
     fa0:	6c 01       	movw	r12, r24
     fa2:	7b 01       	movw	r14, r22
     fa4:	8a 01       	movw	r16, r20
     fa6:	fc 01       	movw	r30, r24
     fa8:	17 82       	std	Z+7, r1	; 0x07
     faa:	16 82       	std	Z+6, r1	; 0x06
     fac:	83 81       	ldd	r24, Z+3	; 0x03
     fae:	81 ff       	sbrs	r24, 1
     fb0:	cc c1       	rjmp	.+920    	; 0x134a <vfprintf+0x3b6>
     fb2:	ce 01       	movw	r24, r28
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	3c 01       	movw	r6, r24
     fb8:	f6 01       	movw	r30, r12
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	f7 01       	movw	r30, r14
     fbe:	93 fd       	sbrc	r25, 3
     fc0:	85 91       	lpm	r24, Z+
     fc2:	93 ff       	sbrs	r25, 3
     fc4:	81 91       	ld	r24, Z+
     fc6:	7f 01       	movw	r14, r30
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <vfprintf+0x3a>
     fcc:	ba c1       	rjmp	.+884    	; 0x1342 <vfprintf+0x3ae>
     fce:	85 32       	cpi	r24, 0x25	; 37
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <vfprintf+0x4c>
     fd2:	93 fd       	sbrc	r25, 3
     fd4:	85 91       	lpm	r24, Z+
     fd6:	93 ff       	sbrs	r25, 3
     fd8:	81 91       	ld	r24, Z+
     fda:	7f 01       	movw	r14, r30
     fdc:	85 32       	cpi	r24, 0x25	; 37
     fde:	29 f4       	brne	.+10     	; 0xfea <vfprintf+0x56>
     fe0:	b6 01       	movw	r22, r12
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
     fe8:	e7 cf       	rjmp	.-50     	; 0xfb8 <vfprintf+0x24>
     fea:	91 2c       	mov	r9, r1
     fec:	21 2c       	mov	r2, r1
     fee:	31 2c       	mov	r3, r1
     ff0:	ff e1       	ldi	r31, 0x1F	; 31
     ff2:	f3 15       	cp	r31, r3
     ff4:	d8 f0       	brcs	.+54     	; 0x102c <vfprintf+0x98>
     ff6:	8b 32       	cpi	r24, 0x2B	; 43
     ff8:	79 f0       	breq	.+30     	; 0x1018 <vfprintf+0x84>
     ffa:	38 f4       	brcc	.+14     	; 0x100a <vfprintf+0x76>
     ffc:	80 32       	cpi	r24, 0x20	; 32
     ffe:	79 f0       	breq	.+30     	; 0x101e <vfprintf+0x8a>
    1000:	83 32       	cpi	r24, 0x23	; 35
    1002:	a1 f4       	brne	.+40     	; 0x102c <vfprintf+0x98>
    1004:	23 2d       	mov	r18, r3
    1006:	20 61       	ori	r18, 0x10	; 16
    1008:	1d c0       	rjmp	.+58     	; 0x1044 <vfprintf+0xb0>
    100a:	8d 32       	cpi	r24, 0x2D	; 45
    100c:	61 f0       	breq	.+24     	; 0x1026 <vfprintf+0x92>
    100e:	80 33       	cpi	r24, 0x30	; 48
    1010:	69 f4       	brne	.+26     	; 0x102c <vfprintf+0x98>
    1012:	23 2d       	mov	r18, r3
    1014:	21 60       	ori	r18, 0x01	; 1
    1016:	16 c0       	rjmp	.+44     	; 0x1044 <vfprintf+0xb0>
    1018:	83 2d       	mov	r24, r3
    101a:	82 60       	ori	r24, 0x02	; 2
    101c:	38 2e       	mov	r3, r24
    101e:	e3 2d       	mov	r30, r3
    1020:	e4 60       	ori	r30, 0x04	; 4
    1022:	3e 2e       	mov	r3, r30
    1024:	2a c0       	rjmp	.+84     	; 0x107a <vfprintf+0xe6>
    1026:	f3 2d       	mov	r31, r3
    1028:	f8 60       	ori	r31, 0x08	; 8
    102a:	1d c0       	rjmp	.+58     	; 0x1066 <vfprintf+0xd2>
    102c:	37 fc       	sbrc	r3, 7
    102e:	2d c0       	rjmp	.+90     	; 0x108a <vfprintf+0xf6>
    1030:	20 ed       	ldi	r18, 0xD0	; 208
    1032:	28 0f       	add	r18, r24
    1034:	2a 30       	cpi	r18, 0x0A	; 10
    1036:	40 f0       	brcs	.+16     	; 0x1048 <vfprintf+0xb4>
    1038:	8e 32       	cpi	r24, 0x2E	; 46
    103a:	b9 f4       	brne	.+46     	; 0x106a <vfprintf+0xd6>
    103c:	36 fc       	sbrc	r3, 6
    103e:	81 c1       	rjmp	.+770    	; 0x1342 <vfprintf+0x3ae>
    1040:	23 2d       	mov	r18, r3
    1042:	20 64       	ori	r18, 0x40	; 64
    1044:	32 2e       	mov	r3, r18
    1046:	19 c0       	rjmp	.+50     	; 0x107a <vfprintf+0xe6>
    1048:	36 fe       	sbrs	r3, 6
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <vfprintf+0xc4>
    104c:	8a e0       	ldi	r24, 0x0A	; 10
    104e:	98 9e       	mul	r9, r24
    1050:	20 0d       	add	r18, r0
    1052:	11 24       	eor	r1, r1
    1054:	92 2e       	mov	r9, r18
    1056:	11 c0       	rjmp	.+34     	; 0x107a <vfprintf+0xe6>
    1058:	ea e0       	ldi	r30, 0x0A	; 10
    105a:	2e 9e       	mul	r2, r30
    105c:	20 0d       	add	r18, r0
    105e:	11 24       	eor	r1, r1
    1060:	22 2e       	mov	r2, r18
    1062:	f3 2d       	mov	r31, r3
    1064:	f0 62       	ori	r31, 0x20	; 32
    1066:	3f 2e       	mov	r3, r31
    1068:	08 c0       	rjmp	.+16     	; 0x107a <vfprintf+0xe6>
    106a:	8c 36       	cpi	r24, 0x6C	; 108
    106c:	21 f4       	brne	.+8      	; 0x1076 <vfprintf+0xe2>
    106e:	83 2d       	mov	r24, r3
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	38 2e       	mov	r3, r24
    1074:	02 c0       	rjmp	.+4      	; 0x107a <vfprintf+0xe6>
    1076:	88 36       	cpi	r24, 0x68	; 104
    1078:	41 f4       	brne	.+16     	; 0x108a <vfprintf+0xf6>
    107a:	f7 01       	movw	r30, r14
    107c:	93 fd       	sbrc	r25, 3
    107e:	85 91       	lpm	r24, Z+
    1080:	93 ff       	sbrs	r25, 3
    1082:	81 91       	ld	r24, Z+
    1084:	7f 01       	movw	r14, r30
    1086:	81 11       	cpse	r24, r1
    1088:	b3 cf       	rjmp	.-154    	; 0xff0 <vfprintf+0x5c>
    108a:	98 2f       	mov	r25, r24
    108c:	9f 7d       	andi	r25, 0xDF	; 223
    108e:	95 54       	subi	r25, 0x45	; 69
    1090:	93 30       	cpi	r25, 0x03	; 3
    1092:	28 f4       	brcc	.+10     	; 0x109e <vfprintf+0x10a>
    1094:	0c 5f       	subi	r16, 0xFC	; 252
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
    1098:	9f e3       	ldi	r25, 0x3F	; 63
    109a:	99 83       	std	Y+1, r25	; 0x01
    109c:	0d c0       	rjmp	.+26     	; 0x10b8 <vfprintf+0x124>
    109e:	83 36       	cpi	r24, 0x63	; 99
    10a0:	31 f0       	breq	.+12     	; 0x10ae <vfprintf+0x11a>
    10a2:	83 37       	cpi	r24, 0x73	; 115
    10a4:	71 f0       	breq	.+28     	; 0x10c2 <vfprintf+0x12e>
    10a6:	83 35       	cpi	r24, 0x53	; 83
    10a8:	09 f0       	breq	.+2      	; 0x10ac <vfprintf+0x118>
    10aa:	59 c0       	rjmp	.+178    	; 0x115e <vfprintf+0x1ca>
    10ac:	21 c0       	rjmp	.+66     	; 0x10f0 <vfprintf+0x15c>
    10ae:	f8 01       	movw	r30, r16
    10b0:	80 81       	ld	r24, Z
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	0e 5f       	subi	r16, 0xFE	; 254
    10b6:	1f 4f       	sbci	r17, 0xFF	; 255
    10b8:	88 24       	eor	r8, r8
    10ba:	83 94       	inc	r8
    10bc:	91 2c       	mov	r9, r1
    10be:	53 01       	movw	r10, r6
    10c0:	13 c0       	rjmp	.+38     	; 0x10e8 <vfprintf+0x154>
    10c2:	28 01       	movw	r4, r16
    10c4:	f2 e0       	ldi	r31, 0x02	; 2
    10c6:	4f 0e       	add	r4, r31
    10c8:	51 1c       	adc	r5, r1
    10ca:	f8 01       	movw	r30, r16
    10cc:	a0 80       	ld	r10, Z
    10ce:	b1 80       	ldd	r11, Z+1	; 0x01
    10d0:	36 fe       	sbrs	r3, 6
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <vfprintf+0x146>
    10d4:	69 2d       	mov	r22, r9
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <vfprintf+0x14a>
    10da:	6f ef       	ldi	r22, 0xFF	; 255
    10dc:	7f ef       	ldi	r23, 0xFF	; 255
    10de:	c5 01       	movw	r24, r10
    10e0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <strnlen>
    10e4:	4c 01       	movw	r8, r24
    10e6:	82 01       	movw	r16, r4
    10e8:	f3 2d       	mov	r31, r3
    10ea:	ff 77       	andi	r31, 0x7F	; 127
    10ec:	3f 2e       	mov	r3, r31
    10ee:	16 c0       	rjmp	.+44     	; 0x111c <vfprintf+0x188>
    10f0:	28 01       	movw	r4, r16
    10f2:	22 e0       	ldi	r18, 0x02	; 2
    10f4:	42 0e       	add	r4, r18
    10f6:	51 1c       	adc	r5, r1
    10f8:	f8 01       	movw	r30, r16
    10fa:	a0 80       	ld	r10, Z
    10fc:	b1 80       	ldd	r11, Z+1	; 0x01
    10fe:	36 fe       	sbrs	r3, 6
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <vfprintf+0x174>
    1102:	69 2d       	mov	r22, r9
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <vfprintf+0x178>
    1108:	6f ef       	ldi	r22, 0xFF	; 255
    110a:	7f ef       	ldi	r23, 0xFF	; 255
    110c:	c5 01       	movw	r24, r10
    110e:	0e 94 c7 09 	call	0x138e	; 0x138e <strnlen_P>
    1112:	4c 01       	movw	r8, r24
    1114:	f3 2d       	mov	r31, r3
    1116:	f0 68       	ori	r31, 0x80	; 128
    1118:	3f 2e       	mov	r3, r31
    111a:	82 01       	movw	r16, r4
    111c:	33 fc       	sbrc	r3, 3
    111e:	1b c0       	rjmp	.+54     	; 0x1156 <vfprintf+0x1c2>
    1120:	82 2d       	mov	r24, r2
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	88 16       	cp	r8, r24
    1126:	99 06       	cpc	r9, r25
    1128:	b0 f4       	brcc	.+44     	; 0x1156 <vfprintf+0x1c2>
    112a:	b6 01       	movw	r22, r12
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    1134:	2a 94       	dec	r2
    1136:	f4 cf       	rjmp	.-24     	; 0x1120 <vfprintf+0x18c>
    1138:	f5 01       	movw	r30, r10
    113a:	37 fc       	sbrc	r3, 7
    113c:	85 91       	lpm	r24, Z+
    113e:	37 fe       	sbrs	r3, 7
    1140:	81 91       	ld	r24, Z+
    1142:	5f 01       	movw	r10, r30
    1144:	b6 01       	movw	r22, r12
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    114c:	21 10       	cpse	r2, r1
    114e:	2a 94       	dec	r2
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	82 1a       	sub	r8, r18
    1154:	91 08       	sbc	r9, r1
    1156:	81 14       	cp	r8, r1
    1158:	91 04       	cpc	r9, r1
    115a:	71 f7       	brne	.-36     	; 0x1138 <vfprintf+0x1a4>
    115c:	e8 c0       	rjmp	.+464    	; 0x132e <vfprintf+0x39a>
    115e:	84 36       	cpi	r24, 0x64	; 100
    1160:	11 f0       	breq	.+4      	; 0x1166 <vfprintf+0x1d2>
    1162:	89 36       	cpi	r24, 0x69	; 105
    1164:	41 f5       	brne	.+80     	; 0x11b6 <vfprintf+0x222>
    1166:	f8 01       	movw	r30, r16
    1168:	37 fe       	sbrs	r3, 7
    116a:	07 c0       	rjmp	.+14     	; 0x117a <vfprintf+0x1e6>
    116c:	60 81       	ld	r22, Z
    116e:	71 81       	ldd	r23, Z+1	; 0x01
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	0c 5f       	subi	r16, 0xFC	; 252
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	08 c0       	rjmp	.+16     	; 0x118a <vfprintf+0x1f6>
    117a:	60 81       	ld	r22, Z
    117c:	71 81       	ldd	r23, Z+1	; 0x01
    117e:	07 2e       	mov	r0, r23
    1180:	00 0c       	add	r0, r0
    1182:	88 0b       	sbc	r24, r24
    1184:	99 0b       	sbc	r25, r25
    1186:	0e 5f       	subi	r16, 0xFE	; 254
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	f3 2d       	mov	r31, r3
    118c:	ff 76       	andi	r31, 0x6F	; 111
    118e:	3f 2e       	mov	r3, r31
    1190:	97 ff       	sbrs	r25, 7
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <vfprintf+0x212>
    1194:	90 95       	com	r25
    1196:	80 95       	com	r24
    1198:	70 95       	com	r23
    119a:	61 95       	neg	r22
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8f 4f       	sbci	r24, 0xFF	; 255
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	f0 68       	ori	r31, 0x80	; 128
    11a4:	3f 2e       	mov	r3, r31
    11a6:	2a e0       	ldi	r18, 0x0A	; 10
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	a3 01       	movw	r20, r6
    11ac:	0e 94 20 0a 	call	0x1440	; 0x1440 <__ultoa_invert>
    11b0:	88 2e       	mov	r8, r24
    11b2:	86 18       	sub	r8, r6
    11b4:	45 c0       	rjmp	.+138    	; 0x1240 <vfprintf+0x2ac>
    11b6:	85 37       	cpi	r24, 0x75	; 117
    11b8:	31 f4       	brne	.+12     	; 0x11c6 <vfprintf+0x232>
    11ba:	23 2d       	mov	r18, r3
    11bc:	2f 7e       	andi	r18, 0xEF	; 239
    11be:	b2 2e       	mov	r11, r18
    11c0:	2a e0       	ldi	r18, 0x0A	; 10
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	25 c0       	rjmp	.+74     	; 0x1210 <vfprintf+0x27c>
    11c6:	93 2d       	mov	r25, r3
    11c8:	99 7f       	andi	r25, 0xF9	; 249
    11ca:	b9 2e       	mov	r11, r25
    11cc:	8f 36       	cpi	r24, 0x6F	; 111
    11ce:	c1 f0       	breq	.+48     	; 0x1200 <vfprintf+0x26c>
    11d0:	18 f4       	brcc	.+6      	; 0x11d8 <vfprintf+0x244>
    11d2:	88 35       	cpi	r24, 0x58	; 88
    11d4:	79 f0       	breq	.+30     	; 0x11f4 <vfprintf+0x260>
    11d6:	b5 c0       	rjmp	.+362    	; 0x1342 <vfprintf+0x3ae>
    11d8:	80 37       	cpi	r24, 0x70	; 112
    11da:	19 f0       	breq	.+6      	; 0x11e2 <vfprintf+0x24e>
    11dc:	88 37       	cpi	r24, 0x78	; 120
    11de:	21 f0       	breq	.+8      	; 0x11e8 <vfprintf+0x254>
    11e0:	b0 c0       	rjmp	.+352    	; 0x1342 <vfprintf+0x3ae>
    11e2:	e9 2f       	mov	r30, r25
    11e4:	e0 61       	ori	r30, 0x10	; 16
    11e6:	be 2e       	mov	r11, r30
    11e8:	b4 fe       	sbrs	r11, 4
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <vfprintf+0x272>
    11ec:	fb 2d       	mov	r31, r11
    11ee:	f4 60       	ori	r31, 0x04	; 4
    11f0:	bf 2e       	mov	r11, r31
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <vfprintf+0x272>
    11f4:	34 fe       	sbrs	r3, 4
    11f6:	0a c0       	rjmp	.+20     	; 0x120c <vfprintf+0x278>
    11f8:	29 2f       	mov	r18, r25
    11fa:	26 60       	ori	r18, 0x06	; 6
    11fc:	b2 2e       	mov	r11, r18
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <vfprintf+0x278>
    1200:	28 e0       	ldi	r18, 0x08	; 8
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <vfprintf+0x27c>
    1206:	20 e1       	ldi	r18, 0x10	; 16
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <vfprintf+0x27c>
    120c:	20 e1       	ldi	r18, 0x10	; 16
    120e:	32 e0       	ldi	r19, 0x02	; 2
    1210:	f8 01       	movw	r30, r16
    1212:	b7 fe       	sbrs	r11, 7
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <vfprintf+0x290>
    1216:	60 81       	ld	r22, Z
    1218:	71 81       	ldd	r23, Z+1	; 0x01
    121a:	82 81       	ldd	r24, Z+2	; 0x02
    121c:	93 81       	ldd	r25, Z+3	; 0x03
    121e:	0c 5f       	subi	r16, 0xFC	; 252
    1220:	1f 4f       	sbci	r17, 0xFF	; 255
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <vfprintf+0x29c>
    1224:	60 81       	ld	r22, Z
    1226:	71 81       	ldd	r23, Z+1	; 0x01
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 5f       	subi	r16, 0xFE	; 254
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	a3 01       	movw	r20, r6
    1232:	0e 94 20 0a 	call	0x1440	; 0x1440 <__ultoa_invert>
    1236:	88 2e       	mov	r8, r24
    1238:	86 18       	sub	r8, r6
    123a:	fb 2d       	mov	r31, r11
    123c:	ff 77       	andi	r31, 0x7F	; 127
    123e:	3f 2e       	mov	r3, r31
    1240:	36 fe       	sbrs	r3, 6
    1242:	0d c0       	rjmp	.+26     	; 0x125e <vfprintf+0x2ca>
    1244:	23 2d       	mov	r18, r3
    1246:	2e 7f       	andi	r18, 0xFE	; 254
    1248:	a2 2e       	mov	r10, r18
    124a:	89 14       	cp	r8, r9
    124c:	58 f4       	brcc	.+22     	; 0x1264 <vfprintf+0x2d0>
    124e:	34 fe       	sbrs	r3, 4
    1250:	0b c0       	rjmp	.+22     	; 0x1268 <vfprintf+0x2d4>
    1252:	32 fc       	sbrc	r3, 2
    1254:	09 c0       	rjmp	.+18     	; 0x1268 <vfprintf+0x2d4>
    1256:	83 2d       	mov	r24, r3
    1258:	8e 7e       	andi	r24, 0xEE	; 238
    125a:	a8 2e       	mov	r10, r24
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <vfprintf+0x2d4>
    125e:	b8 2c       	mov	r11, r8
    1260:	a3 2c       	mov	r10, r3
    1262:	03 c0       	rjmp	.+6      	; 0x126a <vfprintf+0x2d6>
    1264:	b8 2c       	mov	r11, r8
    1266:	01 c0       	rjmp	.+2      	; 0x126a <vfprintf+0x2d6>
    1268:	b9 2c       	mov	r11, r9
    126a:	a4 fe       	sbrs	r10, 4
    126c:	0f c0       	rjmp	.+30     	; 0x128c <vfprintf+0x2f8>
    126e:	fe 01       	movw	r30, r28
    1270:	e8 0d       	add	r30, r8
    1272:	f1 1d       	adc	r31, r1
    1274:	80 81       	ld	r24, Z
    1276:	80 33       	cpi	r24, 0x30	; 48
    1278:	21 f4       	brne	.+8      	; 0x1282 <vfprintf+0x2ee>
    127a:	9a 2d       	mov	r25, r10
    127c:	99 7e       	andi	r25, 0xE9	; 233
    127e:	a9 2e       	mov	r10, r25
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <vfprintf+0x300>
    1282:	a2 fe       	sbrs	r10, 2
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <vfprintf+0x2fe>
    1286:	b3 94       	inc	r11
    1288:	b3 94       	inc	r11
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <vfprintf+0x300>
    128c:	8a 2d       	mov	r24, r10
    128e:	86 78       	andi	r24, 0x86	; 134
    1290:	09 f0       	breq	.+2      	; 0x1294 <vfprintf+0x300>
    1292:	b3 94       	inc	r11
    1294:	a3 fc       	sbrc	r10, 3
    1296:	11 c0       	rjmp	.+34     	; 0x12ba <vfprintf+0x326>
    1298:	a0 fe       	sbrs	r10, 0
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <vfprintf+0x314>
    129c:	b2 14       	cp	r11, r2
    129e:	88 f4       	brcc	.+34     	; 0x12c2 <vfprintf+0x32e>
    12a0:	28 0c       	add	r2, r8
    12a2:	92 2c       	mov	r9, r2
    12a4:	9b 18       	sub	r9, r11
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <vfprintf+0x330>
    12a8:	b2 14       	cp	r11, r2
    12aa:	60 f4       	brcc	.+24     	; 0x12c4 <vfprintf+0x330>
    12ac:	b6 01       	movw	r22, r12
    12ae:	80 e2       	ldi	r24, 0x20	; 32
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    12b6:	b3 94       	inc	r11
    12b8:	f7 cf       	rjmp	.-18     	; 0x12a8 <vfprintf+0x314>
    12ba:	b2 14       	cp	r11, r2
    12bc:	18 f4       	brcc	.+6      	; 0x12c4 <vfprintf+0x330>
    12be:	2b 18       	sub	r2, r11
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x332>
    12c2:	98 2c       	mov	r9, r8
    12c4:	21 2c       	mov	r2, r1
    12c6:	a4 fe       	sbrs	r10, 4
    12c8:	10 c0       	rjmp	.+32     	; 0x12ea <vfprintf+0x356>
    12ca:	b6 01       	movw	r22, r12
    12cc:	80 e3       	ldi	r24, 0x30	; 48
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    12d4:	a2 fe       	sbrs	r10, 2
    12d6:	17 c0       	rjmp	.+46     	; 0x1306 <vfprintf+0x372>
    12d8:	a1 fc       	sbrc	r10, 1
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <vfprintf+0x34e>
    12dc:	88 e7       	ldi	r24, 0x78	; 120
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <vfprintf+0x352>
    12e2:	88 e5       	ldi	r24, 0x58	; 88
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	b6 01       	movw	r22, r12
    12e8:	0c c0       	rjmp	.+24     	; 0x1302 <vfprintf+0x36e>
    12ea:	8a 2d       	mov	r24, r10
    12ec:	86 78       	andi	r24, 0x86	; 134
    12ee:	59 f0       	breq	.+22     	; 0x1306 <vfprintf+0x372>
    12f0:	a1 fe       	sbrs	r10, 1
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <vfprintf+0x364>
    12f4:	8b e2       	ldi	r24, 0x2B	; 43
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <vfprintf+0x366>
    12f8:	80 e2       	ldi	r24, 0x20	; 32
    12fa:	a7 fc       	sbrc	r10, 7
    12fc:	8d e2       	ldi	r24, 0x2D	; 45
    12fe:	b6 01       	movw	r22, r12
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    1306:	89 14       	cp	r8, r9
    1308:	38 f4       	brcc	.+14     	; 0x1318 <vfprintf+0x384>
    130a:	b6 01       	movw	r22, r12
    130c:	80 e3       	ldi	r24, 0x30	; 48
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    1314:	9a 94       	dec	r9
    1316:	f7 cf       	rjmp	.-18     	; 0x1306 <vfprintf+0x372>
    1318:	8a 94       	dec	r8
    131a:	f3 01       	movw	r30, r6
    131c:	e8 0d       	add	r30, r8
    131e:	f1 1d       	adc	r31, r1
    1320:	80 81       	ld	r24, Z
    1322:	b6 01       	movw	r22, r12
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    132a:	81 10       	cpse	r8, r1
    132c:	f5 cf       	rjmp	.-22     	; 0x1318 <vfprintf+0x384>
    132e:	22 20       	and	r2, r2
    1330:	09 f4       	brne	.+2      	; 0x1334 <vfprintf+0x3a0>
    1332:	42 ce       	rjmp	.-892    	; 0xfb8 <vfprintf+0x24>
    1334:	b6 01       	movw	r22, r12
    1336:	80 e2       	ldi	r24, 0x20	; 32
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <fputc>
    133e:	2a 94       	dec	r2
    1340:	f6 cf       	rjmp	.-20     	; 0x132e <vfprintf+0x39a>
    1342:	f6 01       	movw	r30, r12
    1344:	86 81       	ldd	r24, Z+6	; 0x06
    1346:	97 81       	ldd	r25, Z+7	; 0x07
    1348:	02 c0       	rjmp	.+4      	; 0x134e <vfprintf+0x3ba>
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	2b 96       	adiw	r28, 0x0b	; 11
    1350:	e2 e1       	ldi	r30, 0x12	; 18
    1352:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__epilogue_restores__>

00001356 <calloc>:
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	86 9f       	mul	r24, r22
    1360:	80 01       	movw	r16, r0
    1362:	87 9f       	mul	r24, r23
    1364:	10 0d       	add	r17, r0
    1366:	96 9f       	mul	r25, r22
    1368:	10 0d       	add	r17, r0
    136a:	11 24       	eor	r1, r1
    136c:	c8 01       	movw	r24, r16
    136e:	0e 94 48 06 	call	0xc90	; 0xc90 <malloc>
    1372:	ec 01       	movw	r28, r24
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	29 f0       	breq	.+10     	; 0x1382 <calloc+0x2c>
    1378:	a8 01       	movw	r20, r16
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <memset>
    1382:	ce 01       	movw	r24, r28
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <strnlen_P>:
    138e:	fc 01       	movw	r30, r24
    1390:	05 90       	lpm	r0, Z+
    1392:	61 50       	subi	r22, 0x01	; 1
    1394:	70 40       	sbci	r23, 0x00	; 0
    1396:	01 10       	cpse	r0, r1
    1398:	d8 f7       	brcc	.-10     	; 0x1390 <strnlen_P+0x2>
    139a:	80 95       	com	r24
    139c:	90 95       	com	r25
    139e:	8e 0f       	add	r24, r30
    13a0:	9f 1f       	adc	r25, r31
    13a2:	08 95       	ret

000013a4 <memset>:
    13a4:	dc 01       	movw	r26, r24
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <memset+0x6>
    13a8:	6d 93       	st	X+, r22
    13aa:	41 50       	subi	r20, 0x01	; 1
    13ac:	50 40       	sbci	r21, 0x00	; 0
    13ae:	e0 f7       	brcc	.-8      	; 0x13a8 <memset+0x4>
    13b0:	08 95       	ret

000013b2 <strnlen>:
    13b2:	fc 01       	movw	r30, r24
    13b4:	61 50       	subi	r22, 0x01	; 1
    13b6:	70 40       	sbci	r23, 0x00	; 0
    13b8:	01 90       	ld	r0, Z+
    13ba:	01 10       	cpse	r0, r1
    13bc:	d8 f7       	brcc	.-10     	; 0x13b4 <strnlen+0x2>
    13be:	80 95       	com	r24
    13c0:	90 95       	com	r25
    13c2:	8e 0f       	add	r24, r30
    13c4:	9f 1f       	adc	r25, r31
    13c6:	08 95       	ret

000013c8 <fputc>:
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	fb 01       	movw	r30, r22
    13d2:	23 81       	ldd	r18, Z+3	; 0x03
    13d4:	21 fd       	sbrc	r18, 1
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <fputc+0x16>
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	9f ef       	ldi	r25, 0xFF	; 255
    13dc:	2c c0       	rjmp	.+88     	; 0x1436 <fputc+0x6e>
    13de:	22 ff       	sbrs	r18, 2
    13e0:	16 c0       	rjmp	.+44     	; 0x140e <fputc+0x46>
    13e2:	46 81       	ldd	r20, Z+6	; 0x06
    13e4:	57 81       	ldd	r21, Z+7	; 0x07
    13e6:	24 81       	ldd	r18, Z+4	; 0x04
    13e8:	35 81       	ldd	r19, Z+5	; 0x05
    13ea:	42 17       	cp	r20, r18
    13ec:	53 07       	cpc	r21, r19
    13ee:	44 f4       	brge	.+16     	; 0x1400 <fputc+0x38>
    13f0:	a0 81       	ld	r26, Z
    13f2:	b1 81       	ldd	r27, Z+1	; 0x01
    13f4:	9d 01       	movw	r18, r26
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	31 83       	std	Z+1, r19	; 0x01
    13fc:	20 83       	st	Z, r18
    13fe:	8c 93       	st	X, r24
    1400:	26 81       	ldd	r18, Z+6	; 0x06
    1402:	37 81       	ldd	r19, Z+7	; 0x07
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	37 83       	std	Z+7, r19	; 0x07
    140a:	26 83       	std	Z+6, r18	; 0x06
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <fputc+0x6e>
    140e:	8b 01       	movw	r16, r22
    1410:	ec 01       	movw	r28, r24
    1412:	fb 01       	movw	r30, r22
    1414:	00 84       	ldd	r0, Z+8	; 0x08
    1416:	f1 85       	ldd	r31, Z+9	; 0x09
    1418:	e0 2d       	mov	r30, r0
    141a:	09 95       	icall
    141c:	89 2b       	or	r24, r25
    141e:	e1 f6       	brne	.-72     	; 0x13d8 <fputc+0x10>
    1420:	d8 01       	movw	r26, r16
    1422:	16 96       	adiw	r26, 0x06	; 6
    1424:	8d 91       	ld	r24, X+
    1426:	9c 91       	ld	r25, X
    1428:	17 97       	sbiw	r26, 0x07	; 7
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	17 96       	adiw	r26, 0x07	; 7
    142e:	9c 93       	st	X, r25
    1430:	8e 93       	st	-X, r24
    1432:	16 97       	sbiw	r26, 0x06	; 6
    1434:	ce 01       	movw	r24, r28
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <__ultoa_invert>:
    1440:	fa 01       	movw	r30, r20
    1442:	aa 27       	eor	r26, r26
    1444:	28 30       	cpi	r18, 0x08	; 8
    1446:	51 f1       	breq	.+84     	; 0x149c <__ultoa_invert+0x5c>
    1448:	20 31       	cpi	r18, 0x10	; 16
    144a:	81 f1       	breq	.+96     	; 0x14ac <__ultoa_invert+0x6c>
    144c:	e8 94       	clt
    144e:	6f 93       	push	r22
    1450:	6e 7f       	andi	r22, 0xFE	; 254
    1452:	6e 5f       	subi	r22, 0xFE	; 254
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	af 4f       	sbci	r26, 0xFF	; 255
    145c:	b1 e0       	ldi	r27, 0x01	; 1
    145e:	3e d0       	rcall	.+124    	; 0x14dc <__ultoa_invert+0x9c>
    1460:	b4 e0       	ldi	r27, 0x04	; 4
    1462:	3c d0       	rcall	.+120    	; 0x14dc <__ultoa_invert+0x9c>
    1464:	67 0f       	add	r22, r23
    1466:	78 1f       	adc	r23, r24
    1468:	89 1f       	adc	r24, r25
    146a:	9a 1f       	adc	r25, r26
    146c:	a1 1d       	adc	r26, r1
    146e:	68 0f       	add	r22, r24
    1470:	79 1f       	adc	r23, r25
    1472:	8a 1f       	adc	r24, r26
    1474:	91 1d       	adc	r25, r1
    1476:	a1 1d       	adc	r26, r1
    1478:	6a 0f       	add	r22, r26
    147a:	71 1d       	adc	r23, r1
    147c:	81 1d       	adc	r24, r1
    147e:	91 1d       	adc	r25, r1
    1480:	a1 1d       	adc	r26, r1
    1482:	20 d0       	rcall	.+64     	; 0x14c4 <__ultoa_invert+0x84>
    1484:	09 f4       	brne	.+2      	; 0x1488 <__ultoa_invert+0x48>
    1486:	68 94       	set
    1488:	3f 91       	pop	r19
    148a:	2a e0       	ldi	r18, 0x0A	; 10
    148c:	26 9f       	mul	r18, r22
    148e:	11 24       	eor	r1, r1
    1490:	30 19       	sub	r19, r0
    1492:	30 5d       	subi	r19, 0xD0	; 208
    1494:	31 93       	st	Z+, r19
    1496:	de f6       	brtc	.-74     	; 0x144e <__ultoa_invert+0xe>
    1498:	cf 01       	movw	r24, r30
    149a:	08 95       	ret
    149c:	46 2f       	mov	r20, r22
    149e:	47 70       	andi	r20, 0x07	; 7
    14a0:	40 5d       	subi	r20, 0xD0	; 208
    14a2:	41 93       	st	Z+, r20
    14a4:	b3 e0       	ldi	r27, 0x03	; 3
    14a6:	0f d0       	rcall	.+30     	; 0x14c6 <__ultoa_invert+0x86>
    14a8:	c9 f7       	brne	.-14     	; 0x149c <__ultoa_invert+0x5c>
    14aa:	f6 cf       	rjmp	.-20     	; 0x1498 <__ultoa_invert+0x58>
    14ac:	46 2f       	mov	r20, r22
    14ae:	4f 70       	andi	r20, 0x0F	; 15
    14b0:	40 5d       	subi	r20, 0xD0	; 208
    14b2:	4a 33       	cpi	r20, 0x3A	; 58
    14b4:	18 f0       	brcs	.+6      	; 0x14bc <__ultoa_invert+0x7c>
    14b6:	49 5d       	subi	r20, 0xD9	; 217
    14b8:	31 fd       	sbrc	r19, 1
    14ba:	40 52       	subi	r20, 0x20	; 32
    14bc:	41 93       	st	Z+, r20
    14be:	02 d0       	rcall	.+4      	; 0x14c4 <__ultoa_invert+0x84>
    14c0:	a9 f7       	brne	.-22     	; 0x14ac <__ultoa_invert+0x6c>
    14c2:	ea cf       	rjmp	.-44     	; 0x1498 <__ultoa_invert+0x58>
    14c4:	b4 e0       	ldi	r27, 0x04	; 4
    14c6:	a6 95       	lsr	r26
    14c8:	97 95       	ror	r25
    14ca:	87 95       	ror	r24
    14cc:	77 95       	ror	r23
    14ce:	67 95       	ror	r22
    14d0:	ba 95       	dec	r27
    14d2:	c9 f7       	brne	.-14     	; 0x14c6 <__ultoa_invert+0x86>
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	61 05       	cpc	r22, r1
    14d8:	71 05       	cpc	r23, r1
    14da:	08 95       	ret
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	0a 2e       	mov	r0, r26
    14e2:	06 94       	lsr	r0
    14e4:	57 95       	ror	r21
    14e6:	47 95       	ror	r20
    14e8:	37 95       	ror	r19
    14ea:	27 95       	ror	r18
    14ec:	ba 95       	dec	r27
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__ultoa_invert+0xa2>
    14f0:	62 0f       	add	r22, r18
    14f2:	73 1f       	adc	r23, r19
    14f4:	84 1f       	adc	r24, r20
    14f6:	95 1f       	adc	r25, r21
    14f8:	a0 1d       	adc	r26, r0
    14fa:	08 95       	ret

000014fc <__prologue_saves__>:
    14fc:	2f 92       	push	r2
    14fe:	3f 92       	push	r3
    1500:	4f 92       	push	r4
    1502:	5f 92       	push	r5
    1504:	6f 92       	push	r6
    1506:	7f 92       	push	r7
    1508:	8f 92       	push	r8
    150a:	9f 92       	push	r9
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	ca 1b       	sub	r28, r26
    1526:	db 0b       	sbc	r29, r27
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	09 94       	ijmp

00001534 <__epilogue_restores__>:
    1534:	2a 88       	ldd	r2, Y+18	; 0x12
    1536:	39 88       	ldd	r3, Y+17	; 0x11
    1538:	48 88       	ldd	r4, Y+16	; 0x10
    153a:	5f 84       	ldd	r5, Y+15	; 0x0f
    153c:	6e 84       	ldd	r6, Y+14	; 0x0e
    153e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1540:	8c 84       	ldd	r8, Y+12	; 0x0c
    1542:	9b 84       	ldd	r9, Y+11	; 0x0b
    1544:	aa 84       	ldd	r10, Y+10	; 0x0a
    1546:	b9 84       	ldd	r11, Y+9	; 0x09
    1548:	c8 84       	ldd	r12, Y+8	; 0x08
    154a:	df 80       	ldd	r13, Y+7	; 0x07
    154c:	ee 80       	ldd	r14, Y+6	; 0x06
    154e:	fd 80       	ldd	r15, Y+5	; 0x05
    1550:	0c 81       	ldd	r16, Y+4	; 0x04
    1552:	1b 81       	ldd	r17, Y+3	; 0x03
    1554:	aa 81       	ldd	r26, Y+2	; 0x02
    1556:	b9 81       	ldd	r27, Y+1	; 0x01
    1558:	ce 0f       	add	r28, r30
    155a:	d1 1d       	adc	r29, r1
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	ed 01       	movw	r28, r26
    1568:	08 95       	ret

0000156a <_exit>:
    156a:	f8 94       	cli

0000156c <__stop_program>:
    156c:	ff cf       	rjmp	.-2      	; 0x156c <__stop_program>
