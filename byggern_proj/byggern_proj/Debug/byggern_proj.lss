
byggern_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800100  0000162e  000016c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000162e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080029c  0080029c  0000185e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d32  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2c  00000000  00000000  00004862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001247  00000000  00000000  0000558e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000604  00000000  00000000  000067d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095d  00000000  00000000  00006ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010a7  00000000  00000000  00007739  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000087e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_1>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_3>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ee e2       	ldi	r30, 0x2E	; 46
     200:	f6 e1       	ldi	r31, 0x16	; 22
     202:	02 c0       	rjmp	.+4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ac 39       	cpi	r26, 0x9C	; 156
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	ac e9       	ldi	r26, 0x9C	; 156
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	ac 3a       	cpi	r26, 0xAC	; 172
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 9e 04 	call	0x93c	; 0x93c <main>
     222:	0c 94 15 0b 	jmp	0x162a	; 0x162a <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <set_ctc_mode>:
void init_interrupt(){
	clear_bit(GICR,5);		//clear the INT2 bit in GICR to avoid unintentional interrupts
	clear_bit(EMCUCR, 0);	//set ISC2 bit low to enable INT2 triggered by falling edge
	set_bit(GIFR, 5);		//clear interrupt flagg by writing a logic one to it
	set_bit(GICR, 5);		//set the INT2 bit in GICR to enable interrupts
	sei();					//set the I-bit in SREG (Global interrupt enable)
     22a:	eb e8       	ldi	r30, 0x8B	; 139
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	8e 7f       	andi	r24, 0xFE	; 254
     232:	80 83       	st	Z, r24
     234:	80 81       	ld	r24, Z
     236:	8d 7f       	andi	r24, 0xFD	; 253
     238:	80 83       	st	Z, r24
     23a:	ea e8       	ldi	r30, 0x8A	; 138
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	88 60       	ori	r24, 0x08	; 8
     242:	80 83       	st	Z, r24
     244:	80 81       	ld	r24, Z
     246:	8f 7e       	andi	r24, 0xEF	; 239
     248:	80 83       	st	Z, r24
     24a:	08 95       	ret

0000024c <set_selected_clock>:
     24c:	ea e8       	ldi	r30, 0x8A	; 138
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	81 60       	ori	r24, 0x01	; 1
     254:	80 83       	st	Z, r24
     256:	80 81       	ld	r24, Z
     258:	8d 7f       	andi	r24, 0xFD	; 253
     25a:	80 83       	st	Z, r24
     25c:	80 81       	ld	r24, Z
     25e:	8b 7f       	andi	r24, 0xFB	; 251
     260:	80 83       	st	Z, r24
     262:	08 95       	ret

00000264 <set_compare_match_mode>:
     264:	eb e8       	ldi	r30, 0x8B	; 139
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	80 83       	st	Z, r24
     26e:	80 81       	ld	r24, Z
     270:	8f 77       	andi	r24, 0x7F	; 127
     272:	80 83       	st	Z, r24
     274:	08 95       	ret

00000276 <init_pwm>:
     276:	81 b3       	in	r24, 0x11	; 17
     278:	80 61       	ori	r24, 0x10	; 16
     27a:	81 bb       	out	0x11, r24	; 17
     27c:	0e 94 15 01 	call	0x22a	; 0x22a <set_ctc_mode>
     280:	0e 94 26 01 	call	0x24c	; 0x24c <set_selected_clock>
     284:	0e 94 32 01 	call	0x264	; 0x264 <set_compare_match_mode>
     288:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     28c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     290:	08 95       	ret

00000292 <read_adc>:
     292:	e0 e0       	ldi	r30, 0x00	; 0
     294:	f4 e1       	ldi	r31, 0x14	; 20
     296:	10 82       	st	Z, r1
     298:	82 e6       	ldi	r24, 0x62	; 98
     29a:	8a 95       	dec	r24
     29c:	f1 f7       	brne	.-4      	; 0x29a <read_adc+0x8>
     29e:	00 00       	nop
     2a0:	60 81       	ld	r22, Z
     2a2:	70 91 01 14 	lds	r23, 0x1401	; 0x801401 <__bss_end+0x1155>
     2a6:	80 91 02 14 	lds	r24, 0x1402	; 0x801402 <__bss_end+0x1156>
     2aa:	90 91 03 14 	lds	r25, 0x1403	; 0x801403 <__bss_end+0x1157>
     2ae:	08 95       	ret

000002b0 <init_adc>:
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <init_adc+0x10>
     2b6:	20 e1       	ldi	r18, 0x10	; 16
     2b8:	28 0f       	add	r18, r24
     2ba:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x1154>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	88 30       	cpi	r24, 0x08	; 8
     2c2:	91 05       	cpc	r25, r1
     2c4:	c4 f3       	brlt	.-16     	; 0x2b6 <init_adc+0x6>
     2c6:	08 95       	ret

000002c8 <get_joystick_analog>:
     2c8:	0e 94 49 01 	call	0x292	; 0x292 <read_adc>
     2cc:	96 2f       	mov	r25, r22
     2ce:	87 2f       	mov	r24, r23
     2d0:	08 95       	ret

000002d2 <get_joystick_direction>:
     2d2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <get_joystick_analog>
     2d6:	29 2f       	mov	r18, r25
     2d8:	84 31       	cpi	r24, 0x14	; 20
     2da:	70 f0       	brcs	.+28     	; 0x2f8 <get_joystick_direction+0x26>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 3e       	cpi	r24, 0xEC	; 236
     2e0:	91 05       	cpc	r25, r1
     2e2:	6c f4       	brge	.+26     	; 0x2fe <get_joystick_direction+0x2c>
     2e4:	24 31       	cpi	r18, 0x14	; 20
     2e6:	70 f0       	brcs	.+28     	; 0x304 <get_joystick_direction+0x32>
     2e8:	82 2f       	mov	r24, r18
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	8c 3e       	cpi	r24, 0xEC	; 236
     2ee:	91 05       	cpc	r25, r1
     2f0:	64 f4       	brge	.+24     	; 0x30a <get_joystick_direction+0x38>
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	08 95       	ret
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	08 95       	ret
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	08 95       	ret
     304:	83 e0       	ldi	r24, 0x03	; 3
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	08 95       	ret
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	08 95       	ret

00000310 <joystick_direction_to_string>:
     310:	82 30       	cpi	r24, 0x02	; 2
     312:	91 05       	cpc	r25, r1
     314:	71 f0       	breq	.+28     	; 0x332 <joystick_direction_to_string+0x22>
     316:	2c f4       	brge	.+10     	; 0x322 <joystick_direction_to_string+0x12>
     318:	00 97       	sbiw	r24, 0x00	; 0
     31a:	89 f0       	breq	.+34     	; 0x33e <joystick_direction_to_string+0x2e>
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	61 f0       	breq	.+24     	; 0x338 <joystick_direction_to_string+0x28>
     320:	11 c0       	rjmp	.+34     	; 0x344 <joystick_direction_to_string+0x34>
     322:	83 30       	cpi	r24, 0x03	; 3
     324:	91 05       	cpc	r25, r1
     326:	89 f0       	breq	.+34     	; 0x34a <joystick_direction_to_string+0x3a>
     328:	04 97       	sbiw	r24, 0x04	; 4
     32a:	61 f4       	brne	.+24     	; 0x344 <joystick_direction_to_string+0x34>
     32c:	86 e0       	ldi	r24, 0x06	; 6
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	08 95       	ret
     332:	83 e1       	ldi	r24, 0x13	; 19
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	08 95       	ret
     338:	86 e1       	ldi	r24, 0x16	; 22
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	08 95       	ret
     33e:	8c e1       	ldi	r24, 0x1C	; 28
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	08 95       	ret
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	08 95       	ret
     34a:	8e e0       	ldi	r24, 0x0E	; 14
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	08 95       	ret

00000350 <get_slider_right_analog>:
     350:	0e 94 49 01 	call	0x292	; 0x292 <read_adc>
     354:	08 95       	ret

00000356 <get_slider_left_analog>:
     356:	0e 94 49 01 	call	0x292	; 0x292 <read_adc>
     35a:	89 2f       	mov	r24, r25
     35c:	08 95       	ret

0000035e <draw_selected_arrow>:
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	0e 94 2a 05 	call	0xa54	; 0xa54 <oled_goto_page>
     366:	8a e7       	ldi	r24, 0x7A	; 122
     368:	0e 94 35 05 	call	0xa6a	; 0xa6a <oled_goto_col>
     36c:	c0 e0       	ldi	r28, 0x00	; 0
     36e:	d0 e0       	ldi	r29, 0x00	; 0
     370:	07 c0       	rjmp	.+14     	; 0x380 <draw_selected_arrow+0x22>
     372:	fe 01       	movw	r30, r28
     374:	e1 58       	subi	r30, 0x81	; 129
     376:	fd 4f       	sbci	r31, 0xFD	; 253
     378:	80 81       	ld	r24, Z
     37a:	0e 94 4b 05 	call	0xa96	; 0xa96 <oled_write>
     37e:	21 96       	adiw	r28, 0x01	; 1
     380:	c6 30       	cpi	r28, 0x06	; 6
     382:	d1 05       	cpc	r29, r1
     384:	b4 f3       	brlt	.-20     	; 0x372 <draw_selected_arrow+0x14>
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <oled_menu_display>:
     38c:	cf 93       	push	r28
     38e:	c0 e0       	ldi	r28, 0x00	; 0
     390:	1f c0       	rjmp	.+62     	; 0x3d0 <oled_menu_display+0x44>
     392:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <top_item>
     396:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <top_item+0x1>
     39a:	8c 0f       	add	r24, r28
     39c:	91 1d       	adc	r25, r1
     39e:	8a 30       	cpi	r24, 0x0A	; 10
     3a0:	91 05       	cpc	r25, r1
     3a2:	44 f4       	brge	.+16     	; 0x3b4 <oled_menu_display+0x28>
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	fc 01       	movw	r30, r24
     3aa:	e5 59       	subi	r30, 0x95	; 149
     3ac:	fd 4f       	sbci	r31, 0xFD	; 253
     3ae:	80 81       	ld	r24, Z
     3b0:	91 81       	ldd	r25, Z+1	; 0x01
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <oled_menu_display+0x2c>
     3b4:	81 e2       	ldi	r24, 0x21	; 33
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	fc 01       	movw	r30, r24
     3ba:	01 90       	ld	r0, Z+
     3bc:	00 20       	and	r0, r0
     3be:	e9 f7       	brne	.-6      	; 0x3ba <oled_menu_display+0x2e>
     3c0:	31 97       	sbiw	r30, 0x01	; 1
     3c2:	bf 01       	movw	r22, r30
     3c4:	68 1b       	sub	r22, r24
     3c6:	79 0b       	sbc	r23, r25
     3c8:	4c 2f       	mov	r20, r28
     3ca:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_write_string_on_line>
     3ce:	cf 5f       	subi	r28, 0xFF	; 255
     3d0:	c8 30       	cpi	r28, 0x08	; 8
     3d2:	f8 f2       	brcs	.-66     	; 0x392 <oled_menu_display+0x6>
     3d4:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
     3d8:	0e 94 af 01 	call	0x35e	; 0x35e <draw_selected_arrow>
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <oled_menu_scroll_up>:
     3e0:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <top_item>
     3e4:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <top_item+0x1>
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <top_item+0x1>
     3ee:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <top_item>
     3f2:	99 23       	and	r25, r25
     3f4:	24 f4       	brge	.+8      	; 0x3fe <oled_menu_scroll_up+0x1e>
     3f6:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <top_item+0x1>
     3fa:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <top_item>
     3fe:	08 95       	ret

00000400 <oled_menu_scroll_down>:
     400:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <top_item>
     404:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <top_item+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <top_item+0x1>
     40e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <top_item>
     412:	09 97       	sbiw	r24, 0x09	; 9
     414:	34 f0       	brlt	.+12     	; 0x422 <oled_menu_scroll_down+0x22>
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <top_item+0x1>
     41e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <top_item>
     422:	08 95       	ret

00000424 <oled_menu_sel_down>:
     424:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
     428:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__data_end+0x1>
     42c:	01 96       	adiw	r24, 0x01	; 1
     42e:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x1>
     432:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     436:	08 97       	sbiw	r24, 0x08	; 8
     438:	44 f0       	brlt	.+16     	; 0x44a <oled_menu_sel_down+0x26>
     43a:	0e 94 00 02 	call	0x400	; 0x400 <oled_menu_scroll_down>
     43e:	87 e0       	ldi	r24, 0x07	; 7
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x1>
     446:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     44a:	0e 94 c6 01 	call	0x38c	; 0x38c <oled_menu_display>
     44e:	08 95       	ret

00000450 <oled_menu_sel_up>:
     450:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end>
     454:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__data_end+0x1>
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x1>
     45e:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
     462:	99 23       	and	r25, r25
     464:	34 f4       	brge	.+12     	; 0x472 <oled_menu_sel_up+0x22>
     466:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <oled_menu_scroll_up>
     46a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <__data_end+0x1>
     46e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <__data_end>
     472:	0e 94 c6 01 	call	0x38c	; 0x38c <oled_menu_display>
     476:	08 95       	ret

00000478 <SPI_MasterTransmit>:
     478:	8f b9       	out	0x0f, r24	; 15
     47a:	77 9b       	sbis	0x0e, 7	; 14
     47c:	fe cf       	rjmp	.-4      	; 0x47a <SPI_MasterTransmit+0x2>
     47e:	08 95       	ret

00000480 <SPI_MasterTrancieve>:
     480:	8f b9       	out	0x0f, r24	; 15
     482:	77 9b       	sbis	0x0e, 7	; 14
     484:	fe cf       	rjmp	.-4      	; 0x482 <SPI_MasterTrancieve+0x2>
     486:	8f b1       	in	r24, 0x0f	; 15
     488:	08 95       	ret

0000048a <SPI_set_slave_select>:
     48a:	86 b3       	in	r24, 0x16	; 22
     48c:	8f 7e       	andi	r24, 0xEF	; 239
     48e:	88 bb       	out	0x18, r24	; 24
     490:	08 95       	ret

00000492 <SPI_clear_slave_select>:
     492:	86 b3       	in	r24, 0x16	; 22
     494:	80 61       	ori	r24, 0x10	; 16
     496:	88 bb       	out	0x18, r24	; 24
     498:	08 95       	ret

0000049a <SPI_MasterInit>:
     49a:	87 b3       	in	r24, 0x17	; 23
     49c:	80 62       	ori	r24, 0x20	; 32
     49e:	87 bb       	out	0x17, r24	; 23
     4a0:	87 b3       	in	r24, 0x17	; 23
     4a2:	80 68       	ori	r24, 0x80	; 128
     4a4:	87 bb       	out	0x17, r24	; 23
     4a6:	87 b3       	in	r24, 0x17	; 23
     4a8:	80 61       	ori	r24, 0x10	; 16
     4aa:	87 bb       	out	0x17, r24	; 23
     4ac:	87 b3       	in	r24, 0x17	; 23
     4ae:	8f 7b       	andi	r24, 0xBF	; 191
     4b0:	87 bb       	out	0x17, r24	; 23
     4b2:	0e 94 49 02 	call	0x492	; 0x492 <SPI_clear_slave_select>
     4b6:	83 e5       	ldi	r24, 0x53	; 83
     4b8:	8d b9       	out	0x0d, r24	; 13
     4ba:	0e 94 49 02 	call	0x492	; 0x492 <SPI_clear_slave_select>
     4be:	08 95       	ret

000004c0 <mcp2515_read>:
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	0e 94 45 02 	call	0x48a	; 0x48a <SPI_set_slave_select>
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     4ce:	8c 2f       	mov	r24, r28
     4d0:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     4d4:	8f e0       	ldi	r24, 0x0F	; 15
     4d6:	0e 94 40 02 	call	0x480	; 0x480 <SPI_MasterTrancieve>
     4da:	c8 2f       	mov	r28, r24
     4dc:	0e 94 49 02 	call	0x492	; 0x492 <SPI_clear_slave_select>
     4e0:	8c 2f       	mov	r24, r28
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <mcp2515_write>:
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	d8 2f       	mov	r29, r24
     4ec:	c6 2f       	mov	r28, r22
     4ee:	0e 94 45 02 	call	0x48a	; 0x48a <SPI_set_slave_select>
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     4f8:	8d 2f       	mov	r24, r29
     4fa:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     4fe:	8c 2f       	mov	r24, r28
     500:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     504:	0e 94 49 02 	call	0x492	; 0x492 <SPI_clear_slave_select>
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <mcp2515_send_req>:
     50e:	cf 93       	push	r28
     510:	c8 2f       	mov	r28, r24
     512:	0e 94 45 02 	call	0x48a	; 0x48a <SPI_set_slave_select>
     516:	c8 30       	cpi	r28, 0x08	; 8
     518:	30 f4       	brcc	.+12     	; 0x526 <mcp2515_send_req+0x18>
     51a:	80 e8       	ldi	r24, 0x80	; 128
     51c:	8c 0f       	add	r24, r28
     51e:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     522:	0e 94 49 02 	call	0x492	; 0x492 <SPI_clear_slave_select>
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <mcp2515_bit_mod>:
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	18 2f       	mov	r17, r24
     532:	d6 2f       	mov	r29, r22
     534:	c4 2f       	mov	r28, r20
     536:	0e 94 45 02 	call	0x48a	; 0x48a <SPI_set_slave_select>
     53a:	85 e0       	ldi	r24, 0x05	; 5
     53c:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     540:	81 2f       	mov	r24, r17
     542:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     546:	8d 2f       	mov	r24, r29
     548:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     54c:	8c 2f       	mov	r24, r28
     54e:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     552:	0e 94 49 02 	call	0x492	; 0x492 <SPI_clear_slave_select>
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	08 95       	ret

0000055e <mcp2515_reset>:
     55e:	0e 94 45 02 	call	0x48a	; 0x48a <SPI_set_slave_select>
     562:	80 ec       	ldi	r24, 0xC0	; 192
     564:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_MasterTransmit>
     568:	0e 94 49 02 	call	0x492	; 0x492 <SPI_clear_slave_select>
     56c:	08 95       	ret

0000056e <can_interrupt_enable>:
     56e:	8a b7       	in	r24, 0x3a	; 58
     570:	80 64       	ori	r24, 0x40	; 64
     572:	8a bf       	out	0x3a, r24	; 58
     574:	8b b7       	in	r24, 0x3b	; 59
     576:	80 64       	ori	r24, 0x40	; 64
     578:	8b bf       	out	0x3b, r24	; 59
     57a:	85 b7       	in	r24, 0x35	; 53
     57c:	82 60       	ori	r24, 0x02	; 2
     57e:	85 bf       	out	0x35, r24	; 53
     580:	85 b7       	in	r24, 0x35	; 53
     582:	8e 7f       	andi	r24, 0xFE	; 254
     584:	85 bf       	out	0x35, r24	; 53
     586:	78 94       	sei
     588:	08 95       	ret

0000058a <can_set_config_mode>:
     58a:	48 2f       	mov	r20, r24
     58c:	60 ee       	ldi	r22, 0xE0	; 224
     58e:	8f e0       	ldi	r24, 0x0F	; 15
     590:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     594:	08 95       	ret

00000596 <init_can>:
     596:	0e 94 b7 02 	call	0x56e	; 0x56e <can_interrupt_enable>
     59a:	43 e0       	ldi	r20, 0x03	; 3
     59c:	6f ef       	ldi	r22, 0xFF	; 255
     59e:	8a e2       	ldi	r24, 0x2A	; 42
     5a0:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     5a4:	41 eb       	ldi	r20, 0xB1	; 177
     5a6:	6f ef       	ldi	r22, 0xFF	; 255
     5a8:	89 e2       	ldi	r24, 0x29	; 41
     5aa:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     5ae:	45 e0       	ldi	r20, 0x05	; 5
     5b0:	6f ef       	ldi	r22, 0xFF	; 255
     5b2:	88 e2       	ldi	r24, 0x28	; 40
     5b4:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 c5 02 	call	0x58a	; 0x58a <can_set_config_mode>
     5be:	43 e0       	ldi	r20, 0x03	; 3
     5c0:	63 e0       	ldi	r22, 0x03	; 3
     5c2:	8b e2       	ldi	r24, 0x2B	; 43
     5c4:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     5c8:	40 e2       	ldi	r20, 0x20	; 32
     5ca:	60 e2       	ldi	r22, 0x20	; 32
     5cc:	8b e2       	ldi	r24, 0x2B	; 43
     5ce:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     5d2:	40 e6       	ldi	r20, 0x60	; 96
     5d4:	60 e6       	ldi	r22, 0x60	; 96
     5d6:	80 e6       	ldi	r24, 0x60	; 96
     5d8:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     5dc:	48 e0       	ldi	r20, 0x08	; 8
     5de:	68 e0       	ldi	r22, 0x08	; 8
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     5e6:	08 95       	ret

000005e8 <can_transmit_tx_buf0>:
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	c6 2f       	mov	r28, r22
     5f4:	f7 2e       	mov	r15, r23
     5f6:	08 2f       	mov	r16, r24
     5f8:	19 2f       	mov	r17, r25
     5fa:	66 95       	lsr	r22
     5fc:	66 95       	lsr	r22
     5fe:	66 95       	lsr	r22
     600:	81 e3       	ldi	r24, 0x31	; 49
     602:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mcp2515_write>
     606:	6c 2f       	mov	r22, r28
     608:	62 95       	swap	r22
     60a:	66 0f       	add	r22, r22
     60c:	60 7e       	andi	r22, 0xE0	; 224
     60e:	68 5f       	subi	r22, 0xF8	; 248
     610:	82 e3       	ldi	r24, 0x32	; 50
     612:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mcp2515_write>
     616:	6f ef       	ldi	r22, 0xFF	; 255
     618:	84 e3       	ldi	r24, 0x34	; 52
     61a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mcp2515_write>
     61e:	6f ef       	ldi	r22, 0xFF	; 255
     620:	83 e3       	ldi	r24, 0x33	; 51
     622:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mcp2515_write>
     626:	df 2d       	mov	r29, r15
     628:	6f 2d       	mov	r22, r15
     62a:	85 e3       	ldi	r24, 0x35	; 53
     62c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mcp2515_write>
     630:	c0 e0       	ldi	r28, 0x00	; 0
     632:	0b c0       	rjmp	.+22     	; 0x64a <can_transmit_tx_buf0+0x62>
     634:	80 2f       	mov	r24, r16
     636:	91 2f       	mov	r25, r17
     638:	fc 01       	movw	r30, r24
     63a:	ec 0f       	add	r30, r28
     63c:	f1 1d       	adc	r31, r1
     63e:	60 81       	ld	r22, Z
     640:	86 e3       	ldi	r24, 0x36	; 54
     642:	8c 0f       	add	r24, r28
     644:	0e 94 73 02 	call	0x4e6	; 0x4e6 <mcp2515_write>
     648:	cf 5f       	subi	r28, 0xFF	; 255
     64a:	cd 17       	cp	r28, r29
     64c:	10 f4       	brcc	.+4      	; 0x652 <can_transmit_tx_buf0+0x6a>
     64e:	c8 30       	cpi	r28, 0x08	; 8
     650:	88 f3       	brcs	.-30     	; 0x634 <can_transmit_tx_buf0+0x4c>
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	0e 94 87 02 	call	0x50e	; 0x50e <mcp2515_send_req>
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	08 95       	ret

00000664 <can_read_rx_buf0>:
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	81 e6       	ldi	r24, 0x61	; 97
     674:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp2515_read>
     678:	d8 2e       	mov	r13, r24
     67a:	dd 0c       	add	r13, r13
     67c:	dd 0c       	add	r13, r13
     67e:	dd 0c       	add	r13, r13
     680:	82 e6       	ldi	r24, 0x62	; 98
     682:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp2515_read>
     686:	82 95       	swap	r24
     688:	86 95       	lsr	r24
     68a:	87 70       	andi	r24, 0x07	; 7
     68c:	d8 0e       	add	r13, r24
     68e:	85 e6       	ldi	r24, 0x65	; 101
     690:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp2515_read>
     694:	d8 2f       	mov	r29, r24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 a8 06 	call	0xd50	; 0xd50 <malloc>
     69c:	7c 01       	movw	r14, r24
     69e:	c0 e0       	ldi	r28, 0x00	; 0
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <can_read_rx_buf0+0x52>
     6a2:	87 01       	movw	r16, r14
     6a4:	0c 0f       	add	r16, r28
     6a6:	11 1d       	adc	r17, r1
     6a8:	86 e6       	ldi	r24, 0x66	; 102
     6aa:	8c 0f       	add	r24, r28
     6ac:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp2515_read>
     6b0:	f8 01       	movw	r30, r16
     6b2:	80 83       	st	Z, r24
     6b4:	cf 5f       	subi	r28, 0xFF	; 255
     6b6:	cd 17       	cp	r28, r29
     6b8:	10 f4       	brcc	.+4      	; 0x6be <can_read_rx_buf0+0x5a>
     6ba:	c8 30       	cpi	r28, 0x08	; 8
     6bc:	90 f3       	brcs	.-28     	; 0x6a2 <can_read_rx_buf0+0x3e>
     6be:	6d 2d       	mov	r22, r13
     6c0:	7d 2f       	mov	r23, r29
     6c2:	8e 2d       	mov	r24, r14
     6c4:	9f 2d       	mov	r25, r15
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	08 95       	ret

000006d6 <display_can_frame>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	d6 2f       	mov	r29, r22
     6e0:	c7 2f       	mov	r28, r23
     6e2:	08 2f       	mov	r16, r24
     6e4:	19 2f       	mov	r17, r25
     6e6:	86 e2       	ldi	r24, 0x26	; 38
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
     6f2:	1f 92       	push	r1
     6f4:	df 93       	push	r29
     6f6:	81 e3       	ldi	r24, 0x31	; 49
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	9f 93       	push	r25
     6fc:	8f 93       	push	r24
     6fe:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
     702:	dc 2f       	mov	r29, r28
     704:	1f 92       	push	r1
     706:	cf 93       	push	r28
     708:	8d e3       	ldi	r24, 0x3D	; 61
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	9f 93       	push	r25
     70e:	8f 93       	push	r24
     710:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
     714:	8d b7       	in	r24, 0x3d	; 61
     716:	9e b7       	in	r25, 0x3e	; 62
     718:	0a 96       	adiw	r24, 0x0a	; 10
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	9e bf       	out	0x3e, r25	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	8d bf       	out	0x3d, r24	; 61
     724:	c0 e0       	ldi	r28, 0x00	; 0
     726:	13 c0       	rjmp	.+38     	; 0x74e <display_can_frame+0x78>
     728:	80 2f       	mov	r24, r16
     72a:	91 2f       	mov	r25, r17
     72c:	fc 01       	movw	r30, r24
     72e:	ec 0f       	add	r30, r28
     730:	f1 1d       	adc	r31, r1
     732:	80 81       	ld	r24, Z
     734:	1f 92       	push	r1
     736:	8f 93       	push	r24
     738:	88 e3       	ldi	r24, 0x38	; 56
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
     744:	cf 5f       	subi	r28, 0xFF	; 255
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	cd 17       	cp	r28, r29
     750:	58 f3       	brcs	.-42     	; 0x728 <display_can_frame+0x52>
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	08 95       	ret

0000075c <__vector_1>:
     75c:	1f 92       	push	r1
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	cf 93       	push	r28
     77c:	ef 93       	push	r30
     77e:	ff 93       	push	r31
     780:	8e e0       	ldi	r24, 0x0E	; 14
     782:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp2515_read>
     786:	8e 70       	andi	r24, 0x0E	; 14
     788:	c8 2f       	mov	r28, r24
     78a:	c6 95       	lsr	r28
     78c:	1f 92       	push	r1
     78e:	cf 93       	push	r28
     790:	84 e5       	ldi	r24, 0x54	; 84
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	c1 30       	cpi	r28, 0x01	; 1
     7a6:	a9 f4       	brne	.+42     	; 0x7d2 <__vector_1+0x76>
     7a8:	8d e2       	ldi	r24, 0x2D	; 45
     7aa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <mcp2515_read>
     7ae:	1f 92       	push	r1
     7b0:	8f 93       	push	r24
     7b2:	8a e6       	ldi	r24, 0x6A	; 106
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	61 e2       	ldi	r22, 0x21	; 33
     7c2:	8c e2       	ldi	r24, 0x2C	; 44
     7c4:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	17 c0       	rjmp	.+46     	; 0x800 <__vector_1+0xa4>
     7d2:	c6 30       	cpi	r28, 0x06	; 6
     7d4:	51 f4       	brne	.+20     	; 0x7ea <__vector_1+0x8e>
     7d6:	0e 94 32 03 	call	0x664	; 0x664 <can_read_rx_buf0>
     7da:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <display_can_frame>
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	8c e2       	ldi	r24, 0x2C	; 44
     7e4:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     7e8:	0b c0       	rjmp	.+22     	; 0x800 <__vector_1+0xa4>
     7ea:	c7 30       	cpi	r28, 0x07	; 7
     7ec:	49 f4       	brne	.+18     	; 0x800 <__vector_1+0xa4>
     7ee:	0e 94 32 03 	call	0x664	; 0x664 <can_read_rx_buf0>
     7f2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <display_can_frame>
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	62 e0       	ldi	r22, 0x02	; 2
     7fa:	8c e2       	ldi	r24, 0x2C	; 44
     7fc:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	64 e0       	ldi	r22, 0x04	; 4
     804:	8c e2       	ldi	r24, 0x2C	; 44
     806:	0e 94 95 02 	call	0x52a	; 0x52a <mcp2515_bit_mod>
     80a:	8a b7       	in	r24, 0x3a	; 58
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	8a bf       	out	0x3a, r24	; 58
     810:	ff 91       	pop	r31
     812:	ef 91       	pop	r30
     814:	cf 91       	pop	r28
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <can_transmit>:
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	08 2f       	mov	r16, r24
     83e:	16 2f       	mov	r17, r22
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 a8 06 	call	0xd50	; 0xd50 <malloc>
     848:	ec 01       	movw	r28, r24
     84a:	08 83       	st	Y, r16
     84c:	19 83       	std	Y+1, r17	; 0x01
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	72 e0       	ldi	r23, 0x02	; 2
     852:	9d 2f       	mov	r25, r29
     854:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <can_transmit_tx_buf0>
     858:	ce 01       	movw	r24, r28
     85a:	0e 94 40 07 	call	0xe80	; 0xe80 <free>
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <__vector_3>:
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	0f 92       	push	r0
     870:	11 24       	eor	r1, r1
     872:	2f 93       	push	r18
     874:	3f 93       	push	r19
     876:	4f 93       	push	r20
     878:	5f 93       	push	r21
     87a:	6f 93       	push	r22
     87c:	7f 93       	push	r23
     87e:	8f 93       	push	r24
     880:	9f 93       	push	r25
     882:	af 93       	push	r26
     884:	bf 93       	push	r27
     886:	ef 93       	push	r30
     888:	ff 93       	push	r31
     88a:	85 e8       	ldi	r24, 0x85	; 133
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	9f 93       	push	r25
     890:	8f 93       	push	r24
     892:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	bf 91       	pop	r27
     8a0:	af 91       	pop	r26
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	7f 91       	pop	r23
     8a8:	6f 91       	pop	r22
     8aa:	5f 91       	pop	r21
     8ac:	4f 91       	pop	r20
     8ae:	3f 91       	pop	r19
     8b0:	2f 91       	pop	r18
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <init_pin_directions>:
#include "joystick_button.h"

void init_pin_directions()
{
	// set PORTB PIN0 direction as output
	set_bit(DDRB, DDB0);
     8bc:	87 b3       	in	r24, 0x17	; 23
     8be:	81 60       	ori	r24, 0x01	; 1
     8c0:	87 bb       	out	0x17, r24	; 23
	// mcp transistor
	set_bit(DDRB, DDB1);
     8c2:	87 b3       	in	r24, 0x17	; 23
     8c4:	82 60       	ori	r24, 0x02	; 2
     8c6:	87 bb       	out	0x17, r24	; 23
	char reg = PINB;
     8c8:	86 b3       	in	r24, 0x16	; 22
	set_bit(reg, DDB1);
     8ca:	82 60       	ori	r24, 0x02	; 2
	PORTB = reg;
     8cc:	88 bb       	out	0x18, r24	; 24
     8ce:	08 95       	ret

000008d0 <init_ext_mem>:
}

void init_ext_mem()
{
	// enable XMEM
	set_bit(MCUCR, SRE);
     8d0:	85 b7       	in	r24, 0x35	; 53
     8d2:	80 68       	ori	r24, 0x80	; 128
     8d4:	85 bf       	out	0x35, r24	; 53
	// release 4 msb to jtag
	set_bit(SFIOR, XMM2);
     8d6:	80 b7       	in	r24, 0x30	; 48
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     8dc:	80 b7       	in	r24, 0x30	; 48
     8de:	8f 7e       	andi	r24, 0xEF	; 239
     8e0:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     8e2:	80 b7       	in	r24, 0x30	; 48
     8e4:	87 7f       	andi	r24, 0xF7	; 247
     8e6:	80 bf       	out	0x30, r24	; 48
     8e8:	08 95       	ret

000008ea <display_adc_info>:

/* test functions */

void display_adc_info()
{
	printf("Joystick: %s        \n\r", joystick_direction_to_string(get_joystick_direction()));
     8ea:	0e 94 69 01 	call	0x2d2	; 0x2d2 <get_joystick_direction>
     8ee:	0e 94 88 01 	call	0x310	; 0x310 <joystick_direction_to_string>
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	8b e8       	ldi	r24, 0x8B	; 139
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	9f 93       	push	r25
     8fc:	8f 93       	push	r24
     8fe:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
	printf("Slider right: %d    \n\r", get_slider_right_analog());
     902:	0e 94 a8 01 	call	0x350	; 0x350 <get_slider_right_analog>
     906:	1f 92       	push	r1
     908:	8f 93       	push	r24
     90a:	82 ea       	ldi	r24, 0xA2	; 162
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	9f 93       	push	r25
     910:	8f 93       	push	r24
     912:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
	printf("Slider left: %d     \n\r", get_slider_left_analog());
     916:	0e 94 ab 01 	call	0x356	; 0x356 <get_slider_left_analog>
     91a:	1f 92       	push	r1
     91c:	8f 93       	push	r24
     91e:	89 eb       	ldi	r24, 0xB9	; 185
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	0e 94 14 08 	call	0x1028	; 0x1028 <printf>
}
     92a:	8d b7       	in	r24, 0x3d	; 61
     92c:	9e b7       	in	r25, 0x3e	; 62
     92e:	0c 96       	adiw	r24, 0x0c	; 12
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	9e bf       	out	0x3e, r25	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	8d bf       	out	0x3d, r24	; 61
     93a:	08 95       	ret

0000093c <main>:

void test_static_address();

int main(void)
{
    init_pin_directions();
     93c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <init_pin_directions>
	init_ext_mem();
     940:	0e 94 68 04 	call	0x8d0	; 0x8d0 <init_ext_mem>
	init_pwm();
     944:	0e 94 3b 01 	call	0x276	; 0x276 <init_pwm>
	USART_Init(MYUBRR);
     948:	8f e1       	ldi	r24, 0x1F	; 31
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 96 06 	call	0xd2c	; 0xd2c <USART_Init>
	init_adc();
     950:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_adc>
	init_oled();
     954:	0e 94 08 05 	call	0xa10	; 0xa10 <init_oled>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     958:	23 e0       	ldi	r18, 0x03	; 3
     95a:	2a 95       	dec	r18
     95c:	f1 f7       	brne	.-4      	; 0x95a <main+0x1e>
     95e:	00 00       	nop
	//init_can();
	//init_interrupt();
	
	
	_delay_us(2); // the MCP takes a maximum of 2 us to be ready for a reset
	SPI_MasterInit();
     960:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_MasterInit>
	mcp2515_reset();
     964:	0e 94 af 02 	call	0x55e	; 0x55e <mcp2515_reset>
	
	// todo: change transmit and receive to int return, error handling?
	fdevopen(USART_Transmit, USART_Receive);
     968:	63 ea       	ldi	r22, 0xA3	; 163
     96a:	76 e0       	ldi	r23, 0x06	; 6
     96c:	8d e9       	ldi	r24, 0x9D	; 157
     96e:	96 e0       	ldi	r25, 0x06	; 6
     970:	0e 94 c9 07 	call	0xf92	; 0xf92 <fdevopen>
	
	// test functions
	//test_static_address();
	//SRAM_test();
	
	oled_fill_entire(0x0F);
     974:	8f e0       	ldi	r24, 0x0F	; 15
     976:	0e 94 5a 05 	call	0xab4	; 0xab4 <oled_fill_entire>
	// oled_goto_page(0);
	//printf("\n\r arrow = ");
	//oled_draw_arrow();
	
	//_delay_ms(10000);
	toggle_pin('B', 1);
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	82 e4       	ldi	r24, 0x42	; 66
     97e:	0e 94 0a 06 	call	0xc14	; 0xc14 <toggle_pin>
	//_delay_ms(2000);
	//toggle_pin('B', 1);
	
	oled_write_string_on_line("string test", strlen("string test"), 0);
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	6b e0       	ldi	r22, 0x0B	; 11
     986:	80 ed       	ldi	r24, 0xD0	; 208
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_write_string_on_line>
	
	//mcp2515_reset();
	//_delay_ms(1000);
	
	
	init_can();
     98e:	0e 94 cb 02 	call	0x596	; 0x596 <init_can>
		free(msg.data);
		*/
		//printf("\n%2x", mcp2515_read(0x0e));			// mpc read CANSTAT, should be 0x80, configuration mode
		//oled_write_char((unsigned char)'a', 8);
		//oled_fill_entire();
		display_adc_info(); // using printf
     992:	0e 94 75 04 	call	0x8ea	; 0x8ea <display_adc_info>
		
		/* OLED MENU */
		oled_menu_display();
     996:	0e 94 c6 01 	call	0x38c	; 0x38c <oled_menu_display>
		
		/* JOYSTICK TX */
		switch (get_joystick_direction())
     99a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <get_joystick_direction>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	91 05       	cpc	r25, r1
     9a2:	b9 f0       	breq	.+46     	; 0x9d2 <main+0x96>
     9a4:	1c f4       	brge	.+6      	; 0x9ac <main+0x70>
     9a6:	89 2b       	or	r24, r25
     9a8:	c9 f0       	breq	.+50     	; 0x9dc <main+0xa0>
     9aa:	1c c0       	rjmp	.+56     	; 0x9e4 <main+0xa8>
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	91 05       	cpc	r25, r1
     9b0:	49 f0       	breq	.+18     	; 0x9c4 <main+0x88>
     9b2:	03 97       	sbiw	r24, 0x03	; 3
     9b4:	b9 f4       	brne	.+46     	; 0x9e4 <main+0xa8>
		{
			case DOWN:
				oled_menu_sel_down();
     9b6:	0e 94 12 02 	call	0x424	; 0x424 <oled_menu_sel_down>
				can_transmit(0x1f, 1);
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	8f e1       	ldi	r24, 0x1F	; 31
     9be:	0e 94 1a 04 	call	0x834	; 0x834 <can_transmit>
				break;
     9c2:	10 c0       	rjmp	.+32     	; 0x9e4 <main+0xa8>
			case UP:
				oled_menu_sel_up();
     9c4:	0e 94 28 02 	call	0x450	; 0x450 <oled_menu_sel_up>
				can_transmit(0x1f, 2);
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	8f e1       	ldi	r24, 0x1F	; 31
     9cc:	0e 94 1a 04 	call	0x834	; 0x834 <can_transmit>
				break;
     9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <main+0xa8>
			case RIGHT:
				can_transmit(0x1f, 3);
     9d2:	63 e0       	ldi	r22, 0x03	; 3
     9d4:	8f e1       	ldi	r24, 0x1F	; 31
     9d6:	0e 94 1a 04 	call	0x834	; 0x834 <can_transmit>
				break;
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <main+0xa8>
			case LEFT:
				can_transmit(0x1f, 4);
     9dc:	64 e0       	ldi	r22, 0x04	; 4
     9de:	8f e1       	ldi	r24, 0x1F	; 31
     9e0:	0e 94 1a 04 	call	0x834	; 0x834 <can_transmit>
			default:
				break;
		}
		
		/* RIGHT SLIDER TX */
		can_transmit(0x2f, get_slider_right_analog());
     9e4:	0e 94 a8 01 	call	0x350	; 0x350 <get_slider_right_analog>
     9e8:	68 2f       	mov	r22, r24
     9ea:	8f e2       	ldi	r24, 0x2F	; 47
     9ec:	0e 94 1a 04 	call	0x834	; 0x834 <can_transmit>
		
		/* OLED RENDER */
		oled_render();
     9f0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <oled_render>
		// read rx buffer
		//struct can_msg_t msg = can_read_rx_buf0();
		//display_can_frame(msg);
		
		/* LOOP PERIOD AND LED */
		toggle_pin('B', 0);
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	82 e4       	ldi	r24, 0x42	; 66
     9f8:	0e 94 0a 06 	call	0xc14	; 0xc14 <toggle_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	9f e7       	ldi	r25, 0x7F	; 127
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	81 50       	subi	r24, 0x01	; 1
     a04:	90 40       	sbci	r25, 0x00	; 0
     a06:	20 40       	sbci	r18, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <main+0xc6>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <main+0xd0>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <main+0xd2>
     a0e:	c1 cf       	rjmp	.-126    	; 0x992 <main+0x56>

00000a10 <init_oled>:

static unsigned char init_data[22] = {0xae, 0xa1, 0xda, 0x12, 0xc8, 0xa8, 0x3f, 0xd5, 0x80, 0x81, 0x50, 0xd9, 0x21, 0x20, 0x02, 0xdb, 0x30, 0xad, 0x00, 0xa4, 0xa6, 0xaf};

void init_oled()
{
	for(int i = 0; i < 22; i++) {
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	07 c0       	rjmp	.+14     	; 0xa24 <init_oled+0x14>
		oled_c_base[0] = init_data[i];
     a16:	fc 01       	movw	r30, r24
     a18:	eb 57       	subi	r30, 0x7B	; 123
     a1a:	fd 4f       	sbci	r31, 0xFD	; 253
     a1c:	20 81       	ld	r18, Z
     a1e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__bss_end+0xd54>

static unsigned char init_data[22] = {0xae, 0xa1, 0xda, 0x12, 0xc8, 0xa8, 0x3f, 0xd5, 0x80, 0x81, 0x50, 0xd9, 0x21, 0x20, 0x02, 0xdb, 0x30, 0xad, 0x00, 0xa4, 0xa6, 0xaf};

void init_oled()
{
	for(int i = 0; i < 22; i++) {
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	86 31       	cpi	r24, 0x16	; 22
     a26:	91 05       	cpc	r25, r1
     a28:	b4 f3       	brlt	.-20     	; 0xa16 <init_oled+0x6>
		oled_c_base[0] = init_data[i];
		//printf("\n\r%x", init_data[i]);
	}
	*oled_c_base = 0x20;
     a2a:	e0 e0       	ldi	r30, 0x00	; 0
     a2c:	f0 e1       	ldi	r31, 0x10	; 16
     a2e:	80 e2       	ldi	r24, 0x20	; 32
     a30:	80 83       	st	Z, r24
	*oled_c_base = 0x02;
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	80 83       	st	Z, r24
     a36:	08 95       	ret

00000a38 <oled_goto_page_direct>:
}

void oled_goto_page_direct(uint8_t p)
{
	if (p > 7) {
     a38:	88 30       	cpi	r24, 0x08	; 8
     a3a:	18 f4       	brcc	.+6      	; 0xa42 <oled_goto_page_direct+0xa>
		return;
	}
	*oled_c_base = 0xb0 + p;
     a3c:	80 55       	subi	r24, 0x50	; 80
     a3e:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xd54>
     a42:	08 95       	ret

00000a44 <oled_goto_col_direct>:
}

void oled_goto_col_direct(uint8_t col)
{
	*oled_c_base = 0x21;
     a44:	e0 e0       	ldi	r30, 0x00	; 0
     a46:	f0 e1       	ldi	r31, 0x10	; 16
     a48:	91 e2       	ldi	r25, 0x21	; 33
     a4a:	90 83       	st	Z, r25
	*oled_c_base = 0x00 + col;
     a4c:	80 83       	st	Z, r24
	*oled_c_base = 0xFF;
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	80 83       	st	Z, r24
     a52:	08 95       	ret

00000a54 <oled_goto_page>:
}

void oled_goto_page(uint8_t p)
{
	if (p > 7) {
     a54:	88 30       	cpi	r24, 0x08	; 8
     a56:	40 f4       	brcc	.+16     	; 0xa68 <oled_goto_page+0x14>
		return;
	}
	current_adr = 128 * p;
     a58:	20 e8       	ldi	r18, 0x80	; 128
     a5a:	82 9f       	mul	r24, r18
     a5c:	c0 01       	movw	r24, r0
     a5e:	11 24       	eor	r1, r1
     a60:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <current_adr+0x1>
     a64:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <current_adr>
     a68:	08 95       	ret

00000a6a <oled_goto_col>:
}

void oled_goto_col(uint8_t col)
{
	uint8_t page = current_adr / 128;
     a6a:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <current_adr>
     a6e:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <current_adr+0x1>
     a72:	22 0f       	add	r18, r18
     a74:	23 2f       	mov	r18, r19
     a76:	22 1f       	adc	r18, r18
     a78:	33 0b       	sbc	r19, r19
     a7a:	31 95       	neg	r19
	current_adr = page * 128 + col;
     a7c:	33 27       	eor	r19, r19
     a7e:	36 95       	lsr	r19
     a80:	32 2f       	mov	r19, r18
     a82:	22 27       	eor	r18, r18
     a84:	37 95       	ror	r19
     a86:	27 95       	ror	r18
     a88:	28 0f       	add	r18, r24
     a8a:	31 1d       	adc	r19, r1
     a8c:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <current_adr+0x1>
     a90:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <current_adr>
     a94:	08 95       	ret

00000a96 <oled_write>:
}


void oled_write(unsigned char c){
	oled_sram_base[current_adr] = c;
     a96:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <current_adr>
     a9a:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <current_adr+0x1>
     a9e:	f9 01       	movw	r30, r18
     aa0:	f4 5e       	subi	r31, 0xE4	; 228
     aa2:	80 83       	st	Z, r24
	current_adr++;
     aa4:	2f 5f       	subi	r18, 0xFF	; 255
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
	current_adr %= 1024;
     aa8:	33 70       	andi	r19, 0x03	; 3
     aaa:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <current_adr+0x1>
     aae:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <current_adr>
     ab2:	08 95       	ret

00000ab4 <oled_fill_entire>:
}

void oled_fill_entire(unsigned char c)
{	
	for(int i = 0; i < 1024; i++) {
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <oled_fill_entire+0x10>
		//if (i % 128 == 0) *oled_c_base = 0xb0 + i / 128;
		oled_sram_base[i] = c;
     aba:	f9 01       	movw	r30, r18
     abc:	f4 5e       	subi	r31, 0xE4	; 228
     abe:	80 83       	st	Z, r24
	current_adr %= 1024;
}

void oled_fill_entire(unsigned char c)
{	
	for(int i = 0; i < 1024; i++) {
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	21 15       	cp	r18, r1
     ac6:	94 e0       	ldi	r25, 0x04	; 4
     ac8:	39 07       	cpc	r19, r25
     aca:	bc f3       	brlt	.-18     	; 0xaba <oled_fill_entire+0x6>
		//if (i % 128 == 0) *oled_c_base = 0xb0 + i / 128;
		oled_sram_base[i] = c;
	}
	current_adr = 0;
     acc:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <current_adr+0x1>
     ad0:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <current_adr>
     ad4:	08 95       	ret

00000ad6 <oled_write_char>:
}

int oled_write_char(char c, FILE* file)
{
	if (c == '\n'){
     ad6:	8a 30       	cpi	r24, 0x0A	; 10
     ad8:	69 f4       	brne	.+26     	; 0xaf4 <oled_write_char+0x1e>
		//current_page++;
		//current_page %= 8;
		//*oled_c_base = 0xb0 + current_page;
		current_adr += 128;
     ada:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <current_adr>
     ade:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <current_adr+0x1>
     ae2:	80 58       	subi	r24, 0x80	; 128
     ae4:	9f 4f       	sbci	r25, 0xFF	; 255
     ae6:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <current_adr+0x1>
     aea:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <current_adr>
		return 0;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	08 95       	ret
	} else if (c == '\r') {
     af4:	8d 30       	cpi	r24, 0x0D	; 13
     af6:	49 f4       	brne	.+18     	; 0xb0a <oled_write_char+0x34>
		//*oled_c_base = 0x21;
		//*oled_c_base = 0x00;
		//*oled_c_base = 0xFF;
		current_adr = current_adr - (current_adr % 128);
     af8:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <current_adr>
     afc:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <current_adr+0x1>
     b00:	20 78       	andi	r18, 0x80	; 128
     b02:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <current_adr+0x1>
     b06:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <current_adr>
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
     b0a:	90 ee       	ldi	r25, 0xE0	; 224
     b0c:	98 0f       	add	r25, r24
     b0e:	90 36       	cpi	r25, 0x60	; 96
     b10:	28 f5       	brcc	.+74     	; 0xb5c <oled_write_char+0x86>
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	1c c0       	rjmp	.+56     	; 0xb50 <oled_write_char+0x7a>
	switch(size){
		case 4:
			for(int i = 0; i < size; i++){
				oled_sram_base[current_adr] = pgm_read_byte(&(font4[c - 32][i]));
     b18:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <current_adr>
     b1c:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <current_adr+0x1>
     b20:	d9 01       	movw	r26, r18
     b22:	b4 5e       	subi	r27, 0xE4	; 228
     b24:	e8 2f       	mov	r30, r24
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	b0 97       	sbiw	r30, 0x20	; 32
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	e4 0f       	add	r30, r20
     b34:	f5 1f       	adc	r31, r21
     b36:	e0 59       	subi	r30, 0x90	; 144
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	e4 91       	lpm	r30, Z
     b3c:	ec 93       	st	X, r30
				current_adr++;
     b3e:	2f 5f       	subi	r18, 0xFF	; 255
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
				current_adr %= 1024;
     b42:	33 70       	andi	r19, 0x03	; 3
     b44:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <current_adr+0x1>
     b48:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <current_adr>
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
	switch(size){
		case 4:
			for(int i = 0; i < size; i++){
     b4c:	4f 5f       	subi	r20, 0xFF	; 255
     b4e:	5f 4f       	sbci	r21, 0xFF	; 255
     b50:	44 30       	cpi	r20, 0x04	; 4
     b52:	51 05       	cpc	r21, r1
     b54:	0c f3       	brlt	.-62     	; 0xb18 <oled_write_char+0x42>
			}
			break;
		default: 
			return 1;
	}
	return 0;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	08 95       	ret
		//*oled_c_base = 0x00;
		//*oled_c_base = 0xFF;
		current_adr = current_adr - (current_adr % 128);
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default: 
			return 1;
	}
	return 0;
}
     b60:	08 95       	ret

00000b62 <oled_write_string_on_line>:

void oled_write_string_on_line(char* s, uint8_t len, uint8_t line)
{
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
	if (line > 7) return;
     b6c:	48 30       	cpi	r20, 0x08	; 8
     b6e:	20 f5       	brcc	.+72     	; 0xbb8 <oled_write_string_on_line+0x56>
     b70:	16 2f       	mov	r17, r22
     b72:	7c 01       	movw	r14, r24
	current_adr = 128 * line;
     b74:	20 e8       	ldi	r18, 0x80	; 128
     b76:	42 9f       	mul	r20, r18
     b78:	c0 01       	movw	r24, r0
     b7a:	11 24       	eor	r1, r1
     b7c:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <current_adr+0x1>
     b80:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <current_adr>
	for (int i = 0; i < 128 / 4; i++)
     b84:	c0 e0       	ldi	r28, 0x00	; 0
     b86:	d0 e0       	ldi	r29, 0x00	; 0
     b88:	14 c0       	rjmp	.+40     	; 0xbb2 <oled_write_string_on_line+0x50>
	{
		if(i < len) oled_write_char(s[i], NULL);
     b8a:	21 2f       	mov	r18, r17
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	c2 17       	cp	r28, r18
     b90:	d3 07       	cpc	r29, r19
     b92:	4c f4       	brge	.+18     	; 0xba6 <oled_write_string_on_line+0x44>
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	f7 01       	movw	r30, r14
     b9a:	ec 0f       	add	r30, r28
     b9c:	fd 1f       	adc	r31, r29
     b9e:	80 81       	ld	r24, Z
     ba0:	0e 94 6b 05 	call	0xad6	; 0xad6 <oled_write_char>
     ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <oled_write_string_on_line+0x4e>
		else		oled_write_char(' ', NULL);
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e2       	ldi	r24, 0x20	; 32
     bac:	0e 94 6b 05 	call	0xad6	; 0xad6 <oled_write_char>

void oled_write_string_on_line(char* s, uint8_t len, uint8_t line)
{
	if (line > 7) return;
	current_adr = 128 * line;
	for (int i = 0; i < 128 / 4; i++)
     bb0:	21 96       	adiw	r28, 0x01	; 1
     bb2:	c0 32       	cpi	r28, 0x20	; 32
     bb4:	d1 05       	cpc	r29, r1
     bb6:	4c f3       	brlt	.-46     	; 0xb8a <oled_write_string_on_line+0x28>
	{
		if(i < len) oled_write_char(s[i], NULL);
		else		oled_write_char(' ', NULL);
	}
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	08 95       	ret

00000bc4 <oled_render>:

void oled_render()
{
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
	/*
	SRAM 0x1800 - 0x1FFF
	*/
	//oled_fill_entire(0xff);
	// current_adr = 0;
	oled_goto_page_direct(0);
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	0e 94 1c 05 	call	0xa38	; 0xa38 <oled_goto_page_direct>
	oled_goto_col_direct(0);
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	0e 94 22 05 	call	0xa44	; 0xa44 <oled_goto_col_direct>
	for(int i = 0; i < 1024; i++){
     bd4:	c0 e0       	ldi	r28, 0x00	; 0
     bd6:	d0 e0       	ldi	r29, 0x00	; 0
     bd8:	16 c0       	rjmp	.+44     	; 0xc06 <oled_render+0x42>
		*oled_d_base = oled_sram_base[i];
     bda:	fe 01       	movw	r30, r28
     bdc:	f4 5e       	subi	r31, 0xE4	; 228
     bde:	80 81       	ld	r24, Z
     be0:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xf54>
		if (i % 128 == 0) oled_goto_page_direct(i / 128);
     be4:	ce 01       	movw	r24, r28
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	99 27       	eor	r25, r25
     bea:	89 2b       	or	r24, r25
     bec:	59 f4       	brne	.+22     	; 0xc04 <oled_render+0x40>
     bee:	ce 01       	movw	r24, r28
     bf0:	dd 23       	and	r29, r29
     bf2:	14 f4       	brge	.+4      	; 0xbf8 <oled_render+0x34>
     bf4:	81 58       	subi	r24, 0x81	; 129
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	88 0f       	add	r24, r24
     bfa:	89 2f       	mov	r24, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	0e 94 1c 05 	call	0xa38	; 0xa38 <oled_goto_page_direct>
	*/
	//oled_fill_entire(0xff);
	// current_adr = 0;
	oled_goto_page_direct(0);
	oled_goto_col_direct(0);
	for(int i = 0; i < 1024; i++){
     c04:	21 96       	adiw	r28, 0x01	; 1
     c06:	c1 15       	cp	r28, r1
     c08:	84 e0       	ldi	r24, 0x04	; 4
     c0a:	d8 07       	cpc	r29, r24
     c0c:	34 f3       	brlt	.-52     	; 0xbda <oled_render+0x16>
		*oled_d_base = oled_sram_base[i];
		if (i % 128 == 0) oled_goto_page_direct(i / 128);
	}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <toggle_pin>:

#include "pin_util.h"

void toggle_pin(char port, uint8_t pin)
{
	if(pin > 7){
     c14:	68 30       	cpi	r22, 0x08	; 8
     c16:	08 f0       	brcs	.+2      	; 0xc1a <toggle_pin+0x6>
     c18:	88 c0       	rjmp	.+272    	; 0xd2a <toggle_pin+0x116>
		// too high pin number
		return;
	}
	
	switch (port)
     c1a:	82 34       	cpi	r24, 0x42	; 66
     c1c:	51 f1       	breq	.+84     	; 0xc72 <toggle_pin+0x5e>
     c1e:	18 f4       	brcc	.+6      	; 0xc26 <toggle_pin+0x12>
     c20:	81 34       	cpi	r24, 0x41	; 65
     c22:	41 f0       	breq	.+16     	; 0xc34 <toggle_pin+0x20>
     c24:	08 95       	ret
     c26:	83 34       	cpi	r24, 0x43	; 67
     c28:	09 f4       	brne	.+2      	; 0xc2c <toggle_pin+0x18>
     c2a:	42 c0       	rjmp	.+132    	; 0xcb0 <toggle_pin+0x9c>
     c2c:	84 34       	cpi	r24, 0x44	; 68
     c2e:	09 f4       	brne	.+2      	; 0xc32 <toggle_pin+0x1e>
     c30:	5e c0       	rjmp	.+188    	; 0xcee <toggle_pin+0xda>
     c32:	08 95       	ret
	{
		unsigned char reg;
		uint8_t pin_value;
		case 'A':
			reg = PINA;
     c34:	89 b3       	in	r24, 0x19	; 25
			// 0000x000
			// 0000000x & 00000001
			pin_value = (reg>>pin)&1;
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	06 2e       	mov	r0, r22
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <toggle_pin+0x2e>
     c3e:	35 95       	asr	r19
     c40:	27 95       	ror	r18
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <toggle_pin+0x2a>
			// reg = xxxxxxxx
			// set_bit(reg, 2)
			// reg = xxxxx1xx
			if (pin_value){
     c46:	20 ff       	sbrs	r18, 0
     c48:	0a c0       	rjmp	.+20     	; 0xc5e <toggle_pin+0x4a>
				clear_bit(reg, pin);
     c4a:	21 e0       	ldi	r18, 0x01	; 1
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <toggle_pin+0x40>
     c50:	22 0f       	add	r18, r18
     c52:	33 1f       	adc	r19, r19
     c54:	6a 95       	dec	r22
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <toggle_pin+0x3c>
     c58:	20 95       	com	r18
     c5a:	82 23       	and	r24, r18
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <toggle_pin+0x5a>
			} else {
				set_bit(reg, pin);
     c5e:	21 e0       	ldi	r18, 0x01	; 1
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <toggle_pin+0x54>
     c64:	22 0f       	add	r18, r18
     c66:	33 1f       	adc	r19, r19
     c68:	6a 95       	dec	r22
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <toggle_pin+0x50>
     c6c:	82 2b       	or	r24, r18
			}
			PORTA = reg;
     c6e:	8b bb       	out	0x1b, r24	; 27
			break;
     c70:	08 95       	ret
		case 'B':
			reg = PINB;
     c72:	86 b3       	in	r24, 0x16	; 22
			pin_value = (reg>>pin)&1;
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	06 2e       	mov	r0, r22
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <toggle_pin+0x6c>
     c7c:	35 95       	asr	r19
     c7e:	27 95       	ror	r18
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <toggle_pin+0x68>
			if (pin_value){
     c84:	20 ff       	sbrs	r18, 0
     c86:	0a c0       	rjmp	.+20     	; 0xc9c <toggle_pin+0x88>
				clear_bit(reg, pin);
     c88:	21 e0       	ldi	r18, 0x01	; 1
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <toggle_pin+0x7e>
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	6a 95       	dec	r22
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <toggle_pin+0x7a>
     c96:	20 95       	com	r18
     c98:	82 23       	and	r24, r18
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <toggle_pin+0x98>
			} else {
				set_bit(reg, pin);
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <toggle_pin+0x92>
     ca2:	22 0f       	add	r18, r18
     ca4:	33 1f       	adc	r19, r19
     ca6:	6a 95       	dec	r22
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <toggle_pin+0x8e>
     caa:	82 2b       	or	r24, r18
			}
			PORTB = reg;
     cac:	88 bb       	out	0x18, r24	; 24
			break;
     cae:	08 95       	ret
		case 'C':
			reg = PINC;
     cb0:	83 b3       	in	r24, 0x13	; 19
			pin_value = (reg>>pin)&1;
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	06 2e       	mov	r0, r22
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <toggle_pin+0xaa>
     cba:	35 95       	asr	r19
     cbc:	27 95       	ror	r18
     cbe:	0a 94       	dec	r0
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <toggle_pin+0xa6>
			if (pin_value){
     cc2:	20 ff       	sbrs	r18, 0
     cc4:	0a c0       	rjmp	.+20     	; 0xcda <toggle_pin+0xc6>
				clear_bit(reg, pin);
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <toggle_pin+0xbc>
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	6a 95       	dec	r22
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <toggle_pin+0xb8>
     cd4:	20 95       	com	r18
     cd6:	82 23       	and	r24, r18
     cd8:	08 c0       	rjmp	.+16     	; 0xcea <toggle_pin+0xd6>
			} else {
				set_bit(reg, pin);
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <toggle_pin+0xd0>
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	6a 95       	dec	r22
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <toggle_pin+0xcc>
     ce8:	82 2b       	or	r24, r18
			}
			PORTC = reg;
     cea:	85 bb       	out	0x15, r24	; 21
			break;
     cec:	08 95       	ret
		case 'D':
			reg = PIND;
     cee:	80 b3       	in	r24, 0x10	; 16
			pin_value = (reg>>pin)&1;
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	06 2e       	mov	r0, r22
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <toggle_pin+0xe8>
     cf8:	35 95       	asr	r19
     cfa:	27 95       	ror	r18
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <toggle_pin+0xe4>
			if (pin_value){
     d00:	20 ff       	sbrs	r18, 0
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <toggle_pin+0x104>
				clear_bit(reg, pin);
     d04:	21 e0       	ldi	r18, 0x01	; 1
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <toggle_pin+0xfa>
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	6a 95       	dec	r22
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <toggle_pin+0xf6>
     d12:	20 95       	com	r18
     d14:	82 23       	and	r24, r18
     d16:	08 c0       	rjmp	.+16     	; 0xd28 <toggle_pin+0x114>
			} else {
				set_bit(reg, pin);
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <toggle_pin+0x10e>
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	6a 95       	dec	r22
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <toggle_pin+0x10a>
     d26:	82 2b       	or	r24, r18
			}
			PORTD = reg;
     d28:	82 bb       	out	0x12, r24	; 18
     d2a:	08 95       	ret

00000d2c <USART_Init>:
// Following functions are taken from "Atmel AVR ATmega162 datasheet"

void USART_Init(unsigned int ubrr)
{
	/* set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     d2c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     d2e:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     d30:	88 e1       	ldi	r24, 0x18	; 24
     d32:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     d34:	8e e8       	ldi	r24, 0x8E	; 142
     d36:	80 bd       	out	0x20, r24	; 32
     d38:	08 95       	ret

00000d3a <USART_Transmit>:
}

int USART_Transmit (char data, FILE* file)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0) ));
     d3a:	5d 9b       	sbis	0x0b, 5	; 11
     d3c:	fe cf       	rjmp	.-4      	; 0xd3a <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     d3e:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	08 95       	ret

00000d46 <USART_Receive>:

int USART_Receive ( FILE* file )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     d46:	5f 9b       	sbis	0x0b, 7	; 11
     d48:	fe cf       	rjmp	.-4      	; 0xd46 <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
     d4a:	8c b1       	in	r24, 0x0c	; 12
}
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	08 95       	ret

00000d50 <malloc>:
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	91 05       	cpc	r25, r1
     d5c:	10 f4       	brcc	.+4      	; 0xd62 <malloc+0x12>
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <__flp>
     d66:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <__flp+0x1>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	a0 e0       	ldi	r26, 0x00	; 0
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	30 97       	sbiw	r30, 0x00	; 0
     d74:	19 f1       	breq	.+70     	; 0xdbc <malloc+0x6c>
     d76:	40 81       	ld	r20, Z
     d78:	51 81       	ldd	r21, Z+1	; 0x01
     d7a:	02 81       	ldd	r16, Z+2	; 0x02
     d7c:	13 81       	ldd	r17, Z+3	; 0x03
     d7e:	48 17       	cp	r20, r24
     d80:	59 07       	cpc	r21, r25
     d82:	c8 f0       	brcs	.+50     	; 0xdb6 <malloc+0x66>
     d84:	84 17       	cp	r24, r20
     d86:	95 07       	cpc	r25, r21
     d88:	69 f4       	brne	.+26     	; 0xda4 <malloc+0x54>
     d8a:	10 97       	sbiw	r26, 0x00	; 0
     d8c:	31 f0       	breq	.+12     	; 0xd9a <malloc+0x4a>
     d8e:	12 96       	adiw	r26, 0x02	; 2
     d90:	0c 93       	st	X, r16
     d92:	12 97       	sbiw	r26, 0x02	; 2
     d94:	13 96       	adiw	r26, 0x03	; 3
     d96:	1c 93       	st	X, r17
     d98:	27 c0       	rjmp	.+78     	; 0xde8 <malloc+0x98>
     d9a:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <__flp>
     d9e:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <__flp+0x1>
     da2:	22 c0       	rjmp	.+68     	; 0xde8 <malloc+0x98>
     da4:	21 15       	cp	r18, r1
     da6:	31 05       	cpc	r19, r1
     da8:	19 f0       	breq	.+6      	; 0xdb0 <malloc+0x60>
     daa:	42 17       	cp	r20, r18
     dac:	53 07       	cpc	r21, r19
     dae:	18 f4       	brcc	.+6      	; 0xdb6 <malloc+0x66>
     db0:	9a 01       	movw	r18, r20
     db2:	bd 01       	movw	r22, r26
     db4:	ef 01       	movw	r28, r30
     db6:	df 01       	movw	r26, r30
     db8:	f8 01       	movw	r30, r16
     dba:	db cf       	rjmp	.-74     	; 0xd72 <malloc+0x22>
     dbc:	21 15       	cp	r18, r1
     dbe:	31 05       	cpc	r19, r1
     dc0:	f9 f0       	breq	.+62     	; 0xe00 <malloc+0xb0>
     dc2:	28 1b       	sub	r18, r24
     dc4:	39 0b       	sbc	r19, r25
     dc6:	24 30       	cpi	r18, 0x04	; 4
     dc8:	31 05       	cpc	r19, r1
     dca:	80 f4       	brcc	.+32     	; 0xdec <malloc+0x9c>
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	61 15       	cp	r22, r1
     dd2:	71 05       	cpc	r23, r1
     dd4:	21 f0       	breq	.+8      	; 0xdde <malloc+0x8e>
     dd6:	fb 01       	movw	r30, r22
     dd8:	93 83       	std	Z+3, r25	; 0x03
     dda:	82 83       	std	Z+2, r24	; 0x02
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <malloc+0x96>
     dde:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__flp+0x1>
     de2:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__flp>
     de6:	fe 01       	movw	r30, r28
     de8:	32 96       	adiw	r30, 0x02	; 2
     dea:	44 c0       	rjmp	.+136    	; 0xe74 <malloc+0x124>
     dec:	fe 01       	movw	r30, r28
     dee:	e2 0f       	add	r30, r18
     df0:	f3 1f       	adc	r31, r19
     df2:	81 93       	st	Z+, r24
     df4:	91 93       	st	Z+, r25
     df6:	22 50       	subi	r18, 0x02	; 2
     df8:	31 09       	sbc	r19, r1
     dfa:	39 83       	std	Y+1, r19	; 0x01
     dfc:	28 83       	st	Y, r18
     dfe:	3a c0       	rjmp	.+116    	; 0xe74 <malloc+0x124>
     e00:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <__brkval>
     e04:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <__brkval+0x1>
     e08:	23 2b       	or	r18, r19
     e0a:	41 f4       	brne	.+16     	; 0xe1c <malloc+0xcc>
     e0c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e10:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e14:	30 93 a3 02 	sts	0x02A3, r19	; 0x8002a3 <__brkval+0x1>
     e18:	20 93 a2 02 	sts	0x02A2, r18	; 0x8002a2 <__brkval>
     e1c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e20:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e24:	21 15       	cp	r18, r1
     e26:	31 05       	cpc	r19, r1
     e28:	41 f4       	brne	.+16     	; 0xe3a <malloc+0xea>
     e2a:	2d b7       	in	r18, 0x3d	; 61
     e2c:	3e b7       	in	r19, 0x3e	; 62
     e2e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e32:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e36:	24 1b       	sub	r18, r20
     e38:	35 0b       	sbc	r19, r21
     e3a:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <__brkval>
     e3e:	f0 91 a3 02 	lds	r31, 0x02A3	; 0x8002a3 <__brkval+0x1>
     e42:	e2 17       	cp	r30, r18
     e44:	f3 07       	cpc	r31, r19
     e46:	a0 f4       	brcc	.+40     	; 0xe70 <malloc+0x120>
     e48:	2e 1b       	sub	r18, r30
     e4a:	3f 0b       	sbc	r19, r31
     e4c:	28 17       	cp	r18, r24
     e4e:	39 07       	cpc	r19, r25
     e50:	78 f0       	brcs	.+30     	; 0xe70 <malloc+0x120>
     e52:	ac 01       	movw	r20, r24
     e54:	4e 5f       	subi	r20, 0xFE	; 254
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	24 17       	cp	r18, r20
     e5a:	35 07       	cpc	r19, r21
     e5c:	48 f0       	brcs	.+18     	; 0xe70 <malloc+0x120>
     e5e:	4e 0f       	add	r20, r30
     e60:	5f 1f       	adc	r21, r31
     e62:	50 93 a3 02 	sts	0x02A3, r21	; 0x8002a3 <__brkval+0x1>
     e66:	40 93 a2 02 	sts	0x02A2, r20	; 0x8002a2 <__brkval>
     e6a:	81 93       	st	Z+, r24
     e6c:	91 93       	st	Z+, r25
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <malloc+0x124>
     e70:	e0 e0       	ldi	r30, 0x00	; 0
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	cf 01       	movw	r24, r30
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <free>:
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	09 f4       	brne	.+2      	; 0xe8a <free+0xa>
     e88:	81 c0       	rjmp	.+258    	; 0xf8c <free+0x10c>
     e8a:	fc 01       	movw	r30, r24
     e8c:	32 97       	sbiw	r30, 0x02	; 2
     e8e:	13 82       	std	Z+3, r1	; 0x03
     e90:	12 82       	std	Z+2, r1	; 0x02
     e92:	a0 91 a4 02 	lds	r26, 0x02A4	; 0x8002a4 <__flp>
     e96:	b0 91 a5 02 	lds	r27, 0x02A5	; 0x8002a5 <__flp+0x1>
     e9a:	10 97       	sbiw	r26, 0x00	; 0
     e9c:	81 f4       	brne	.+32     	; 0xebe <free+0x3e>
     e9e:	20 81       	ld	r18, Z
     ea0:	31 81       	ldd	r19, Z+1	; 0x01
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <__brkval>
     eaa:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <__brkval+0x1>
     eae:	28 17       	cp	r18, r24
     eb0:	39 07       	cpc	r19, r25
     eb2:	51 f5       	brne	.+84     	; 0xf08 <free+0x88>
     eb4:	f0 93 a3 02 	sts	0x02A3, r31	; 0x8002a3 <__brkval+0x1>
     eb8:	e0 93 a2 02 	sts	0x02A2, r30	; 0x8002a2 <__brkval>
     ebc:	67 c0       	rjmp	.+206    	; 0xf8c <free+0x10c>
     ebe:	ed 01       	movw	r28, r26
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	ce 17       	cp	r28, r30
     ec6:	df 07       	cpc	r29, r31
     ec8:	40 f4       	brcc	.+16     	; 0xeda <free+0x5a>
     eca:	4a 81       	ldd	r20, Y+2	; 0x02
     ecc:	5b 81       	ldd	r21, Y+3	; 0x03
     ece:	9e 01       	movw	r18, r28
     ed0:	41 15       	cp	r20, r1
     ed2:	51 05       	cpc	r21, r1
     ed4:	f1 f0       	breq	.+60     	; 0xf12 <free+0x92>
     ed6:	ea 01       	movw	r28, r20
     ed8:	f5 cf       	rjmp	.-22     	; 0xec4 <free+0x44>
     eda:	d3 83       	std	Z+3, r29	; 0x03
     edc:	c2 83       	std	Z+2, r28	; 0x02
     ede:	40 81       	ld	r20, Z
     ee0:	51 81       	ldd	r21, Z+1	; 0x01
     ee2:	84 0f       	add	r24, r20
     ee4:	95 1f       	adc	r25, r21
     ee6:	c8 17       	cp	r28, r24
     ee8:	d9 07       	cpc	r29, r25
     eea:	59 f4       	brne	.+22     	; 0xf02 <free+0x82>
     eec:	88 81       	ld	r24, Y
     eee:	99 81       	ldd	r25, Y+1	; 0x01
     ef0:	84 0f       	add	r24, r20
     ef2:	95 1f       	adc	r25, r21
     ef4:	02 96       	adiw	r24, 0x02	; 2
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	9b 81       	ldd	r25, Y+3	; 0x03
     efe:	93 83       	std	Z+3, r25	; 0x03
     f00:	82 83       	std	Z+2, r24	; 0x02
     f02:	21 15       	cp	r18, r1
     f04:	31 05       	cpc	r19, r1
     f06:	29 f4       	brne	.+10     	; 0xf12 <free+0x92>
     f08:	f0 93 a5 02 	sts	0x02A5, r31	; 0x8002a5 <__flp+0x1>
     f0c:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <__flp>
     f10:	3d c0       	rjmp	.+122    	; 0xf8c <free+0x10c>
     f12:	e9 01       	movw	r28, r18
     f14:	fb 83       	std	Y+3, r31	; 0x03
     f16:	ea 83       	std	Y+2, r30	; 0x02
     f18:	49 91       	ld	r20, Y+
     f1a:	59 91       	ld	r21, Y+
     f1c:	c4 0f       	add	r28, r20
     f1e:	d5 1f       	adc	r29, r21
     f20:	ec 17       	cp	r30, r28
     f22:	fd 07       	cpc	r31, r29
     f24:	61 f4       	brne	.+24     	; 0xf3e <free+0xbe>
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	84 0f       	add	r24, r20
     f2c:	95 1f       	adc	r25, r21
     f2e:	02 96       	adiw	r24, 0x02	; 2
     f30:	e9 01       	movw	r28, r18
     f32:	99 83       	std	Y+1, r25	; 0x01
     f34:	88 83       	st	Y, r24
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	93 81       	ldd	r25, Z+3	; 0x03
     f3a:	9b 83       	std	Y+3, r25	; 0x03
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	e0 e0       	ldi	r30, 0x00	; 0
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	12 96       	adiw	r26, 0x02	; 2
     f44:	8d 91       	ld	r24, X+
     f46:	9c 91       	ld	r25, X
     f48:	13 97       	sbiw	r26, 0x03	; 3
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	19 f0       	breq	.+6      	; 0xf54 <free+0xd4>
     f4e:	fd 01       	movw	r30, r26
     f50:	dc 01       	movw	r26, r24
     f52:	f7 cf       	rjmp	.-18     	; 0xf42 <free+0xc2>
     f54:	8d 91       	ld	r24, X+
     f56:	9c 91       	ld	r25, X
     f58:	11 97       	sbiw	r26, 0x01	; 1
     f5a:	9d 01       	movw	r18, r26
     f5c:	2e 5f       	subi	r18, 0xFE	; 254
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <__brkval>
     f68:	30 91 a3 02 	lds	r19, 0x02A3	; 0x8002a3 <__brkval+0x1>
     f6c:	28 17       	cp	r18, r24
     f6e:	39 07       	cpc	r19, r25
     f70:	69 f4       	brne	.+26     	; 0xf8c <free+0x10c>
     f72:	30 97       	sbiw	r30, 0x00	; 0
     f74:	29 f4       	brne	.+10     	; 0xf80 <free+0x100>
     f76:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <__flp+0x1>
     f7a:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <__flp>
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <free+0x104>
     f80:	13 82       	std	Z+3, r1	; 0x03
     f82:	12 82       	std	Z+2, r1	; 0x02
     f84:	b0 93 a3 02 	sts	0x02A3, r27	; 0x8002a3 <__brkval+0x1>
     f88:	a0 93 a2 02 	sts	0x02A2, r26	; 0x8002a2 <__brkval>
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <fdevopen>:
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	31 f4       	brne	.+12     	; 0xfaa <fdevopen+0x18>
     f9e:	61 15       	cp	r22, r1
     fa0:	71 05       	cpc	r23, r1
     fa2:	19 f4       	brne	.+6      	; 0xfaa <fdevopen+0x18>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	3a c0       	rjmp	.+116    	; 0x101e <fdevopen+0x8c>
     faa:	8b 01       	movw	r16, r22
     fac:	ec 01       	movw	r28, r24
     fae:	6e e0       	ldi	r22, 0x0E	; 14
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <calloc>
     fba:	fc 01       	movw	r30, r24
     fbc:	89 2b       	or	r24, r25
     fbe:	91 f3       	breq	.-28     	; 0xfa4 <fdevopen+0x12>
     fc0:	80 e8       	ldi	r24, 0x80	; 128
     fc2:	83 83       	std	Z+3, r24	; 0x03
     fc4:	01 15       	cp	r16, r1
     fc6:	11 05       	cpc	r17, r1
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <fdevopen+0x54>
     fca:	13 87       	std	Z+11, r17	; 0x0b
     fcc:	02 87       	std	Z+10, r16	; 0x0a
     fce:	81 e8       	ldi	r24, 0x81	; 129
     fd0:	83 83       	std	Z+3, r24	; 0x03
     fd2:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <__iob>
     fd6:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <__iob+0x1>
     fda:	89 2b       	or	r24, r25
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <fdevopen+0x54>
     fde:	f0 93 a7 02 	sts	0x02A7, r31	; 0x8002a7 <__iob+0x1>
     fe2:	e0 93 a6 02 	sts	0x02A6, r30	; 0x8002a6 <__iob>
     fe6:	20 97       	sbiw	r28, 0x00	; 0
     fe8:	c9 f0       	breq	.+50     	; 0x101c <fdevopen+0x8a>
     fea:	d1 87       	std	Z+9, r29	; 0x09
     fec:	c0 87       	std	Z+8, r28	; 0x08
     fee:	83 81       	ldd	r24, Z+3	; 0x03
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	83 83       	std	Z+3, r24	; 0x03
     ff4:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__iob+0x2>
     ff8:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <__iob+0x3>
     ffc:	89 2b       	or	r24, r25
     ffe:	71 f4       	brne	.+28     	; 0x101c <fdevopen+0x8a>
    1000:	f0 93 a9 02 	sts	0x02A9, r31	; 0x8002a9 <__iob+0x3>
    1004:	e0 93 a8 02 	sts	0x02A8, r30	; 0x8002a8 <__iob+0x2>
    1008:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__iob+0x4>
    100c:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__iob+0x5>
    1010:	89 2b       	or	r24, r25
    1012:	21 f4       	brne	.+8      	; 0x101c <fdevopen+0x8a>
    1014:	f0 93 ab 02 	sts	0x02AB, r31	; 0x8002ab <__iob+0x5>
    1018:	e0 93 aa 02 	sts	0x02AA, r30	; 0x8002aa <__iob+0x4>
    101c:	cf 01       	movw	r24, r30
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <printf>:
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e1       	ldi	r30, 0x1A	; 26
    102e:	f8 e0       	ldi	r31, 0x08	; 8
    1030:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__prologue_saves__+0x20>
    1034:	ae 01       	movw	r20, r28
    1036:	4b 5f       	subi	r20, 0xFB	; 251
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	fa 01       	movw	r30, r20
    103c:	61 91       	ld	r22, Z+
    103e:	71 91       	ld	r23, Z+
    1040:	af 01       	movw	r20, r30
    1042:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__iob+0x2>
    1046:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <__iob+0x3>
    104a:	0e 94 2a 08 	call	0x1054	; 0x1054 <vfprintf>
    104e:	e2 e0       	ldi	r30, 0x02	; 2
    1050:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__epilogue_restores__+0x20>

00001054 <vfprintf>:
    1054:	ab e0       	ldi	r26, 0x0B	; 11
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e0 e3       	ldi	r30, 0x30	; 48
    105a:	f8 e0       	ldi	r31, 0x08	; 8
    105c:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__prologue_saves__>
    1060:	6c 01       	movw	r12, r24
    1062:	7b 01       	movw	r14, r22
    1064:	8a 01       	movw	r16, r20
    1066:	fc 01       	movw	r30, r24
    1068:	17 82       	std	Z+7, r1	; 0x07
    106a:	16 82       	std	Z+6, r1	; 0x06
    106c:	83 81       	ldd	r24, Z+3	; 0x03
    106e:	81 ff       	sbrs	r24, 1
    1070:	cc c1       	rjmp	.+920    	; 0x140a <vfprintf+0x3b6>
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	3c 01       	movw	r6, r24
    1078:	f6 01       	movw	r30, r12
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	f7 01       	movw	r30, r14
    107e:	93 fd       	sbrc	r25, 3
    1080:	85 91       	lpm	r24, Z+
    1082:	93 ff       	sbrs	r25, 3
    1084:	81 91       	ld	r24, Z+
    1086:	7f 01       	movw	r14, r30
    1088:	88 23       	and	r24, r24
    108a:	09 f4       	brne	.+2      	; 0x108e <vfprintf+0x3a>
    108c:	ba c1       	rjmp	.+884    	; 0x1402 <vfprintf+0x3ae>
    108e:	85 32       	cpi	r24, 0x25	; 37
    1090:	39 f4       	brne	.+14     	; 0x10a0 <vfprintf+0x4c>
    1092:	93 fd       	sbrc	r25, 3
    1094:	85 91       	lpm	r24, Z+
    1096:	93 ff       	sbrs	r25, 3
    1098:	81 91       	ld	r24, Z+
    109a:	7f 01       	movw	r14, r30
    109c:	85 32       	cpi	r24, 0x25	; 37
    109e:	29 f4       	brne	.+10     	; 0x10aa <vfprintf+0x56>
    10a0:	b6 01       	movw	r22, r12
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    10a8:	e7 cf       	rjmp	.-50     	; 0x1078 <vfprintf+0x24>
    10aa:	91 2c       	mov	r9, r1
    10ac:	21 2c       	mov	r2, r1
    10ae:	31 2c       	mov	r3, r1
    10b0:	ff e1       	ldi	r31, 0x1F	; 31
    10b2:	f3 15       	cp	r31, r3
    10b4:	d8 f0       	brcs	.+54     	; 0x10ec <vfprintf+0x98>
    10b6:	8b 32       	cpi	r24, 0x2B	; 43
    10b8:	79 f0       	breq	.+30     	; 0x10d8 <vfprintf+0x84>
    10ba:	38 f4       	brcc	.+14     	; 0x10ca <vfprintf+0x76>
    10bc:	80 32       	cpi	r24, 0x20	; 32
    10be:	79 f0       	breq	.+30     	; 0x10de <vfprintf+0x8a>
    10c0:	83 32       	cpi	r24, 0x23	; 35
    10c2:	a1 f4       	brne	.+40     	; 0x10ec <vfprintf+0x98>
    10c4:	23 2d       	mov	r18, r3
    10c6:	20 61       	ori	r18, 0x10	; 16
    10c8:	1d c0       	rjmp	.+58     	; 0x1104 <vfprintf+0xb0>
    10ca:	8d 32       	cpi	r24, 0x2D	; 45
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <vfprintf+0x92>
    10ce:	80 33       	cpi	r24, 0x30	; 48
    10d0:	69 f4       	brne	.+26     	; 0x10ec <vfprintf+0x98>
    10d2:	23 2d       	mov	r18, r3
    10d4:	21 60       	ori	r18, 0x01	; 1
    10d6:	16 c0       	rjmp	.+44     	; 0x1104 <vfprintf+0xb0>
    10d8:	83 2d       	mov	r24, r3
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	38 2e       	mov	r3, r24
    10de:	e3 2d       	mov	r30, r3
    10e0:	e4 60       	ori	r30, 0x04	; 4
    10e2:	3e 2e       	mov	r3, r30
    10e4:	2a c0       	rjmp	.+84     	; 0x113a <vfprintf+0xe6>
    10e6:	f3 2d       	mov	r31, r3
    10e8:	f8 60       	ori	r31, 0x08	; 8
    10ea:	1d c0       	rjmp	.+58     	; 0x1126 <vfprintf+0xd2>
    10ec:	37 fc       	sbrc	r3, 7
    10ee:	2d c0       	rjmp	.+90     	; 0x114a <vfprintf+0xf6>
    10f0:	20 ed       	ldi	r18, 0xD0	; 208
    10f2:	28 0f       	add	r18, r24
    10f4:	2a 30       	cpi	r18, 0x0A	; 10
    10f6:	40 f0       	brcs	.+16     	; 0x1108 <vfprintf+0xb4>
    10f8:	8e 32       	cpi	r24, 0x2E	; 46
    10fa:	b9 f4       	brne	.+46     	; 0x112a <vfprintf+0xd6>
    10fc:	36 fc       	sbrc	r3, 6
    10fe:	81 c1       	rjmp	.+770    	; 0x1402 <vfprintf+0x3ae>
    1100:	23 2d       	mov	r18, r3
    1102:	20 64       	ori	r18, 0x40	; 64
    1104:	32 2e       	mov	r3, r18
    1106:	19 c0       	rjmp	.+50     	; 0x113a <vfprintf+0xe6>
    1108:	36 fe       	sbrs	r3, 6
    110a:	06 c0       	rjmp	.+12     	; 0x1118 <vfprintf+0xc4>
    110c:	8a e0       	ldi	r24, 0x0A	; 10
    110e:	98 9e       	mul	r9, r24
    1110:	20 0d       	add	r18, r0
    1112:	11 24       	eor	r1, r1
    1114:	92 2e       	mov	r9, r18
    1116:	11 c0       	rjmp	.+34     	; 0x113a <vfprintf+0xe6>
    1118:	ea e0       	ldi	r30, 0x0A	; 10
    111a:	2e 9e       	mul	r2, r30
    111c:	20 0d       	add	r18, r0
    111e:	11 24       	eor	r1, r1
    1120:	22 2e       	mov	r2, r18
    1122:	f3 2d       	mov	r31, r3
    1124:	f0 62       	ori	r31, 0x20	; 32
    1126:	3f 2e       	mov	r3, r31
    1128:	08 c0       	rjmp	.+16     	; 0x113a <vfprintf+0xe6>
    112a:	8c 36       	cpi	r24, 0x6C	; 108
    112c:	21 f4       	brne	.+8      	; 0x1136 <vfprintf+0xe2>
    112e:	83 2d       	mov	r24, r3
    1130:	80 68       	ori	r24, 0x80	; 128
    1132:	38 2e       	mov	r3, r24
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0xe6>
    1136:	88 36       	cpi	r24, 0x68	; 104
    1138:	41 f4       	brne	.+16     	; 0x114a <vfprintf+0xf6>
    113a:	f7 01       	movw	r30, r14
    113c:	93 fd       	sbrc	r25, 3
    113e:	85 91       	lpm	r24, Z+
    1140:	93 ff       	sbrs	r25, 3
    1142:	81 91       	ld	r24, Z+
    1144:	7f 01       	movw	r14, r30
    1146:	81 11       	cpse	r24, r1
    1148:	b3 cf       	rjmp	.-154    	; 0x10b0 <vfprintf+0x5c>
    114a:	98 2f       	mov	r25, r24
    114c:	9f 7d       	andi	r25, 0xDF	; 223
    114e:	95 54       	subi	r25, 0x45	; 69
    1150:	93 30       	cpi	r25, 0x03	; 3
    1152:	28 f4       	brcc	.+10     	; 0x115e <vfprintf+0x10a>
    1154:	0c 5f       	subi	r16, 0xFC	; 252
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	9f e3       	ldi	r25, 0x3F	; 63
    115a:	99 83       	std	Y+1, r25	; 0x01
    115c:	0d c0       	rjmp	.+26     	; 0x1178 <vfprintf+0x124>
    115e:	83 36       	cpi	r24, 0x63	; 99
    1160:	31 f0       	breq	.+12     	; 0x116e <vfprintf+0x11a>
    1162:	83 37       	cpi	r24, 0x73	; 115
    1164:	71 f0       	breq	.+28     	; 0x1182 <vfprintf+0x12e>
    1166:	83 35       	cpi	r24, 0x53	; 83
    1168:	09 f0       	breq	.+2      	; 0x116c <vfprintf+0x118>
    116a:	59 c0       	rjmp	.+178    	; 0x121e <vfprintf+0x1ca>
    116c:	21 c0       	rjmp	.+66     	; 0x11b0 <vfprintf+0x15c>
    116e:	f8 01       	movw	r30, r16
    1170:	80 81       	ld	r24, Z
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	0e 5f       	subi	r16, 0xFE	; 254
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	88 24       	eor	r8, r8
    117a:	83 94       	inc	r8
    117c:	91 2c       	mov	r9, r1
    117e:	53 01       	movw	r10, r6
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <vfprintf+0x154>
    1182:	28 01       	movw	r4, r16
    1184:	f2 e0       	ldi	r31, 0x02	; 2
    1186:	4f 0e       	add	r4, r31
    1188:	51 1c       	adc	r5, r1
    118a:	f8 01       	movw	r30, r16
    118c:	a0 80       	ld	r10, Z
    118e:	b1 80       	ldd	r11, Z+1	; 0x01
    1190:	36 fe       	sbrs	r3, 6
    1192:	03 c0       	rjmp	.+6      	; 0x119a <vfprintf+0x146>
    1194:	69 2d       	mov	r22, r9
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <vfprintf+0x14a>
    119a:	6f ef       	ldi	r22, 0xFF	; 255
    119c:	7f ef       	ldi	r23, 0xFF	; 255
    119e:	c5 01       	movw	r24, r10
    11a0:	0e 94 39 0a 	call	0x1472	; 0x1472 <strnlen>
    11a4:	4c 01       	movw	r8, r24
    11a6:	82 01       	movw	r16, r4
    11a8:	f3 2d       	mov	r31, r3
    11aa:	ff 77       	andi	r31, 0x7F	; 127
    11ac:	3f 2e       	mov	r3, r31
    11ae:	16 c0       	rjmp	.+44     	; 0x11dc <vfprintf+0x188>
    11b0:	28 01       	movw	r4, r16
    11b2:	22 e0       	ldi	r18, 0x02	; 2
    11b4:	42 0e       	add	r4, r18
    11b6:	51 1c       	adc	r5, r1
    11b8:	f8 01       	movw	r30, r16
    11ba:	a0 80       	ld	r10, Z
    11bc:	b1 80       	ldd	r11, Z+1	; 0x01
    11be:	36 fe       	sbrs	r3, 6
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <vfprintf+0x174>
    11c2:	69 2d       	mov	r22, r9
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <vfprintf+0x178>
    11c8:	6f ef       	ldi	r22, 0xFF	; 255
    11ca:	7f ef       	ldi	r23, 0xFF	; 255
    11cc:	c5 01       	movw	r24, r10
    11ce:	0e 94 27 0a 	call	0x144e	; 0x144e <strnlen_P>
    11d2:	4c 01       	movw	r8, r24
    11d4:	f3 2d       	mov	r31, r3
    11d6:	f0 68       	ori	r31, 0x80	; 128
    11d8:	3f 2e       	mov	r3, r31
    11da:	82 01       	movw	r16, r4
    11dc:	33 fc       	sbrc	r3, 3
    11de:	1b c0       	rjmp	.+54     	; 0x1216 <vfprintf+0x1c2>
    11e0:	82 2d       	mov	r24, r2
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	88 16       	cp	r8, r24
    11e6:	99 06       	cpc	r9, r25
    11e8:	b0 f4       	brcc	.+44     	; 0x1216 <vfprintf+0x1c2>
    11ea:	b6 01       	movw	r22, r12
    11ec:	80 e2       	ldi	r24, 0x20	; 32
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    11f4:	2a 94       	dec	r2
    11f6:	f4 cf       	rjmp	.-24     	; 0x11e0 <vfprintf+0x18c>
    11f8:	f5 01       	movw	r30, r10
    11fa:	37 fc       	sbrc	r3, 7
    11fc:	85 91       	lpm	r24, Z+
    11fe:	37 fe       	sbrs	r3, 7
    1200:	81 91       	ld	r24, Z+
    1202:	5f 01       	movw	r10, r30
    1204:	b6 01       	movw	r22, r12
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    120c:	21 10       	cpse	r2, r1
    120e:	2a 94       	dec	r2
    1210:	21 e0       	ldi	r18, 0x01	; 1
    1212:	82 1a       	sub	r8, r18
    1214:	91 08       	sbc	r9, r1
    1216:	81 14       	cp	r8, r1
    1218:	91 04       	cpc	r9, r1
    121a:	71 f7       	brne	.-36     	; 0x11f8 <vfprintf+0x1a4>
    121c:	e8 c0       	rjmp	.+464    	; 0x13ee <vfprintf+0x39a>
    121e:	84 36       	cpi	r24, 0x64	; 100
    1220:	11 f0       	breq	.+4      	; 0x1226 <vfprintf+0x1d2>
    1222:	89 36       	cpi	r24, 0x69	; 105
    1224:	41 f5       	brne	.+80     	; 0x1276 <vfprintf+0x222>
    1226:	f8 01       	movw	r30, r16
    1228:	37 fe       	sbrs	r3, 7
    122a:	07 c0       	rjmp	.+14     	; 0x123a <vfprintf+0x1e6>
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	0c 5f       	subi	r16, 0xFC	; 252
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	08 c0       	rjmp	.+16     	; 0x124a <vfprintf+0x1f6>
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	07 2e       	mov	r0, r23
    1240:	00 0c       	add	r0, r0
    1242:	88 0b       	sbc	r24, r24
    1244:	99 0b       	sbc	r25, r25
    1246:	0e 5f       	subi	r16, 0xFE	; 254
    1248:	1f 4f       	sbci	r17, 0xFF	; 255
    124a:	f3 2d       	mov	r31, r3
    124c:	ff 76       	andi	r31, 0x6F	; 111
    124e:	3f 2e       	mov	r3, r31
    1250:	97 ff       	sbrs	r25, 7
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <vfprintf+0x212>
    1254:	90 95       	com	r25
    1256:	80 95       	com	r24
    1258:	70 95       	com	r23
    125a:	61 95       	neg	r22
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	f0 68       	ori	r31, 0x80	; 128
    1264:	3f 2e       	mov	r3, r31
    1266:	2a e0       	ldi	r18, 0x0A	; 10
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	a3 01       	movw	r20, r6
    126c:	0e 94 80 0a 	call	0x1500	; 0x1500 <__ultoa_invert>
    1270:	88 2e       	mov	r8, r24
    1272:	86 18       	sub	r8, r6
    1274:	45 c0       	rjmp	.+138    	; 0x1300 <vfprintf+0x2ac>
    1276:	85 37       	cpi	r24, 0x75	; 117
    1278:	31 f4       	brne	.+12     	; 0x1286 <vfprintf+0x232>
    127a:	23 2d       	mov	r18, r3
    127c:	2f 7e       	andi	r18, 0xEF	; 239
    127e:	b2 2e       	mov	r11, r18
    1280:	2a e0       	ldi	r18, 0x0A	; 10
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	25 c0       	rjmp	.+74     	; 0x12d0 <vfprintf+0x27c>
    1286:	93 2d       	mov	r25, r3
    1288:	99 7f       	andi	r25, 0xF9	; 249
    128a:	b9 2e       	mov	r11, r25
    128c:	8f 36       	cpi	r24, 0x6F	; 111
    128e:	c1 f0       	breq	.+48     	; 0x12c0 <vfprintf+0x26c>
    1290:	18 f4       	brcc	.+6      	; 0x1298 <vfprintf+0x244>
    1292:	88 35       	cpi	r24, 0x58	; 88
    1294:	79 f0       	breq	.+30     	; 0x12b4 <vfprintf+0x260>
    1296:	b5 c0       	rjmp	.+362    	; 0x1402 <vfprintf+0x3ae>
    1298:	80 37       	cpi	r24, 0x70	; 112
    129a:	19 f0       	breq	.+6      	; 0x12a2 <vfprintf+0x24e>
    129c:	88 37       	cpi	r24, 0x78	; 120
    129e:	21 f0       	breq	.+8      	; 0x12a8 <vfprintf+0x254>
    12a0:	b0 c0       	rjmp	.+352    	; 0x1402 <vfprintf+0x3ae>
    12a2:	e9 2f       	mov	r30, r25
    12a4:	e0 61       	ori	r30, 0x10	; 16
    12a6:	be 2e       	mov	r11, r30
    12a8:	b4 fe       	sbrs	r11, 4
    12aa:	0d c0       	rjmp	.+26     	; 0x12c6 <vfprintf+0x272>
    12ac:	fb 2d       	mov	r31, r11
    12ae:	f4 60       	ori	r31, 0x04	; 4
    12b0:	bf 2e       	mov	r11, r31
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <vfprintf+0x272>
    12b4:	34 fe       	sbrs	r3, 4
    12b6:	0a c0       	rjmp	.+20     	; 0x12cc <vfprintf+0x278>
    12b8:	29 2f       	mov	r18, r25
    12ba:	26 60       	ori	r18, 0x06	; 6
    12bc:	b2 2e       	mov	r11, r18
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <vfprintf+0x278>
    12c0:	28 e0       	ldi	r18, 0x08	; 8
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <vfprintf+0x27c>
    12c6:	20 e1       	ldi	r18, 0x10	; 16
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <vfprintf+0x27c>
    12cc:	20 e1       	ldi	r18, 0x10	; 16
    12ce:	32 e0       	ldi	r19, 0x02	; 2
    12d0:	f8 01       	movw	r30, r16
    12d2:	b7 fe       	sbrs	r11, 7
    12d4:	07 c0       	rjmp	.+14     	; 0x12e4 <vfprintf+0x290>
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	0c 5f       	subi	r16, 0xFC	; 252
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <vfprintf+0x29c>
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 5f       	subi	r16, 0xFE	; 254
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	a3 01       	movw	r20, r6
    12f2:	0e 94 80 0a 	call	0x1500	; 0x1500 <__ultoa_invert>
    12f6:	88 2e       	mov	r8, r24
    12f8:	86 18       	sub	r8, r6
    12fa:	fb 2d       	mov	r31, r11
    12fc:	ff 77       	andi	r31, 0x7F	; 127
    12fe:	3f 2e       	mov	r3, r31
    1300:	36 fe       	sbrs	r3, 6
    1302:	0d c0       	rjmp	.+26     	; 0x131e <vfprintf+0x2ca>
    1304:	23 2d       	mov	r18, r3
    1306:	2e 7f       	andi	r18, 0xFE	; 254
    1308:	a2 2e       	mov	r10, r18
    130a:	89 14       	cp	r8, r9
    130c:	58 f4       	brcc	.+22     	; 0x1324 <vfprintf+0x2d0>
    130e:	34 fe       	sbrs	r3, 4
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <vfprintf+0x2d4>
    1312:	32 fc       	sbrc	r3, 2
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <vfprintf+0x2d4>
    1316:	83 2d       	mov	r24, r3
    1318:	8e 7e       	andi	r24, 0xEE	; 238
    131a:	a8 2e       	mov	r10, r24
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <vfprintf+0x2d4>
    131e:	b8 2c       	mov	r11, r8
    1320:	a3 2c       	mov	r10, r3
    1322:	03 c0       	rjmp	.+6      	; 0x132a <vfprintf+0x2d6>
    1324:	b8 2c       	mov	r11, r8
    1326:	01 c0       	rjmp	.+2      	; 0x132a <vfprintf+0x2d6>
    1328:	b9 2c       	mov	r11, r9
    132a:	a4 fe       	sbrs	r10, 4
    132c:	0f c0       	rjmp	.+30     	; 0x134c <vfprintf+0x2f8>
    132e:	fe 01       	movw	r30, r28
    1330:	e8 0d       	add	r30, r8
    1332:	f1 1d       	adc	r31, r1
    1334:	80 81       	ld	r24, Z
    1336:	80 33       	cpi	r24, 0x30	; 48
    1338:	21 f4       	brne	.+8      	; 0x1342 <vfprintf+0x2ee>
    133a:	9a 2d       	mov	r25, r10
    133c:	99 7e       	andi	r25, 0xE9	; 233
    133e:	a9 2e       	mov	r10, r25
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <vfprintf+0x300>
    1342:	a2 fe       	sbrs	r10, 2
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <vfprintf+0x2fe>
    1346:	b3 94       	inc	r11
    1348:	b3 94       	inc	r11
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <vfprintf+0x300>
    134c:	8a 2d       	mov	r24, r10
    134e:	86 78       	andi	r24, 0x86	; 134
    1350:	09 f0       	breq	.+2      	; 0x1354 <vfprintf+0x300>
    1352:	b3 94       	inc	r11
    1354:	a3 fc       	sbrc	r10, 3
    1356:	11 c0       	rjmp	.+34     	; 0x137a <vfprintf+0x326>
    1358:	a0 fe       	sbrs	r10, 0
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <vfprintf+0x314>
    135c:	b2 14       	cp	r11, r2
    135e:	88 f4       	brcc	.+34     	; 0x1382 <vfprintf+0x32e>
    1360:	28 0c       	add	r2, r8
    1362:	92 2c       	mov	r9, r2
    1364:	9b 18       	sub	r9, r11
    1366:	0e c0       	rjmp	.+28     	; 0x1384 <vfprintf+0x330>
    1368:	b2 14       	cp	r11, r2
    136a:	60 f4       	brcc	.+24     	; 0x1384 <vfprintf+0x330>
    136c:	b6 01       	movw	r22, r12
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    1376:	b3 94       	inc	r11
    1378:	f7 cf       	rjmp	.-18     	; 0x1368 <vfprintf+0x314>
    137a:	b2 14       	cp	r11, r2
    137c:	18 f4       	brcc	.+6      	; 0x1384 <vfprintf+0x330>
    137e:	2b 18       	sub	r2, r11
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <vfprintf+0x332>
    1382:	98 2c       	mov	r9, r8
    1384:	21 2c       	mov	r2, r1
    1386:	a4 fe       	sbrs	r10, 4
    1388:	10 c0       	rjmp	.+32     	; 0x13aa <vfprintf+0x356>
    138a:	b6 01       	movw	r22, r12
    138c:	80 e3       	ldi	r24, 0x30	; 48
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    1394:	a2 fe       	sbrs	r10, 2
    1396:	17 c0       	rjmp	.+46     	; 0x13c6 <vfprintf+0x372>
    1398:	a1 fc       	sbrc	r10, 1
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <vfprintf+0x34e>
    139c:	88 e7       	ldi	r24, 0x78	; 120
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <vfprintf+0x352>
    13a2:	88 e5       	ldi	r24, 0x58	; 88
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	b6 01       	movw	r22, r12
    13a8:	0c c0       	rjmp	.+24     	; 0x13c2 <vfprintf+0x36e>
    13aa:	8a 2d       	mov	r24, r10
    13ac:	86 78       	andi	r24, 0x86	; 134
    13ae:	59 f0       	breq	.+22     	; 0x13c6 <vfprintf+0x372>
    13b0:	a1 fe       	sbrs	r10, 1
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <vfprintf+0x364>
    13b4:	8b e2       	ldi	r24, 0x2B	; 43
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <vfprintf+0x366>
    13b8:	80 e2       	ldi	r24, 0x20	; 32
    13ba:	a7 fc       	sbrc	r10, 7
    13bc:	8d e2       	ldi	r24, 0x2D	; 45
    13be:	b6 01       	movw	r22, r12
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    13c6:	89 14       	cp	r8, r9
    13c8:	38 f4       	brcc	.+14     	; 0x13d8 <vfprintf+0x384>
    13ca:	b6 01       	movw	r22, r12
    13cc:	80 e3       	ldi	r24, 0x30	; 48
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    13d4:	9a 94       	dec	r9
    13d6:	f7 cf       	rjmp	.-18     	; 0x13c6 <vfprintf+0x372>
    13d8:	8a 94       	dec	r8
    13da:	f3 01       	movw	r30, r6
    13dc:	e8 0d       	add	r30, r8
    13de:	f1 1d       	adc	r31, r1
    13e0:	80 81       	ld	r24, Z
    13e2:	b6 01       	movw	r22, r12
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    13ea:	81 10       	cpse	r8, r1
    13ec:	f5 cf       	rjmp	.-22     	; 0x13d8 <vfprintf+0x384>
    13ee:	22 20       	and	r2, r2
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <vfprintf+0x3a0>
    13f2:	42 ce       	rjmp	.-892    	; 0x1078 <vfprintf+0x24>
    13f4:	b6 01       	movw	r22, r12
    13f6:	80 e2       	ldi	r24, 0x20	; 32
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 44 0a 	call	0x1488	; 0x1488 <fputc>
    13fe:	2a 94       	dec	r2
    1400:	f6 cf       	rjmp	.-20     	; 0x13ee <vfprintf+0x39a>
    1402:	f6 01       	movw	r30, r12
    1404:	86 81       	ldd	r24, Z+6	; 0x06
    1406:	97 81       	ldd	r25, Z+7	; 0x07
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x3ba>
    140a:	8f ef       	ldi	r24, 0xFF	; 255
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	2b 96       	adiw	r28, 0x0b	; 11
    1410:	e2 e1       	ldi	r30, 0x12	; 18
    1412:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__epilogue_restores__>

00001416 <calloc>:
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	86 9f       	mul	r24, r22
    1420:	80 01       	movw	r16, r0
    1422:	87 9f       	mul	r24, r23
    1424:	10 0d       	add	r17, r0
    1426:	96 9f       	mul	r25, r22
    1428:	10 0d       	add	r17, r0
    142a:	11 24       	eor	r1, r1
    142c:	c8 01       	movw	r24, r16
    142e:	0e 94 a8 06 	call	0xd50	; 0xd50 <malloc>
    1432:	ec 01       	movw	r28, r24
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	29 f0       	breq	.+10     	; 0x1442 <calloc+0x2c>
    1438:	a8 01       	movw	r20, r16
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	0e 94 32 0a 	call	0x1464	; 0x1464 <memset>
    1442:	ce 01       	movw	r24, r28
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <strnlen_P>:
    144e:	fc 01       	movw	r30, r24
    1450:	05 90       	lpm	r0, Z+
    1452:	61 50       	subi	r22, 0x01	; 1
    1454:	70 40       	sbci	r23, 0x00	; 0
    1456:	01 10       	cpse	r0, r1
    1458:	d8 f7       	brcc	.-10     	; 0x1450 <strnlen_P+0x2>
    145a:	80 95       	com	r24
    145c:	90 95       	com	r25
    145e:	8e 0f       	add	r24, r30
    1460:	9f 1f       	adc	r25, r31
    1462:	08 95       	ret

00001464 <memset>:
    1464:	dc 01       	movw	r26, r24
    1466:	01 c0       	rjmp	.+2      	; 0x146a <memset+0x6>
    1468:	6d 93       	st	X+, r22
    146a:	41 50       	subi	r20, 0x01	; 1
    146c:	50 40       	sbci	r21, 0x00	; 0
    146e:	e0 f7       	brcc	.-8      	; 0x1468 <memset+0x4>
    1470:	08 95       	ret

00001472 <strnlen>:
    1472:	fc 01       	movw	r30, r24
    1474:	61 50       	subi	r22, 0x01	; 1
    1476:	70 40       	sbci	r23, 0x00	; 0
    1478:	01 90       	ld	r0, Z+
    147a:	01 10       	cpse	r0, r1
    147c:	d8 f7       	brcc	.-10     	; 0x1474 <strnlen+0x2>
    147e:	80 95       	com	r24
    1480:	90 95       	com	r25
    1482:	8e 0f       	add	r24, r30
    1484:	9f 1f       	adc	r25, r31
    1486:	08 95       	ret

00001488 <fputc>:
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	fb 01       	movw	r30, r22
    1492:	23 81       	ldd	r18, Z+3	; 0x03
    1494:	21 fd       	sbrc	r18, 1
    1496:	03 c0       	rjmp	.+6      	; 0x149e <fputc+0x16>
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	9f ef       	ldi	r25, 0xFF	; 255
    149c:	2c c0       	rjmp	.+88     	; 0x14f6 <fputc+0x6e>
    149e:	22 ff       	sbrs	r18, 2
    14a0:	16 c0       	rjmp	.+44     	; 0x14ce <fputc+0x46>
    14a2:	46 81       	ldd	r20, Z+6	; 0x06
    14a4:	57 81       	ldd	r21, Z+7	; 0x07
    14a6:	24 81       	ldd	r18, Z+4	; 0x04
    14a8:	35 81       	ldd	r19, Z+5	; 0x05
    14aa:	42 17       	cp	r20, r18
    14ac:	53 07       	cpc	r21, r19
    14ae:	44 f4       	brge	.+16     	; 0x14c0 <fputc+0x38>
    14b0:	a0 81       	ld	r26, Z
    14b2:	b1 81       	ldd	r27, Z+1	; 0x01
    14b4:	9d 01       	movw	r18, r26
    14b6:	2f 5f       	subi	r18, 0xFF	; 255
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	31 83       	std	Z+1, r19	; 0x01
    14bc:	20 83       	st	Z, r18
    14be:	8c 93       	st	X, r24
    14c0:	26 81       	ldd	r18, Z+6	; 0x06
    14c2:	37 81       	ldd	r19, Z+7	; 0x07
    14c4:	2f 5f       	subi	r18, 0xFF	; 255
    14c6:	3f 4f       	sbci	r19, 0xFF	; 255
    14c8:	37 83       	std	Z+7, r19	; 0x07
    14ca:	26 83       	std	Z+6, r18	; 0x06
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <fputc+0x6e>
    14ce:	8b 01       	movw	r16, r22
    14d0:	ec 01       	movw	r28, r24
    14d2:	fb 01       	movw	r30, r22
    14d4:	00 84       	ldd	r0, Z+8	; 0x08
    14d6:	f1 85       	ldd	r31, Z+9	; 0x09
    14d8:	e0 2d       	mov	r30, r0
    14da:	09 95       	icall
    14dc:	89 2b       	or	r24, r25
    14de:	e1 f6       	brne	.-72     	; 0x1498 <fputc+0x10>
    14e0:	d8 01       	movw	r26, r16
    14e2:	16 96       	adiw	r26, 0x06	; 6
    14e4:	8d 91       	ld	r24, X+
    14e6:	9c 91       	ld	r25, X
    14e8:	17 97       	sbiw	r26, 0x07	; 7
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	17 96       	adiw	r26, 0x07	; 7
    14ee:	9c 93       	st	X, r25
    14f0:	8e 93       	st	-X, r24
    14f2:	16 97       	sbiw	r26, 0x06	; 6
    14f4:	ce 01       	movw	r24, r28
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	08 95       	ret

00001500 <__ultoa_invert>:
    1500:	fa 01       	movw	r30, r20
    1502:	aa 27       	eor	r26, r26
    1504:	28 30       	cpi	r18, 0x08	; 8
    1506:	51 f1       	breq	.+84     	; 0x155c <__ultoa_invert+0x5c>
    1508:	20 31       	cpi	r18, 0x10	; 16
    150a:	81 f1       	breq	.+96     	; 0x156c <__ultoa_invert+0x6c>
    150c:	e8 94       	clt
    150e:	6f 93       	push	r22
    1510:	6e 7f       	andi	r22, 0xFE	; 254
    1512:	6e 5f       	subi	r22, 0xFE	; 254
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	af 4f       	sbci	r26, 0xFF	; 255
    151c:	b1 e0       	ldi	r27, 0x01	; 1
    151e:	3e d0       	rcall	.+124    	; 0x159c <__ultoa_invert+0x9c>
    1520:	b4 e0       	ldi	r27, 0x04	; 4
    1522:	3c d0       	rcall	.+120    	; 0x159c <__ultoa_invert+0x9c>
    1524:	67 0f       	add	r22, r23
    1526:	78 1f       	adc	r23, r24
    1528:	89 1f       	adc	r24, r25
    152a:	9a 1f       	adc	r25, r26
    152c:	a1 1d       	adc	r26, r1
    152e:	68 0f       	add	r22, r24
    1530:	79 1f       	adc	r23, r25
    1532:	8a 1f       	adc	r24, r26
    1534:	91 1d       	adc	r25, r1
    1536:	a1 1d       	adc	r26, r1
    1538:	6a 0f       	add	r22, r26
    153a:	71 1d       	adc	r23, r1
    153c:	81 1d       	adc	r24, r1
    153e:	91 1d       	adc	r25, r1
    1540:	a1 1d       	adc	r26, r1
    1542:	20 d0       	rcall	.+64     	; 0x1584 <__ultoa_invert+0x84>
    1544:	09 f4       	brne	.+2      	; 0x1548 <__ultoa_invert+0x48>
    1546:	68 94       	set
    1548:	3f 91       	pop	r19
    154a:	2a e0       	ldi	r18, 0x0A	; 10
    154c:	26 9f       	mul	r18, r22
    154e:	11 24       	eor	r1, r1
    1550:	30 19       	sub	r19, r0
    1552:	30 5d       	subi	r19, 0xD0	; 208
    1554:	31 93       	st	Z+, r19
    1556:	de f6       	brtc	.-74     	; 0x150e <__ultoa_invert+0xe>
    1558:	cf 01       	movw	r24, r30
    155a:	08 95       	ret
    155c:	46 2f       	mov	r20, r22
    155e:	47 70       	andi	r20, 0x07	; 7
    1560:	40 5d       	subi	r20, 0xD0	; 208
    1562:	41 93       	st	Z+, r20
    1564:	b3 e0       	ldi	r27, 0x03	; 3
    1566:	0f d0       	rcall	.+30     	; 0x1586 <__ultoa_invert+0x86>
    1568:	c9 f7       	brne	.-14     	; 0x155c <__ultoa_invert+0x5c>
    156a:	f6 cf       	rjmp	.-20     	; 0x1558 <__ultoa_invert+0x58>
    156c:	46 2f       	mov	r20, r22
    156e:	4f 70       	andi	r20, 0x0F	; 15
    1570:	40 5d       	subi	r20, 0xD0	; 208
    1572:	4a 33       	cpi	r20, 0x3A	; 58
    1574:	18 f0       	brcs	.+6      	; 0x157c <__ultoa_invert+0x7c>
    1576:	49 5d       	subi	r20, 0xD9	; 217
    1578:	31 fd       	sbrc	r19, 1
    157a:	40 52       	subi	r20, 0x20	; 32
    157c:	41 93       	st	Z+, r20
    157e:	02 d0       	rcall	.+4      	; 0x1584 <__ultoa_invert+0x84>
    1580:	a9 f7       	brne	.-22     	; 0x156c <__ultoa_invert+0x6c>
    1582:	ea cf       	rjmp	.-44     	; 0x1558 <__ultoa_invert+0x58>
    1584:	b4 e0       	ldi	r27, 0x04	; 4
    1586:	a6 95       	lsr	r26
    1588:	97 95       	ror	r25
    158a:	87 95       	ror	r24
    158c:	77 95       	ror	r23
    158e:	67 95       	ror	r22
    1590:	ba 95       	dec	r27
    1592:	c9 f7       	brne	.-14     	; 0x1586 <__ultoa_invert+0x86>
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	61 05       	cpc	r22, r1
    1598:	71 05       	cpc	r23, r1
    159a:	08 95       	ret
    159c:	9b 01       	movw	r18, r22
    159e:	ac 01       	movw	r20, r24
    15a0:	0a 2e       	mov	r0, r26
    15a2:	06 94       	lsr	r0
    15a4:	57 95       	ror	r21
    15a6:	47 95       	ror	r20
    15a8:	37 95       	ror	r19
    15aa:	27 95       	ror	r18
    15ac:	ba 95       	dec	r27
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <__ultoa_invert+0xa2>
    15b0:	62 0f       	add	r22, r18
    15b2:	73 1f       	adc	r23, r19
    15b4:	84 1f       	adc	r24, r20
    15b6:	95 1f       	adc	r25, r21
    15b8:	a0 1d       	adc	r26, r0
    15ba:	08 95       	ret

000015bc <__prologue_saves__>:
    15bc:	2f 92       	push	r2
    15be:	3f 92       	push	r3
    15c0:	4f 92       	push	r4
    15c2:	5f 92       	push	r5
    15c4:	6f 92       	push	r6
    15c6:	7f 92       	push	r7
    15c8:	8f 92       	push	r8
    15ca:	9f 92       	push	r9
    15cc:	af 92       	push	r10
    15ce:	bf 92       	push	r11
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	ca 1b       	sub	r28, r26
    15e6:	db 0b       	sbc	r29, r27
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	09 94       	ijmp

000015f4 <__epilogue_restores__>:
    15f4:	2a 88       	ldd	r2, Y+18	; 0x12
    15f6:	39 88       	ldd	r3, Y+17	; 0x11
    15f8:	48 88       	ldd	r4, Y+16	; 0x10
    15fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    15fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    15fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1600:	8c 84       	ldd	r8, Y+12	; 0x0c
    1602:	9b 84       	ldd	r9, Y+11	; 0x0b
    1604:	aa 84       	ldd	r10, Y+10	; 0x0a
    1606:	b9 84       	ldd	r11, Y+9	; 0x09
    1608:	c8 84       	ldd	r12, Y+8	; 0x08
    160a:	df 80       	ldd	r13, Y+7	; 0x07
    160c:	ee 80       	ldd	r14, Y+6	; 0x06
    160e:	fd 80       	ldd	r15, Y+5	; 0x05
    1610:	0c 81       	ldd	r16, Y+4	; 0x04
    1612:	1b 81       	ldd	r17, Y+3	; 0x03
    1614:	aa 81       	ldd	r26, Y+2	; 0x02
    1616:	b9 81       	ldd	r27, Y+1	; 0x01
    1618:	ce 0f       	add	r28, r30
    161a:	d1 1d       	adc	r29, r1
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	ed 01       	movw	r28, r26
    1628:	08 95       	ret

0000162a <_exit>:
    162a:	f8 94       	cli

0000162c <__stop_program>:
    162c:	ff cf       	rjmp	.-2      	; 0x162c <__stop_program>
