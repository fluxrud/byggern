
byggern_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f4  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000722  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d2  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  80:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <init_pin_directions>:
#include "utilities.h"

void init_pin_directions()
{
	// set PORTB PIN0 direction as output
	DDRB = (1<<DDB0);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	08 95       	ret

0000008e <main>:
}

int main(void)
{
    init_pin_directions();
  8e:	0e 94 44 00 	call	0x88	; 0x88 <init_pin_directions>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	8f e7       	ldi	r24, 0x7F	; 127
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x14>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x16>
    while (1) 
    {
		_delay_ms(100);
		//i = !i;
		//PORTB = (i<<PB0);
		toggle_pin('B', 0);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 57 00 	call	0xae	; 0xae <toggle_pin>
  ac:	f2 cf       	rjmp	.-28     	; 0x92 <main+0x4>

000000ae <toggle_pin>:

#include "pin_util.h"

void toggle_pin(char port, uint8_t pin)
{
	if(pin > 7){
  ae:	68 30       	cpi	r22, 0x08	; 8
  b0:	08 f0       	brcs	.+2      	; 0xb4 <toggle_pin+0x6>
  b2:	88 c0       	rjmp	.+272    	; 0x1c4 <toggle_pin+0x116>
		// too high pin number
		return;
	}
	
	switch (port)
  b4:	82 34       	cpi	r24, 0x42	; 66
  b6:	51 f1       	breq	.+84     	; 0x10c <toggle_pin+0x5e>
  b8:	18 f4       	brcc	.+6      	; 0xc0 <toggle_pin+0x12>
  ba:	81 34       	cpi	r24, 0x41	; 65
  bc:	41 f0       	breq	.+16     	; 0xce <toggle_pin+0x20>
  be:	08 95       	ret
  c0:	83 34       	cpi	r24, 0x43	; 67
  c2:	09 f4       	brne	.+2      	; 0xc6 <toggle_pin+0x18>
  c4:	42 c0       	rjmp	.+132    	; 0x14a <toggle_pin+0x9c>
  c6:	84 34       	cpi	r24, 0x44	; 68
  c8:	09 f4       	brne	.+2      	; 0xcc <toggle_pin+0x1e>
  ca:	5e c0       	rjmp	.+188    	; 0x188 <toggle_pin+0xda>
  cc:	08 95       	ret
	{
		unsigned char reg;
		uint8_t pin_value;
		case 'A':
			reg = PINA;
  ce:	89 b3       	in	r24, 0x19	; 25
			// 0000x000
			// 0000000x & 00000001
			pin_value = (reg>>pin)&1;
  d0:	28 2f       	mov	r18, r24
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	06 2e       	mov	r0, r22
  d6:	02 c0       	rjmp	.+4      	; 0xdc <toggle_pin+0x2e>
  d8:	35 95       	asr	r19
  da:	27 95       	ror	r18
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <toggle_pin+0x2a>
			// reg = xxxxxxxx
			// set_bit(reg, 2)
			// reg = xxxxx1xx
			if (pin_value){
  e0:	20 ff       	sbrs	r18, 0
  e2:	0a c0       	rjmp	.+20     	; 0xf8 <toggle_pin+0x4a>
				clear_bit(reg, pin);
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <toggle_pin+0x40>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <toggle_pin+0x3c>
  f2:	20 95       	com	r18
  f4:	82 23       	and	r24, r18
  f6:	08 c0       	rjmp	.+16     	; 0x108 <toggle_pin+0x5a>
			} else {
				set_bit(reg, pin);
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <toggle_pin+0x54>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <toggle_pin+0x50>
 106:	82 2b       	or	r24, r18
			}
			PORTA = reg;
 108:	8b bb       	out	0x1b, r24	; 27
			break;
 10a:	08 95       	ret
		case 'B':
			reg = PINB;
 10c:	86 b3       	in	r24, 0x16	; 22
			pin_value = (reg>>pin)&1;
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	06 2e       	mov	r0, r22
 114:	02 c0       	rjmp	.+4      	; 0x11a <toggle_pin+0x6c>
 116:	35 95       	asr	r19
 118:	27 95       	ror	r18
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <toggle_pin+0x68>
			if (pin_value){
 11e:	20 ff       	sbrs	r18, 0
 120:	0a c0       	rjmp	.+20     	; 0x136 <toggle_pin+0x88>
				clear_bit(reg, pin);
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <toggle_pin+0x7e>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <toggle_pin+0x7a>
 130:	20 95       	com	r18
 132:	82 23       	and	r24, r18
 134:	08 c0       	rjmp	.+16     	; 0x146 <toggle_pin+0x98>
			} else {
				set_bit(reg, pin);
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <toggle_pin+0x92>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <toggle_pin+0x8e>
 144:	82 2b       	or	r24, r18
			}
			PORTB = reg;
 146:	88 bb       	out	0x18, r24	; 24
			break;
 148:	08 95       	ret
		case 'C':
			reg = PINC;
 14a:	83 b3       	in	r24, 0x13	; 19
			pin_value = (reg>>pin)&1;
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	06 2e       	mov	r0, r22
 152:	02 c0       	rjmp	.+4      	; 0x158 <toggle_pin+0xaa>
 154:	35 95       	asr	r19
 156:	27 95       	ror	r18
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <toggle_pin+0xa6>
			if (pin_value){
 15c:	20 ff       	sbrs	r18, 0
 15e:	0a c0       	rjmp	.+20     	; 0x174 <toggle_pin+0xc6>
				clear_bit(reg, pin);
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <toggle_pin+0xbc>
 166:	22 0f       	add	r18, r18
 168:	33 1f       	adc	r19, r19
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <toggle_pin+0xb8>
 16e:	20 95       	com	r18
 170:	82 23       	and	r24, r18
 172:	08 c0       	rjmp	.+16     	; 0x184 <toggle_pin+0xd6>
			} else {
				set_bit(reg, pin);
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <toggle_pin+0xd0>
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <toggle_pin+0xcc>
 182:	82 2b       	or	r24, r18
			}
			PORTC = reg;
 184:	85 bb       	out	0x15, r24	; 21
			break;
 186:	08 95       	ret
		case 'D':
			reg = PIND;
 188:	80 b3       	in	r24, 0x10	; 16
			pin_value = (reg>>pin)&1;
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	06 2e       	mov	r0, r22
 190:	02 c0       	rjmp	.+4      	; 0x196 <toggle_pin+0xe8>
 192:	35 95       	asr	r19
 194:	27 95       	ror	r18
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <toggle_pin+0xe4>
			if (pin_value){
 19a:	20 ff       	sbrs	r18, 0
 19c:	0a c0       	rjmp	.+20     	; 0x1b2 <toggle_pin+0x104>
				clear_bit(reg, pin);
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <toggle_pin+0xfa>
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <toggle_pin+0xf6>
 1ac:	20 95       	com	r18
 1ae:	82 23       	and	r24, r18
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <toggle_pin+0x114>
			} else {
				set_bit(reg, pin);
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <toggle_pin+0x10e>
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <toggle_pin+0x10a>
 1c0:	82 2b       	or	r24, r18
			}
			PORTD = reg;
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
