
byggern_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000288  00800100  000016cc  00001760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800388  00800388  000019e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fbf  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4c  00000000  00000000  00004cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001402  00000000  00000000  00005a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000730  00000000  00000000  00006e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3d  00000000  00000000  00007548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001302  00000000  00000000  00007f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00009287  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_1>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_3>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_8>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	13 e0       	ldi	r17, 0x03	; 3
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ec ec       	ldi	r30, 0xCC	; 204
     200:	f6 e1       	ldi	r31, 0x16	; 22
     202:	02 c0       	rjmp	.+4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a8 38       	cpi	r26, 0x88	; 136
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>

0000020e <__do_clear_bss>:
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	a8 e8       	ldi	r26, 0x88	; 136
     212:	b3 e0       	ldi	r27, 0x03	; 3
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	aa 39       	cpi	r26, 0x9A	; 154
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <main>
     222:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <set_ctc_mode>:
	i = TCNTn;
	/* Restore Global Interrupt Flag */
	//SREG = sreg;
	sei();
	return i;
}
     22a:	eb e8       	ldi	r30, 0x8B	; 139
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	8e 7f       	andi	r24, 0xFE	; 254
     232:	80 83       	st	Z, r24
     234:	80 81       	ld	r24, Z
     236:	8d 7f       	andi	r24, 0xFD	; 253
     238:	80 83       	st	Z, r24
     23a:	ea e8       	ldi	r30, 0x8A	; 138
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	88 60       	ori	r24, 0x08	; 8
     242:	80 83       	st	Z, r24
     244:	80 81       	ld	r24, Z
     246:	8f 7e       	andi	r24, 0xEF	; 239
     248:	80 83       	st	Z, r24
     24a:	08 95       	ret

0000024c <set_selected_clock>:
     24c:	ea e8       	ldi	r30, 0x8A	; 138
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	81 60       	ori	r24, 0x01	; 1
     254:	80 83       	st	Z, r24
     256:	80 81       	ld	r24, Z
     258:	8d 7f       	andi	r24, 0xFD	; 253
     25a:	80 83       	st	Z, r24
     25c:	80 81       	ld	r24, Z
     25e:	8b 7f       	andi	r24, 0xFB	; 251
     260:	80 83       	st	Z, r24
     262:	08 95       	ret

00000264 <set_compare_match_mode>:
     264:	eb e8       	ldi	r30, 0x8B	; 139
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	80 83       	st	Z, r24
     26e:	80 81       	ld	r24, Z
     270:	8f 77       	andi	r24, 0x7F	; 127
     272:	80 83       	st	Z, r24
     274:	08 95       	ret

00000276 <init_pwm>:
     276:	81 b3       	in	r24, 0x11	; 17
     278:	80 61       	ori	r24, 0x10	; 16
     27a:	81 bb       	out	0x11, r24	; 17
     27c:	0e 94 15 01 	call	0x22a	; 0x22a <set_ctc_mode>
     280:	0e 94 26 01 	call	0x24c	; 0x24c <set_selected_clock>
     284:	0e 94 32 01 	call	0x264	; 0x264 <set_compare_match_mode>
     288:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
     28c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
     290:	08 95       	ret

00000292 <read_adc>:
     292:	e0 e0       	ldi	r30, 0x00	; 0
     294:	f4 e1       	ldi	r31, 0x14	; 20
     296:	10 82       	st	Z, r1
     298:	82 e6       	ldi	r24, 0x62	; 98
     29a:	8a 95       	dec	r24
     29c:	f1 f7       	brne	.-4      	; 0x29a <read_adc+0x8>
     29e:	00 00       	nop
     2a0:	60 81       	ld	r22, Z
     2a2:	70 91 01 14 	lds	r23, 0x1401	; 0x801401 <__bss_end+0x1067>
     2a6:	80 91 02 14 	lds	r24, 0x1402	; 0x801402 <__bss_end+0x1068>
     2aa:	90 91 03 14 	lds	r25, 0x1403	; 0x801403 <__bss_end+0x1069>
     2ae:	08 95       	ret

000002b0 <init_adc>:
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <init_adc+0x10>
     2b6:	20 e1       	ldi	r18, 0x10	; 16
     2b8:	28 0f       	add	r18, r24
     2ba:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x1066>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	88 30       	cpi	r24, 0x08	; 8
     2c2:	91 05       	cpc	r25, r1
     2c4:	c4 f3       	brlt	.-16     	; 0x2b6 <init_adc+0x6>
     2c6:	08 95       	ret

000002c8 <get_joystick_analog>:
     2c8:	0e 94 49 01 	call	0x292	; 0x292 <read_adc>
     2cc:	96 2f       	mov	r25, r22
     2ce:	87 2f       	mov	r24, r23
     2d0:	08 95       	ret

000002d2 <get_joystick_direction>:
     2d2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <get_joystick_analog>
     2d6:	84 31       	cpi	r24, 0x14	; 20
     2d8:	78 f0       	brcs	.+30     	; 0x2f8 <get_joystick_direction+0x26>
     2da:	28 2f       	mov	r18, r24
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	2c 3e       	cpi	r18, 0xEC	; 236
     2e0:	31 05       	cpc	r19, r1
     2e2:	6c f4       	brge	.+26     	; 0x2fe <get_joystick_direction+0x2c>
     2e4:	94 31       	cpi	r25, 0x14	; 20
     2e6:	70 f0       	brcs	.+28     	; 0x304 <get_joystick_direction+0x32>
     2e8:	89 2f       	mov	r24, r25
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	8c 3e       	cpi	r24, 0xEC	; 236
     2ee:	91 05       	cpc	r25, r1
     2f0:	64 f4       	brge	.+24     	; 0x30a <get_joystick_direction+0x38>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	08 95       	ret
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	08 95       	ret
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	08 95       	ret
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	08 95       	ret
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	08 95       	ret

00000310 <get_slider_right_analog>:
     310:	0e 94 49 01 	call	0x292	; 0x292 <read_adc>
     314:	08 95       	ret

00000316 <get_slider_left_analog>:
     316:	0e 94 49 01 	call	0x292	; 0x292 <read_adc>
     31a:	89 2f       	mov	r24, r25
     31c:	08 95       	ret

0000031e <goal>:
     31e:	87 e3       	ldi	r24, 0x37	; 55
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	9f 93       	push	r25
     324:	8f 93       	push	r24
     326:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     32a:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <num_goals>
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <num_goals>
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	08 95       	ret

0000033a <display_game>:
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	0e 94 a9 05 	call	0xb52	; 0xb52 <oled_fill_entire>
     340:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <title>
     344:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <title+0x1>
     348:	fc 01       	movw	r30, r24
     34a:	01 90       	ld	r0, Z+
     34c:	00 20       	and	r0, r0
     34e:	e9 f7       	brne	.-6      	; 0x34a <display_game+0x10>
     350:	31 97       	sbiw	r30, 0x01	; 1
     352:	bf 01       	movw	r22, r30
     354:	68 1b       	sub	r22, r24
     356:	79 0b       	sbc	r23, r25
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	0e 94 00 06 	call	0xc00	; 0xc00 <oled_write_string_on_line>
     35e:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <num_goals>
     362:	80 5d       	subi	r24, 0xD0	; 208
     364:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <title+0xec>
     368:	41 e0       	ldi	r20, 0x01	; 1
     36a:	61 e1       	ldi	r22, 0x11	; 17
     36c:	82 ee       	ldi	r24, 0xE2	; 226
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 00 06 	call	0xc00	; 0xc00 <oled_write_string_on_line>
     374:	08 95       	ret

00000376 <draw_selected_arrow>:
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <oled_goto_page>
     37e:	8a e7       	ldi	r24, 0x7A	; 122
     380:	0e 94 84 05 	call	0xb08	; 0xb08 <oled_goto_col>
     384:	c0 e0       	ldi	r28, 0x00	; 0
     386:	d0 e0       	ldi	r29, 0x00	; 0
     388:	07 c0       	rjmp	.+14     	; 0x398 <draw_selected_arrow+0x22>
     38a:	fe 01       	movw	r30, r28
     38c:	e5 59       	subi	r30, 0x95	; 149
     38e:	fc 4f       	sbci	r31, 0xFC	; 252
     390:	80 81       	ld	r24, Z
     392:	0e 94 9a 05 	call	0xb34	; 0xb34 <oled_write>
     396:	21 96       	adiw	r28, 0x01	; 1
     398:	c6 30       	cpi	r28, 0x06	; 6
     39a:	d1 05       	cpc	r29, r1
     39c:	b4 f3       	brlt	.-20     	; 0x38a <draw_selected_arrow+0x14>
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <oled_menu_display>:
     3a4:	cf 93       	push	r28
     3a6:	c0 e0       	ldi	r28, 0x00	; 0
     3a8:	1f c0       	rjmp	.+62     	; 0x3e8 <oled_menu_display+0x44>
     3aa:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <top_item>
     3ae:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <top_item+0x1>
     3b2:	8c 0f       	add	r24, r28
     3b4:	91 1d       	adc	r25, r1
     3b6:	8a 30       	cpi	r24, 0x0A	; 10
     3b8:	91 05       	cpc	r25, r1
     3ba:	44 f4       	brge	.+16     	; 0x3cc <oled_menu_display+0x28>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	fc 01       	movw	r30, r24
     3c2:	e9 5a       	subi	r30, 0xA9	; 169
     3c4:	fc 4f       	sbci	r31, 0xFC	; 252
     3c6:	80 81       	ld	r24, Z
     3c8:	91 81       	ldd	r25, Z+1	; 0x01
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <oled_menu_display+0x2c>
     3cc:	84 ef       	ldi	r24, 0xF4	; 244
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	fc 01       	movw	r30, r24
     3d2:	01 90       	ld	r0, Z+
     3d4:	00 20       	and	r0, r0
     3d6:	e9 f7       	brne	.-6      	; 0x3d2 <oled_menu_display+0x2e>
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	bf 01       	movw	r22, r30
     3dc:	68 1b       	sub	r22, r24
     3de:	79 0b       	sbc	r23, r25
     3e0:	4c 2f       	mov	r20, r28
     3e2:	0e 94 00 06 	call	0xc00	; 0xc00 <oled_write_string_on_line>
     3e6:	cf 5f       	subi	r28, 0xFF	; 255
     3e8:	c8 30       	cpi	r28, 0x08	; 8
     3ea:	f8 f2       	brcs	.-66     	; 0x3aa <oled_menu_display+0x6>
     3ec:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <__data_end>
     3f0:	0e 94 bb 01 	call	0x376	; 0x376 <draw_selected_arrow>
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <oled_menu_scroll_up>:
     3f8:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <top_item>
     3fc:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <top_item+0x1>
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <top_item+0x1>
     406:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <top_item>
     40a:	99 23       	and	r25, r25
     40c:	24 f4       	brge	.+8      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     40e:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <top_item+0x1>
     412:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <top_item>
     416:	08 95       	ret

00000418 <oled_menu_scroll_down>:
     418:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <top_item>
     41c:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <top_item+0x1>
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <top_item+0x1>
     426:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <top_item>
     42a:	09 97       	sbiw	r24, 0x09	; 9
     42c:	34 f0       	brlt	.+12     	; 0x43a <oled_menu_scroll_down+0x22>
     42e:	88 e0       	ldi	r24, 0x08	; 8
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <top_item+0x1>
     436:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <top_item>
     43a:	08 95       	ret

0000043c <oled_menu_sel_down>:
     43c:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <__data_end>
     440:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <__data_end+0x1>
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <__data_end+0x1>
     44a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <__data_end>
     44e:	08 97       	sbiw	r24, 0x08	; 8
     450:	44 f0       	brlt	.+16     	; 0x462 <oled_menu_sel_down+0x26>
     452:	0e 94 0c 02 	call	0x418	; 0x418 <oled_menu_scroll_down>
     456:	87 e0       	ldi	r24, 0x07	; 7
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <__data_end+0x1>
     45e:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <__data_end>
     462:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <oled_menu_display>
     466:	08 95       	ret

00000468 <oled_menu_sel_up>:
     468:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <__data_end>
     46c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <__data_end+0x1>
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <__data_end+0x1>
     476:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <__data_end>
     47a:	99 23       	and	r25, r25
     47c:	34 f4       	brge	.+12     	; 0x48a <oled_menu_sel_up+0x22>
     47e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <oled_menu_scroll_up>
     482:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <__data_end+0x1>
     486:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <__data_end>
     48a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <oled_menu_display>
     48e:	08 95       	ret

00000490 <oled_menu_sel_right>:
     490:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <__data_end>
     494:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <__data_end+0x1>
     498:	89 2b       	or	r24, r25
     49a:	59 f4       	brne	.+22     	; 0x4b2 <oled_menu_sel_right+0x22>
     49c:	89 ef       	ldi	r24, 0xF9	; 249
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <game_has_started>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	08 95       	ret

000004b4 <oled_menu_sel_left>:
     4b4:	85 e0       	ldi	r24, 0x05	; 5
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	9f 93       	push	r25
     4ba:	8f 93       	push	r24
     4bc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     4c0:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <game_has_started>
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	08 95       	ret

000004ca <SPI_MasterTransmit>:
     4ca:	8f b9       	out	0x0f, r24	; 15
     4cc:	77 9b       	sbis	0x0e, 7	; 14
     4ce:	fe cf       	rjmp	.-4      	; 0x4cc <SPI_MasterTransmit+0x2>
     4d0:	08 95       	ret

000004d2 <SPI_MasterTrancieve>:
     4d2:	8f b9       	out	0x0f, r24	; 15
     4d4:	77 9b       	sbis	0x0e, 7	; 14
     4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <SPI_MasterTrancieve+0x2>
     4d8:	8f b1       	in	r24, 0x0f	; 15
     4da:	08 95       	ret

000004dc <SPI_set_slave_select>:
     4dc:	86 b3       	in	r24, 0x16	; 22
     4de:	8f 7e       	andi	r24, 0xEF	; 239
     4e0:	88 bb       	out	0x18, r24	; 24
     4e2:	08 95       	ret

000004e4 <SPI_clear_slave_select>:
     4e4:	86 b3       	in	r24, 0x16	; 22
     4e6:	80 61       	ori	r24, 0x10	; 16
     4e8:	88 bb       	out	0x18, r24	; 24
     4ea:	08 95       	ret

000004ec <SPI_MasterInit>:
     4ec:	87 b3       	in	r24, 0x17	; 23
     4ee:	80 62       	ori	r24, 0x20	; 32
     4f0:	87 bb       	out	0x17, r24	; 23
     4f2:	87 b3       	in	r24, 0x17	; 23
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	87 bb       	out	0x17, r24	; 23
     4f8:	87 b3       	in	r24, 0x17	; 23
     4fa:	80 61       	ori	r24, 0x10	; 16
     4fc:	87 bb       	out	0x17, r24	; 23
     4fe:	87 b3       	in	r24, 0x17	; 23
     500:	8f 7b       	andi	r24, 0xBF	; 191
     502:	87 bb       	out	0x17, r24	; 23
     504:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_clear_slave_select>
     508:	83 e5       	ldi	r24, 0x53	; 83
     50a:	8d b9       	out	0x0d, r24	; 13
     50c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_clear_slave_select>
     510:	08 95       	ret

00000512 <mcp2515_read>:
     512:	cf 93       	push	r28
     514:	c8 2f       	mov	r28, r24
     516:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_set_slave_select>
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     520:	8c 2f       	mov	r24, r28
     522:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     526:	8f e0       	ldi	r24, 0x0F	; 15
     528:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPI_MasterTrancieve>
     52c:	c8 2f       	mov	r28, r24
     52e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_clear_slave_select>
     532:	8c 2f       	mov	r24, r28
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <mcp2515_write>:
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	d8 2f       	mov	r29, r24
     53e:	c6 2f       	mov	r28, r22
     540:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_set_slave_select>
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     54a:	8d 2f       	mov	r24, r29
     54c:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     550:	8c 2f       	mov	r24, r28
     552:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     556:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_clear_slave_select>
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <mcp2515_send_req>:
     560:	cf 93       	push	r28
     562:	c8 2f       	mov	r28, r24
     564:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_set_slave_select>
     568:	c8 30       	cpi	r28, 0x08	; 8
     56a:	30 f4       	brcc	.+12     	; 0x578 <mcp2515_send_req+0x18>
     56c:	80 e8       	ldi	r24, 0x80	; 128
     56e:	8c 0f       	add	r24, r28
     570:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     574:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_clear_slave_select>
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <mcp2515_bit_mod>:
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	18 2f       	mov	r17, r24
     584:	d6 2f       	mov	r29, r22
     586:	c4 2f       	mov	r28, r20
     588:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_set_slave_select>
     58c:	85 e0       	ldi	r24, 0x05	; 5
     58e:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     592:	81 2f       	mov	r24, r17
     594:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     598:	8d 2f       	mov	r24, r29
     59a:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     59e:	8c 2f       	mov	r24, r28
     5a0:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     5a4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_clear_slave_select>
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	08 95       	ret

000005b0 <mcp2515_reset>:
     5b0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_set_slave_select>
     5b4:	80 ec       	ldi	r24, 0xC0	; 192
     5b6:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_MasterTransmit>
     5ba:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_clear_slave_select>
     5be:	08 95       	ret

000005c0 <can_interrupt_enable>:
     5c0:	8a b7       	in	r24, 0x3a	; 58
     5c2:	80 64       	ori	r24, 0x40	; 64
     5c4:	8a bf       	out	0x3a, r24	; 58
     5c6:	8b b7       	in	r24, 0x3b	; 59
     5c8:	80 64       	ori	r24, 0x40	; 64
     5ca:	8b bf       	out	0x3b, r24	; 59
     5cc:	85 b7       	in	r24, 0x35	; 53
     5ce:	82 60       	ori	r24, 0x02	; 2
     5d0:	85 bf       	out	0x35, r24	; 53
     5d2:	85 b7       	in	r24, 0x35	; 53
     5d4:	8e 7f       	andi	r24, 0xFE	; 254
     5d6:	85 bf       	out	0x35, r24	; 53
     5d8:	78 94       	sei
     5da:	08 95       	ret

000005dc <can_set_config_mode>:
     5dc:	48 2f       	mov	r20, r24
     5de:	60 ee       	ldi	r22, 0xE0	; 224
     5e0:	8f e0       	ldi	r24, 0x0F	; 15
     5e2:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     5e6:	08 95       	ret

000005e8 <init_can>:
     5e8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <can_interrupt_enable>
     5ec:	43 e0       	ldi	r20, 0x03	; 3
     5ee:	6f ef       	ldi	r22, 0xFF	; 255
     5f0:	8a e2       	ldi	r24, 0x2A	; 42
     5f2:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     5f6:	41 eb       	ldi	r20, 0xB1	; 177
     5f8:	6f ef       	ldi	r22, 0xFF	; 255
     5fa:	89 e2       	ldi	r24, 0x29	; 41
     5fc:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     600:	45 e0       	ldi	r20, 0x05	; 5
     602:	6f ef       	ldi	r22, 0xFF	; 255
     604:	88 e2       	ldi	r24, 0x28	; 40
     606:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     60a:	48 e0       	ldi	r20, 0x08	; 8
     60c:	68 e0       	ldi	r22, 0x08	; 8
     60e:	8f e0       	ldi	r24, 0x0F	; 15
     610:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 ee 02 	call	0x5dc	; 0x5dc <can_set_config_mode>
     61a:	43 e0       	ldi	r20, 0x03	; 3
     61c:	63 e0       	ldi	r22, 0x03	; 3
     61e:	8b e2       	ldi	r24, 0x2B	; 43
     620:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     624:	40 e2       	ldi	r20, 0x20	; 32
     626:	60 e2       	ldi	r22, 0x20	; 32
     628:	8b e2       	ldi	r24, 0x2B	; 43
     62a:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     62e:	40 e6       	ldi	r20, 0x60	; 96
     630:	60 e6       	ldi	r22, 0x60	; 96
     632:	80 e6       	ldi	r24, 0x60	; 96
     634:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     638:	08 95       	ret

0000063a <can_transmit_tx_buf0>:
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	c6 2f       	mov	r28, r22
     646:	f7 2e       	mov	r15, r23
     648:	08 2f       	mov	r16, r24
     64a:	19 2f       	mov	r17, r25
     64c:	66 95       	lsr	r22
     64e:	66 95       	lsr	r22
     650:	66 95       	lsr	r22
     652:	81 e3       	ldi	r24, 0x31	; 49
     654:	0e 94 9c 02 	call	0x538	; 0x538 <mcp2515_write>
     658:	6c 2f       	mov	r22, r28
     65a:	62 95       	swap	r22
     65c:	66 0f       	add	r22, r22
     65e:	60 7e       	andi	r22, 0xE0	; 224
     660:	68 5f       	subi	r22, 0xF8	; 248
     662:	82 e3       	ldi	r24, 0x32	; 50
     664:	0e 94 9c 02 	call	0x538	; 0x538 <mcp2515_write>
     668:	6f ef       	ldi	r22, 0xFF	; 255
     66a:	84 e3       	ldi	r24, 0x34	; 52
     66c:	0e 94 9c 02 	call	0x538	; 0x538 <mcp2515_write>
     670:	6f ef       	ldi	r22, 0xFF	; 255
     672:	83 e3       	ldi	r24, 0x33	; 51
     674:	0e 94 9c 02 	call	0x538	; 0x538 <mcp2515_write>
     678:	df 2d       	mov	r29, r15
     67a:	6f 2d       	mov	r22, r15
     67c:	85 e3       	ldi	r24, 0x35	; 53
     67e:	0e 94 9c 02 	call	0x538	; 0x538 <mcp2515_write>
     682:	c0 e0       	ldi	r28, 0x00	; 0
     684:	0b c0       	rjmp	.+22     	; 0x69c <can_transmit_tx_buf0+0x62>
     686:	80 2f       	mov	r24, r16
     688:	91 2f       	mov	r25, r17
     68a:	fc 01       	movw	r30, r24
     68c:	ec 0f       	add	r30, r28
     68e:	f1 1d       	adc	r31, r1
     690:	60 81       	ld	r22, Z
     692:	86 e3       	ldi	r24, 0x36	; 54
     694:	8c 0f       	add	r24, r28
     696:	0e 94 9c 02 	call	0x538	; 0x538 <mcp2515_write>
     69a:	cf 5f       	subi	r28, 0xFF	; 255
     69c:	cd 17       	cp	r28, r29
     69e:	10 f4       	brcc	.+4      	; 0x6a4 <can_transmit_tx_buf0+0x6a>
     6a0:	c8 30       	cpi	r28, 0x08	; 8
     6a2:	88 f3       	brcs	.-30     	; 0x686 <can_transmit_tx_buf0+0x4c>
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 b0 02 	call	0x560	; 0x560 <mcp2515_send_req>
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	08 95       	ret

000006b6 <can_read_rx_buf0>:
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	81 e6       	ldi	r24, 0x61	; 97
     6c6:	0e 94 89 02 	call	0x512	; 0x512 <mcp2515_read>
     6ca:	d8 2e       	mov	r13, r24
     6cc:	dd 0c       	add	r13, r13
     6ce:	dd 0c       	add	r13, r13
     6d0:	dd 0c       	add	r13, r13
     6d2:	82 e6       	ldi	r24, 0x62	; 98
     6d4:	0e 94 89 02 	call	0x512	; 0x512 <mcp2515_read>
     6d8:	82 95       	swap	r24
     6da:	86 95       	lsr	r24
     6dc:	87 70       	andi	r24, 0x07	; 7
     6de:	d8 0e       	add	r13, r24
     6e0:	85 e6       	ldi	r24, 0x65	; 101
     6e2:	0e 94 89 02 	call	0x512	; 0x512 <mcp2515_read>
     6e6:	d8 2f       	mov	r29, r24
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 f7 06 	call	0xdee	; 0xdee <malloc>
     6ee:	7c 01       	movw	r14, r24
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	0a c0       	rjmp	.+20     	; 0x708 <can_read_rx_buf0+0x52>
     6f4:	87 01       	movw	r16, r14
     6f6:	0c 0f       	add	r16, r28
     6f8:	11 1d       	adc	r17, r1
     6fa:	86 e6       	ldi	r24, 0x66	; 102
     6fc:	8c 0f       	add	r24, r28
     6fe:	0e 94 89 02 	call	0x512	; 0x512 <mcp2515_read>
     702:	f8 01       	movw	r30, r16
     704:	80 83       	st	Z, r24
     706:	cf 5f       	subi	r28, 0xFF	; 255
     708:	cd 17       	cp	r28, r29
     70a:	10 f4       	brcc	.+4      	; 0x710 <can_read_rx_buf0+0x5a>
     70c:	c8 30       	cpi	r28, 0x08	; 8
     70e:	90 f3       	brcs	.-28     	; 0x6f4 <can_read_rx_buf0+0x3e>
     710:	6d 2d       	mov	r22, r13
     712:	7d 2f       	mov	r23, r29
     714:	8e 2d       	mov	r24, r14
     716:	9f 2d       	mov	r25, r15
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	df 90       	pop	r13
     726:	08 95       	ret

00000728 <display_can_frame>:
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	d6 2f       	mov	r29, r22
     732:	c7 2f       	mov	r28, r23
     734:	08 2f       	mov	r16, r24
     736:	19 2f       	mov	r17, r25
     738:	8a e0       	ldi	r24, 0x0A	; 10
     73a:	92 e0       	ldi	r25, 0x02	; 2
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     744:	1f 92       	push	r1
     746:	df 93       	push	r29
     748:	85 e1       	ldi	r24, 0x15	; 21
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	9f 93       	push	r25
     74e:	8f 93       	push	r24
     750:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     754:	dc 2f       	mov	r29, r28
     756:	1f 92       	push	r1
     758:	cf 93       	push	r28
     75a:	81 e2       	ldi	r24, 0x21	; 33
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     766:	8d b7       	in	r24, 0x3d	; 61
     768:	9e b7       	in	r25, 0x3e	; 62
     76a:	0a 96       	adiw	r24, 0x0a	; 10
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	9e bf       	out	0x3e, r25	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	8d bf       	out	0x3d, r24	; 61
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	13 c0       	rjmp	.+38     	; 0x7a0 <display_can_frame+0x78>
     77a:	80 2f       	mov	r24, r16
     77c:	91 2f       	mov	r25, r17
     77e:	fc 01       	movw	r30, r24
     780:	ec 0f       	add	r30, r28
     782:	f1 1d       	adc	r31, r1
     784:	80 81       	ld	r24, Z
     786:	1f 92       	push	r1
     788:	8f 93       	push	r24
     78a:	8c e1       	ldi	r24, 0x1C	; 28
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	9f 93       	push	r25
     790:	8f 93       	push	r24
     792:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     796:	cf 5f       	subi	r28, 0xFF	; 255
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	cd 17       	cp	r28, r29
     7a2:	58 f3       	brcs	.-42     	; 0x77a <display_can_frame+0x52>
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <__vector_1>:
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	2f 93       	push	r18
     7ba:	3f 93       	push	r19
     7bc:	4f 93       	push	r20
     7be:	5f 93       	push	r21
     7c0:	6f 93       	push	r22
     7c2:	7f 93       	push	r23
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
     7cc:	cf 93       	push	r28
     7ce:	ef 93       	push	r30
     7d0:	ff 93       	push	r31
     7d2:	8e e0       	ldi	r24, 0x0E	; 14
     7d4:	0e 94 89 02 	call	0x512	; 0x512 <mcp2515_read>
     7d8:	8e 70       	andi	r24, 0x0E	; 14
     7da:	c8 2f       	mov	r28, r24
     7dc:	c6 95       	lsr	r28
     7de:	1f 92       	push	r1
     7e0:	cf 93       	push	r28
     7e2:	88 e3       	ldi	r24, 0x38	; 56
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	c1 30       	cpi	r28, 0x01	; 1
     7f8:	a9 f4       	brne	.+42     	; 0x824 <__vector_1+0x76>
     7fa:	8d e2       	ldi	r24, 0x2D	; 45
     7fc:	0e 94 89 02 	call	0x512	; 0x512 <mcp2515_read>
     800:	1f 92       	push	r1
     802:	8f 93       	push	r24
     804:	8e e4       	ldi	r24, 0x4E	; 78
     806:	92 e0       	ldi	r25, 0x02	; 2
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	61 e2       	ldi	r22, 0x21	; 33
     814:	8c e2       	ldi	r24, 0x2C	; 44
     816:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	1f c0       	rjmp	.+62     	; 0x862 <__vector_1+0xb4>
     824:	c6 30       	cpi	r28, 0x06	; 6
     826:	79 f4       	brne	.+30     	; 0x846 <__vector_1+0x98>
     828:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <can_read_rx_buf0>
     82c:	c6 2f       	mov	r28, r22
     82e:	0e 94 94 03 	call	0x728	; 0x728 <display_can_frame>
     832:	c2 30       	cpi	r28, 0x02	; 2
     834:	11 f4       	brne	.+4      	; 0x83a <__vector_1+0x8c>
     836:	0e 94 8f 01 	call	0x31e	; 0x31e <goal>
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	8c e2       	ldi	r24, 0x2C	; 44
     840:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     844:	0e c0       	rjmp	.+28     	; 0x862 <__vector_1+0xb4>
     846:	c7 30       	cpi	r28, 0x07	; 7
     848:	51 f4       	brne	.+20     	; 0x85e <__vector_1+0xb0>
     84a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <can_read_rx_buf0>
     84e:	0e 94 94 03 	call	0x728	; 0x728 <display_can_frame>
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	62 e0       	ldi	r22, 0x02	; 2
     856:	8c e2       	ldi	r24, 0x2C	; 44
     858:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     85c:	02 c0       	rjmp	.+4      	; 0x862 <__vector_1+0xb4>
     85e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <can_read_rx_buf0>
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	63 e0       	ldi	r22, 0x03	; 3
     866:	8c e2       	ldi	r24, 0x2C	; 44
     868:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	64 e0       	ldi	r22, 0x04	; 4
     870:	8c e2       	ldi	r24, 0x2C	; 44
     872:	0e 94 be 02 	call	0x57c	; 0x57c <mcp2515_bit_mod>
     876:	8a b7       	in	r24, 0x3a	; 58
     878:	80 64       	ori	r24, 0x40	; 64
     87a:	8a bf       	out	0x3a, r24	; 58
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	cf 91       	pop	r28
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <can_transmit>:
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	f8 2e       	mov	r15, r24
     8ac:	06 2f       	mov	r16, r22
     8ae:	14 2f       	mov	r17, r20
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 f7 06 	call	0xdee	; 0xdee <malloc>
     8b8:	ec 01       	movw	r28, r24
     8ba:	f8 82       	st	Y, r15
     8bc:	09 83       	std	Y+1, r16	; 0x01
     8be:	1a 83       	std	Y+2, r17	; 0x02
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	73 e0       	ldi	r23, 0x03	; 3
     8c4:	9d 2f       	mov	r25, r29
     8c6:	0e 94 1d 03 	call	0x63a	; 0x63a <can_transmit_tx_buf0>
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <free>
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	08 95       	ret

000008dc <__vector_3>:
     8dc:	1f 92       	push	r1
     8de:	0f 92       	push	r0
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	0f 92       	push	r0
     8e4:	11 24       	eor	r1, r1
     8e6:	2f 93       	push	r18
     8e8:	3f 93       	push	r19
     8ea:	4f 93       	push	r20
     8ec:	5f 93       	push	r21
     8ee:	6f 93       	push	r22
     8f0:	7f 93       	push	r23
     8f2:	8f 93       	push	r24
     8f4:	9f 93       	push	r25
     8f6:	af 93       	push	r26
     8f8:	bf 93       	push	r27
     8fa:	ef 93       	push	r30
     8fc:	ff 93       	push	r31
     8fe:	89 e6       	ldi	r24, 0x69	; 105
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	9f 93       	push	r25
     904:	8f 93       	push	r24
     906:	0e 94 63 08 	call	0x10c6	; 0x10c6 <printf>
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <__vector_8>:
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	2f 93       	push	r18
     93c:	3f 93       	push	r19
     93e:	4f 93       	push	r20
     940:	5f 93       	push	r21
     942:	6f 93       	push	r22
     944:	7f 93       	push	r23
     946:	8f 93       	push	r24
     948:	9f 93       	push	r25
     94a:	af 93       	push	r26
     94c:	bf 93       	push	r27
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ef 93       	push	r30
     954:	ff 93       	push	r31
     956:	0e 94 8b 01 	call	0x316	; 0x316 <get_slider_left_analog>
     95a:	d8 2f       	mov	r29, r24
     95c:	0e 94 88 01 	call	0x310	; 0x310 <get_slider_right_analog>
     960:	c8 2f       	mov	r28, r24
     962:	0e 94 69 01 	call	0x2d2	; 0x2d2 <get_joystick_direction>
     966:	4d 2f       	mov	r20, r29
     968:	6c 2f       	mov	r22, r28
     96a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <can_transmit>
     96e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     972:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     976:	ff 91       	pop	r31
     978:	ef 91       	pop	r30
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	bf 91       	pop	r27
     980:	af 91       	pop	r26
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	7f 91       	pop	r23
     988:	6f 91       	pop	r22
     98a:	5f 91       	pop	r21
     98c:	4f 91       	pop	r20
     98e:	3f 91       	pop	r19
     990:	2f 91       	pop	r18
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <init_pin_directions>:
#include "game.h"

void init_pin_directions()
{
	// set PORTB PIN0 direction as output
	set_bit(DDRB, DDB0);
     99c:	87 b3       	in	r24, 0x17	; 23
     99e:	81 60       	ori	r24, 0x01	; 1
     9a0:	87 bb       	out	0x17, r24	; 23
	// mcp transistor
	set_bit(DDRB, DDB1);
     9a2:	87 b3       	in	r24, 0x17	; 23
     9a4:	82 60       	ori	r24, 0x02	; 2
     9a6:	87 bb       	out	0x17, r24	; 23
	char reg = PINB;
     9a8:	86 b3       	in	r24, 0x16	; 22
	set_bit(reg, DDB1);
     9aa:	82 60       	ori	r24, 0x02	; 2
	PORTB = reg;
     9ac:	88 bb       	out	0x18, r24	; 24
     9ae:	08 95       	ret

000009b0 <init_ext_mem>:
}

void init_ext_mem()
{
	// enable XMEM
	set_bit(MCUCR, SRE);
     9b0:	85 b7       	in	r24, 0x35	; 53
     9b2:	80 68       	ori	r24, 0x80	; 128
     9b4:	85 bf       	out	0x35, r24	; 53
	// release 4 msb to jtag
	set_bit(SFIOR, XMM2);
     9b6:	80 b7       	in	r24, 0x30	; 48
     9b8:	80 62       	ori	r24, 0x20	; 32
     9ba:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     9bc:	80 b7       	in	r24, 0x30	; 48
     9be:	8f 7e       	andi	r24, 0xEF	; 239
     9c0:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     9c2:	80 b7       	in	r24, 0x30	; 48
     9c4:	87 7f       	andi	r24, 0xF7	; 247
     9c6:	80 bf       	out	0x30, r24	; 48
     9c8:	08 95       	ret

000009ca <main>:

void test_static_address();

int main(void)
{
    init_pin_directions();
     9ca:	0e 94 ce 04 	call	0x99c	; 0x99c <init_pin_directions>
	init_ext_mem();
     9ce:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <init_ext_mem>
	init_pwm();
     9d2:	0e 94 3b 01 	call	0x276	; 0x276 <init_pwm>
	USART_Init(MYUBRR);
     9d6:	8f e1       	ldi	r24, 0x1F	; 31
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 e5 06 	call	0xdca	; 0xdca <USART_Init>
	init_adc();
     9de:	0e 94 58 01 	call	0x2b0	; 0x2b0 <init_adc>
	init_oled();
     9e2:	0e 94 57 05 	call	0xaae	; 0xaae <init_oled>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e6:	23 e0       	ldi	r18, 0x03	; 3
     9e8:	2a 95       	dec	r18
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <main+0x1e>
     9ec:	00 00       	nop
	//init_can();
	//init_interrupt();
	
	
	_delay_us(2); // the MCP takes a maximum of 2 us to be ready for a reset
	SPI_MasterInit();
     9ee:	0e 94 76 02 	call	0x4ec	; 0x4ec <SPI_MasterInit>
	mcp2515_reset();
     9f2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <mcp2515_reset>
	
	// todo: change transmit and receive to int return, error handling?
	fdevopen(USART_Transmit, USART_Receive);
     9f6:	62 ef       	ldi	r22, 0xF2	; 242
     9f8:	76 e0       	ldi	r23, 0x06	; 6
     9fa:	8c ee       	ldi	r24, 0xEC	; 236
     9fc:	96 e0       	ldi	r25, 0x06	; 6
     9fe:	0e 94 18 08 	call	0x1030	; 0x1030 <fdevopen>
	
	// test functions
	//test_static_address();
	//SRAM_test();
	
	oled_fill_entire(0x0F);
     a02:	8f e0       	ldi	r24, 0x0F	; 15
     a04:	0e 94 a9 05 	call	0xb52	; 0xb52 <oled_fill_entire>
	// oled_goto_page(0);
	//printf("\n\r arrow = ");
	//oled_draw_arrow();
	
	//_delay_ms(10000);
	toggle_pin('B', 1);
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	82 e4       	ldi	r24, 0x42	; 66
     a0c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <toggle_pin>
	//_delay_ms(2000);
	//toggle_pin('B', 1);
	
	oled_write_string_on_line("string test", strlen("string test"), 0);
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	6b e0       	ldi	r22, 0x0B	; 11
     a14:	8f e6       	ldi	r24, 0x6F	; 111
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	0e 94 00 06 	call	0xc00	; 0xc00 <oled_write_string_on_line>
	
	//mcp2515_reset();
	//_delay_ms(1000);
	
	//init_timer();
	init_can();
     a1c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <init_can>
	
	//can_set_config_mode(MODE_LOOPBACK);
	
	uint8_t slider_value = get_slider_right_analog();
     a20:	0e 94 88 01 	call	0x310	; 0x310 <get_slider_right_analog>
		//oled_write_char((unsigned char)'a', 8);
		//oled_fill_entire();
		// display_adc_info(); // using printf
		
		/* OLED */
		if (game_has_started == 0){
     a24:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <game_has_started>
     a28:	81 11       	cpse	r24, r1
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <main+0x68>
			oled_menu_display();
     a2c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <oled_menu_display>
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <main+0x6c>
		} else {
			display_game();
     a32:	0e 94 9d 01 	call	0x33a	; 0x33a <display_game>
		}
		
		
		/* JOYSTICK TX */
		switch (get_joystick_direction())
     a36:	0e 94 69 01 	call	0x2d2	; 0x2d2 <get_joystick_direction>
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	91 05       	cpc	r25, r1
     a3e:	69 f0       	breq	.+26     	; 0xa5a <main+0x90>
     a40:	1c f4       	brge	.+6      	; 0xa48 <main+0x7e>
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	39 f0       	breq	.+14     	; 0xa54 <main+0x8a>
     a46:	15 c0       	rjmp	.+42     	; 0xa72 <main+0xa8>
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	91 05       	cpc	r25, r1
     a4c:	49 f0       	breq	.+18     	; 0xa60 <main+0x96>
     a4e:	04 97       	sbiw	r24, 0x04	; 4
     a50:	61 f0       	breq	.+24     	; 0xa6a <main+0xa0>
     a52:	0f c0       	rjmp	.+30     	; 0xa72 <main+0xa8>
		{
			case DOWN:
				oled_menu_sel_down();
     a54:	0e 94 1e 02 	call	0x43c	; 0x43c <oled_menu_sel_down>
				//can_transmit(0x1f, 1);
				break;
     a58:	0c c0       	rjmp	.+24     	; 0xa72 <main+0xa8>
			case UP:
				oled_menu_sel_up();
     a5a:	0e 94 34 02 	call	0x468	; 0x468 <oled_menu_sel_up>
				//can_transmit(0x1f, 2);
				break;
     a5e:	09 c0       	rjmp	.+18     	; 0xa72 <main+0xa8>
			case RIGHT:
				oled_menu_sel_right();
     a60:	0e 94 48 02 	call	0x490	; 0x490 <oled_menu_sel_right>
				init_oled();
     a64:	0e 94 57 05 	call	0xaae	; 0xaae <init_oled>
				//can_transmit(0x1f, 3);
				break;
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <main+0xa8>
			case LEFT:
				//can_transmit(0x1f, 4);
				oled_menu_sel_left();
     a6a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <oled_menu_sel_left>
				init_oled();
     a6e:	0e 94 57 05 	call	0xaae	; 0xaae <init_oled>
				break;
			default:
				break;
		}
		
		can_transmit((uint8_t)get_joystick_direction(), (uint8_t)get_slider_right_analog(), (uint8_t)get_slider_left_analog());
     a72:	0e 94 8b 01 	call	0x316	; 0x316 <get_slider_left_analog>
     a76:	d8 2f       	mov	r29, r24
     a78:	0e 94 88 01 	call	0x310	; 0x310 <get_slider_right_analog>
     a7c:	c8 2f       	mov	r28, r24
     a7e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <get_joystick_direction>
     a82:	4d 2f       	mov	r20, r29
     a84:	6c 2f       	mov	r22, r28
     a86:	0e 94 50 04 	call	0x8a0	; 0x8a0 <can_transmit>
		
		/* RIGHT SLIDER TX */
		uint8_t n_slider_value = get_slider_right_analog();
     a8a:	0e 94 88 01 	call	0x310	; 0x310 <get_slider_right_analog>
			can_transmit(0x3f, l_slider_val);
		}
		slider_value = n_slider_value;
		*/
		/* OLED RENDER */
		oled_render();
     a8e:	0e 94 31 06 	call	0xc62	; 0xc62 <oled_render>
		
		//print_game();
		//display_can_frame(msg);
		
		/* LOOP PERIOD AND LED */
		toggle_pin('B', 0);
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	82 e4       	ldi	r24, 0x42	; 66
     a96:	0e 94 59 06 	call	0xcb2	; 0xcb2 <toggle_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	9f e7       	ldi	r25, 0x7F	; 127
     a9e:	21 e0       	ldi	r18, 0x01	; 1
     aa0:	81 50       	subi	r24, 0x01	; 1
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	20 40       	sbci	r18, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <main+0xd6>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <main+0xe0>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <main+0xe2>
     aac:	bb cf       	rjmp	.-138    	; 0xa24 <main+0x5a>

00000aae <init_oled>:

static unsigned char init_data[22] = {0xae, 0xa1, 0xda, 0x12, 0xc8, 0xa8, 0x3f, 0xd5, 0x80, 0x81, 0x50, 0xd9, 0x21, 0x20, 0x02, 0xdb, 0x30, 0xad, 0x00, 0xa4, 0xa6, 0xaf};

void init_oled()
{
	for(int i = 0; i < 22; i++) {
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <init_oled+0x14>
		oled_c_base[0] = init_data[i];
     ab4:	fc 01       	movw	r30, r24
     ab6:	ef 58       	subi	r30, 0x8F	; 143
     ab8:	fc 4f       	sbci	r31, 0xFC	; 252
     aba:	20 81       	ld	r18, Z
     abc:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__bss_end+0xc66>

static unsigned char init_data[22] = {0xae, 0xa1, 0xda, 0x12, 0xc8, 0xa8, 0x3f, 0xd5, 0x80, 0x81, 0x50, 0xd9, 0x21, 0x20, 0x02, 0xdb, 0x30, 0xad, 0x00, 0xa4, 0xa6, 0xaf};

void init_oled()
{
	for(int i = 0; i < 22; i++) {
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	86 31       	cpi	r24, 0x16	; 22
     ac4:	91 05       	cpc	r25, r1
     ac6:	b4 f3       	brlt	.-20     	; 0xab4 <init_oled+0x6>
		oled_c_base[0] = init_data[i];
		//printf("\n\r%x", init_data[i]);
	}
	*oled_c_base = 0x20;
     ac8:	e0 e0       	ldi	r30, 0x00	; 0
     aca:	f0 e1       	ldi	r31, 0x10	; 16
     acc:	80 e2       	ldi	r24, 0x20	; 32
     ace:	80 83       	st	Z, r24
	*oled_c_base = 0x02;
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	80 83       	st	Z, r24
     ad4:	08 95       	ret

00000ad6 <oled_goto_page_direct>:
}

void oled_goto_page_direct(uint8_t p)
{
	if (p > 7) {
     ad6:	88 30       	cpi	r24, 0x08	; 8
     ad8:	18 f4       	brcc	.+6      	; 0xae0 <oled_goto_page_direct+0xa>
		return;
	}
	*oled_c_base = 0xb0 + p;
     ada:	80 55       	subi	r24, 0x50	; 80
     adc:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xc66>
     ae0:	08 95       	ret

00000ae2 <oled_goto_col_direct>:
}

void oled_goto_col_direct(uint8_t col)
{
	*oled_c_base = 0x21;
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f0 e1       	ldi	r31, 0x10	; 16
     ae6:	91 e2       	ldi	r25, 0x21	; 33
     ae8:	90 83       	st	Z, r25
	*oled_c_base = 0x00 + col;
     aea:	80 83       	st	Z, r24
	*oled_c_base = 0xFF;
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	80 83       	st	Z, r24
     af0:	08 95       	ret

00000af2 <oled_goto_page>:
}

void oled_goto_page(uint8_t p)
{
	if (p > 7) {
     af2:	88 30       	cpi	r24, 0x08	; 8
     af4:	40 f4       	brcc	.+16     	; 0xb06 <oled_goto_page+0x14>
		return;
	}
	current_adr = 128 * p;
     af6:	20 e8       	ldi	r18, 0x80	; 128
     af8:	82 9f       	mul	r24, r18
     afa:	c0 01       	movw	r24, r0
     afc:	11 24       	eor	r1, r1
     afe:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <current_adr+0x1>
     b02:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <current_adr>
     b06:	08 95       	ret

00000b08 <oled_goto_col>:
}

void oled_goto_col(uint8_t col)
{
	uint8_t page = current_adr / 128;
     b08:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <current_adr>
     b0c:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <current_adr+0x1>
     b10:	22 0f       	add	r18, r18
     b12:	23 2f       	mov	r18, r19
     b14:	22 1f       	adc	r18, r18
     b16:	33 0b       	sbc	r19, r19
     b18:	31 95       	neg	r19
	current_adr = page * 128 + col;
     b1a:	33 27       	eor	r19, r19
     b1c:	36 95       	lsr	r19
     b1e:	32 2f       	mov	r19, r18
     b20:	22 27       	eor	r18, r18
     b22:	37 95       	ror	r19
     b24:	27 95       	ror	r18
     b26:	28 0f       	add	r18, r24
     b28:	31 1d       	adc	r19, r1
     b2a:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <current_adr+0x1>
     b2e:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <current_adr>
     b32:	08 95       	ret

00000b34 <oled_write>:
}


void oled_write(unsigned char c){
	oled_sram_base[current_adr] = c;
     b34:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <current_adr>
     b38:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <current_adr+0x1>
     b3c:	f9 01       	movw	r30, r18
     b3e:	f4 5e       	subi	r31, 0xE4	; 228
     b40:	80 83       	st	Z, r24
	current_adr++;
     b42:	2f 5f       	subi	r18, 0xFF	; 255
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
	current_adr %= 1024;
     b46:	33 70       	andi	r19, 0x03	; 3
     b48:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <current_adr+0x1>
     b4c:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <current_adr>
     b50:	08 95       	ret

00000b52 <oled_fill_entire>:
}

void oled_fill_entire(unsigned char c)
{	
	for(int i = 0; i < 1024; i++) {
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <oled_fill_entire+0x10>
		//if (i % 128 == 0) *oled_c_base = 0xb0 + i / 128;
		oled_sram_base[i] = c;
     b58:	f9 01       	movw	r30, r18
     b5a:	f4 5e       	subi	r31, 0xE4	; 228
     b5c:	80 83       	st	Z, r24
	current_adr %= 1024;
}

void oled_fill_entire(unsigned char c)
{	
	for(int i = 0; i < 1024; i++) {
     b5e:	2f 5f       	subi	r18, 0xFF	; 255
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	21 15       	cp	r18, r1
     b64:	94 e0       	ldi	r25, 0x04	; 4
     b66:	39 07       	cpc	r19, r25
     b68:	bc f3       	brlt	.-18     	; 0xb58 <oled_fill_entire+0x6>
		//if (i % 128 == 0) *oled_c_base = 0xb0 + i / 128;
		oled_sram_base[i] = c;
	}
	current_adr = 0;
     b6a:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <current_adr+0x1>
     b6e:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <current_adr>
     b72:	08 95       	ret

00000b74 <oled_write_char>:
}

int oled_write_char(char c, FILE* file)
{
	if (c == '\n'){
     b74:	8a 30       	cpi	r24, 0x0A	; 10
     b76:	69 f4       	brne	.+26     	; 0xb92 <oled_write_char+0x1e>
		//current_page++;
		//current_page %= 8;
		//*oled_c_base = 0xb0 + current_page;
		current_adr += 128;
     b78:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <current_adr>
     b7c:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <current_adr+0x1>
     b80:	80 58       	subi	r24, 0x80	; 128
     b82:	9f 4f       	sbci	r25, 0xFF	; 255
     b84:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <current_adr+0x1>
     b88:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <current_adr>
		return 0;
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	08 95       	ret
	} else if (c == '\r') {
     b92:	8d 30       	cpi	r24, 0x0D	; 13
     b94:	49 f4       	brne	.+18     	; 0xba8 <oled_write_char+0x34>
		//*oled_c_base = 0x21;
		//*oled_c_base = 0x00;
		//*oled_c_base = 0xFF;
		current_adr = current_adr - (current_adr % 128);
     b96:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <current_adr>
     b9a:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <current_adr+0x1>
     b9e:	20 78       	andi	r18, 0x80	; 128
     ba0:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <current_adr+0x1>
     ba4:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <current_adr>
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
     ba8:	90 ee       	ldi	r25, 0xE0	; 224
     baa:	98 0f       	add	r25, r24
     bac:	90 36       	cpi	r25, 0x60	; 96
     bae:	28 f5       	brcc	.+74     	; 0xbfa <oled_write_char+0x86>
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	1c c0       	rjmp	.+56     	; 0xbee <oled_write_char+0x7a>
	switch(size){
		case 4:
			for(int i = 0; i < size; i++){
				oled_sram_base[current_adr] = pgm_read_byte(&(font4[c - 32][i]));
     bb6:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <current_adr>
     bba:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <current_adr+0x1>
     bbe:	d9 01       	movw	r26, r18
     bc0:	b4 5e       	subi	r27, 0xE4	; 228
     bc2:	e8 2f       	mov	r30, r24
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	b0 97       	sbiw	r30, 0x20	; 32
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	e4 0f       	add	r30, r20
     bd2:	f5 1f       	adc	r31, r21
     bd4:	e0 59       	subi	r30, 0x90	; 144
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	e4 91       	lpm	r30, Z
     bda:	ec 93       	st	X, r30
				current_adr++;
     bdc:	2f 5f       	subi	r18, 0xFF	; 255
     bde:	3f 4f       	sbci	r19, 0xFF	; 255
				current_adr %= 1024;
     be0:	33 70       	andi	r19, 0x03	; 3
     be2:	30 93 8f 03 	sts	0x038F, r19	; 0x80038f <current_adr+0x1>
     be6:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <current_adr>
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
	switch(size){
		case 4:
			for(int i = 0; i < size; i++){
     bea:	4f 5f       	subi	r20, 0xFF	; 255
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	44 30       	cpi	r20, 0x04	; 4
     bf0:	51 05       	cpc	r21, r1
     bf2:	0c f3       	brlt	.-62     	; 0xbb6 <oled_write_char+0x42>
			}
			break;
		default: 
			return 1;
	}
	return 0;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	08 95       	ret
		//*oled_c_base = 0x00;
		//*oled_c_base = 0xFF;
		current_adr = current_adr - (current_adr % 128);
	}
	int size = 4;
	if (c < 32 || c > 127) return 1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default: 
			return 1;
	}
	return 0;
}
     bfe:	08 95       	ret

00000c00 <oled_write_string_on_line>:

void oled_write_string_on_line(char* s, uint8_t len, uint8_t line)
{
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
	if (line > 7) return;
     c0a:	48 30       	cpi	r20, 0x08	; 8
     c0c:	20 f5       	brcc	.+72     	; 0xc56 <oled_write_string_on_line+0x56>
     c0e:	16 2f       	mov	r17, r22
     c10:	7c 01       	movw	r14, r24
	current_adr = 128 * line;
     c12:	20 e8       	ldi	r18, 0x80	; 128
     c14:	42 9f       	mul	r20, r18
     c16:	c0 01       	movw	r24, r0
     c18:	11 24       	eor	r1, r1
     c1a:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <current_adr+0x1>
     c1e:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <current_adr>
	for (int i = 0; i < 128 / 4; i++)
     c22:	c0 e0       	ldi	r28, 0x00	; 0
     c24:	d0 e0       	ldi	r29, 0x00	; 0
     c26:	14 c0       	rjmp	.+40     	; 0xc50 <oled_write_string_on_line+0x50>
	{
		if(i < len) oled_write_char(s[i], NULL);
     c28:	21 2f       	mov	r18, r17
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	c2 17       	cp	r28, r18
     c2e:	d3 07       	cpc	r29, r19
     c30:	4c f4       	brge	.+18     	; 0xc44 <oled_write_string_on_line+0x44>
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	f7 01       	movw	r30, r14
     c38:	ec 0f       	add	r30, r28
     c3a:	fd 1f       	adc	r31, r29
     c3c:	80 81       	ld	r24, Z
     c3e:	0e 94 ba 05 	call	0xb74	; 0xb74 <oled_write_char>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <oled_write_string_on_line+0x4e>
		else		oled_write_char(' ', NULL);
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e2       	ldi	r24, 0x20	; 32
     c4a:	0e 94 ba 05 	call	0xb74	; 0xb74 <oled_write_char>

void oled_write_string_on_line(char* s, uint8_t len, uint8_t line)
{
	if (line > 7) return;
	current_adr = 128 * line;
	for (int i = 0; i < 128 / 4; i++)
     c4e:	21 96       	adiw	r28, 0x01	; 1
     c50:	c0 32       	cpi	r28, 0x20	; 32
     c52:	d1 05       	cpc	r29, r1
     c54:	4c f3       	brlt	.-46     	; 0xc28 <oled_write_string_on_line+0x28>
	{
		if(i < len) oled_write_char(s[i], NULL);
		else		oled_write_char(' ', NULL);
	}
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	08 95       	ret

00000c62 <oled_render>:

void oled_render()
{
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
	/*
	SRAM 0x1800 - 0x1FFF
	*/
	//oled_fill_entire(0xff);
	// current_adr = 0;
	oled_goto_page_direct(0);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	0e 94 6b 05 	call	0xad6	; 0xad6 <oled_goto_page_direct>
	oled_goto_col_direct(0);
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0e 94 71 05 	call	0xae2	; 0xae2 <oled_goto_col_direct>
	for(int i = 0; i < 1024; i++){
     c72:	c0 e0       	ldi	r28, 0x00	; 0
     c74:	d0 e0       	ldi	r29, 0x00	; 0
     c76:	16 c0       	rjmp	.+44     	; 0xca4 <oled_render+0x42>
		*oled_d_base = oled_sram_base[i];
     c78:	fe 01       	movw	r30, r28
     c7a:	f4 5e       	subi	r31, 0xE4	; 228
     c7c:	80 81       	ld	r24, Z
     c7e:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xe66>
		if (i % 128 == 0) oled_goto_page_direct(i / 128);
     c82:	ce 01       	movw	r24, r28
     c84:	8f 77       	andi	r24, 0x7F	; 127
     c86:	99 27       	eor	r25, r25
     c88:	89 2b       	or	r24, r25
     c8a:	59 f4       	brne	.+22     	; 0xca2 <oled_render+0x40>
     c8c:	ce 01       	movw	r24, r28
     c8e:	dd 23       	and	r29, r29
     c90:	14 f4       	brge	.+4      	; 0xc96 <oled_render+0x34>
     c92:	81 58       	subi	r24, 0x81	; 129
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	88 0f       	add	r24, r24
     c98:	89 2f       	mov	r24, r25
     c9a:	88 1f       	adc	r24, r24
     c9c:	99 0b       	sbc	r25, r25
     c9e:	0e 94 6b 05 	call	0xad6	; 0xad6 <oled_goto_page_direct>
	*/
	//oled_fill_entire(0xff);
	// current_adr = 0;
	oled_goto_page_direct(0);
	oled_goto_col_direct(0);
	for(int i = 0; i < 1024; i++){
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	c1 15       	cp	r28, r1
     ca6:	84 e0       	ldi	r24, 0x04	; 4
     ca8:	d8 07       	cpc	r29, r24
     caa:	34 f3       	brlt	.-52     	; 0xc78 <oled_render+0x16>
		*oled_d_base = oled_sram_base[i];
		if (i % 128 == 0) oled_goto_page_direct(i / 128);
	}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <toggle_pin>:

#include "pin_util.h"

void toggle_pin(char port, uint8_t pin)
{
	if(pin > 7){
     cb2:	68 30       	cpi	r22, 0x08	; 8
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <toggle_pin+0x6>
     cb6:	88 c0       	rjmp	.+272    	; 0xdc8 <toggle_pin+0x116>
		// too high pin number
		return;
	}
	
	switch (port)
     cb8:	82 34       	cpi	r24, 0x42	; 66
     cba:	51 f1       	breq	.+84     	; 0xd10 <toggle_pin+0x5e>
     cbc:	18 f4       	brcc	.+6      	; 0xcc4 <toggle_pin+0x12>
     cbe:	81 34       	cpi	r24, 0x41	; 65
     cc0:	41 f0       	breq	.+16     	; 0xcd2 <toggle_pin+0x20>
     cc2:	08 95       	ret
     cc4:	83 34       	cpi	r24, 0x43	; 67
     cc6:	09 f4       	brne	.+2      	; 0xcca <toggle_pin+0x18>
     cc8:	42 c0       	rjmp	.+132    	; 0xd4e <toggle_pin+0x9c>
     cca:	84 34       	cpi	r24, 0x44	; 68
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <toggle_pin+0x1e>
     cce:	5e c0       	rjmp	.+188    	; 0xd8c <toggle_pin+0xda>
     cd0:	08 95       	ret
	{
		unsigned char reg;
		uint8_t pin_value;
		case 'A':
			reg = PINA;
     cd2:	89 b3       	in	r24, 0x19	; 25
			// 0000x000
			// 0000000x & 00000001
			pin_value = (reg>>pin)&1;
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	06 2e       	mov	r0, r22
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <toggle_pin+0x2e>
     cdc:	35 95       	asr	r19
     cde:	27 95       	ror	r18
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <toggle_pin+0x2a>
			// reg = xxxxxxxx
			// set_bit(reg, 2)
			// reg = xxxxx1xx
			if (pin_value){
     ce4:	20 ff       	sbrs	r18, 0
     ce6:	0a c0       	rjmp	.+20     	; 0xcfc <toggle_pin+0x4a>
				clear_bit(reg, pin);
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <toggle_pin+0x40>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	6a 95       	dec	r22
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <toggle_pin+0x3c>
     cf6:	20 95       	com	r18
     cf8:	82 23       	and	r24, r18
     cfa:	08 c0       	rjmp	.+16     	; 0xd0c <toggle_pin+0x5a>
			} else {
				set_bit(reg, pin);
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <toggle_pin+0x54>
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	6a 95       	dec	r22
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <toggle_pin+0x50>
     d0a:	82 2b       	or	r24, r18
			}
			PORTA = reg;
     d0c:	8b bb       	out	0x1b, r24	; 27
			break;
     d0e:	08 95       	ret
		case 'B':
			reg = PINB;
     d10:	86 b3       	in	r24, 0x16	; 22
			pin_value = (reg>>pin)&1;
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	06 2e       	mov	r0, r22
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <toggle_pin+0x6c>
     d1a:	35 95       	asr	r19
     d1c:	27 95       	ror	r18
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <toggle_pin+0x68>
			if (pin_value){
     d22:	20 ff       	sbrs	r18, 0
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <toggle_pin+0x88>
				clear_bit(reg, pin);
     d26:	21 e0       	ldi	r18, 0x01	; 1
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <toggle_pin+0x7e>
     d2c:	22 0f       	add	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	6a 95       	dec	r22
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <toggle_pin+0x7a>
     d34:	20 95       	com	r18
     d36:	82 23       	and	r24, r18
     d38:	08 c0       	rjmp	.+16     	; 0xd4a <toggle_pin+0x98>
			} else {
				set_bit(reg, pin);
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <toggle_pin+0x92>
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	6a 95       	dec	r22
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <toggle_pin+0x8e>
     d48:	82 2b       	or	r24, r18
			}
			PORTB = reg;
     d4a:	88 bb       	out	0x18, r24	; 24
			break;
     d4c:	08 95       	ret
		case 'C':
			reg = PINC;
     d4e:	83 b3       	in	r24, 0x13	; 19
			pin_value = (reg>>pin)&1;
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	06 2e       	mov	r0, r22
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <toggle_pin+0xaa>
     d58:	35 95       	asr	r19
     d5a:	27 95       	ror	r18
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <toggle_pin+0xa6>
			if (pin_value){
     d60:	20 ff       	sbrs	r18, 0
     d62:	0a c0       	rjmp	.+20     	; 0xd78 <toggle_pin+0xc6>
				clear_bit(reg, pin);
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <toggle_pin+0xbc>
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	6a 95       	dec	r22
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <toggle_pin+0xb8>
     d72:	20 95       	com	r18
     d74:	82 23       	and	r24, r18
     d76:	08 c0       	rjmp	.+16     	; 0xd88 <toggle_pin+0xd6>
			} else {
				set_bit(reg, pin);
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <toggle_pin+0xd0>
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	6a 95       	dec	r22
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <toggle_pin+0xcc>
     d86:	82 2b       	or	r24, r18
			}
			PORTC = reg;
     d88:	85 bb       	out	0x15, r24	; 21
			break;
     d8a:	08 95       	ret
		case 'D':
			reg = PIND;
     d8c:	80 b3       	in	r24, 0x10	; 16
			pin_value = (reg>>pin)&1;
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	06 2e       	mov	r0, r22
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <toggle_pin+0xe8>
     d96:	35 95       	asr	r19
     d98:	27 95       	ror	r18
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <toggle_pin+0xe4>
			if (pin_value){
     d9e:	20 ff       	sbrs	r18, 0
     da0:	0a c0       	rjmp	.+20     	; 0xdb6 <toggle_pin+0x104>
				clear_bit(reg, pin);
     da2:	21 e0       	ldi	r18, 0x01	; 1
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <toggle_pin+0xfa>
     da8:	22 0f       	add	r18, r18
     daa:	33 1f       	adc	r19, r19
     dac:	6a 95       	dec	r22
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <toggle_pin+0xf6>
     db0:	20 95       	com	r18
     db2:	82 23       	and	r24, r18
     db4:	08 c0       	rjmp	.+16     	; 0xdc6 <toggle_pin+0x114>
			} else {
				set_bit(reg, pin);
     db6:	21 e0       	ldi	r18, 0x01	; 1
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <toggle_pin+0x10e>
     dbc:	22 0f       	add	r18, r18
     dbe:	33 1f       	adc	r19, r19
     dc0:	6a 95       	dec	r22
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <toggle_pin+0x10a>
     dc4:	82 2b       	or	r24, r18
			}
			PORTD = reg;
     dc6:	82 bb       	out	0x12, r24	; 18
     dc8:	08 95       	ret

00000dca <USART_Init>:
// Following functions are taken from "Atmel AVR ATmega162 datasheet"

void USART_Init(unsigned int ubrr)
{
	/* set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     dca:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     dcc:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     dce:	88 e1       	ldi	r24, 0x18	; 24
     dd0:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     dd2:	8e e8       	ldi	r24, 0x8E	; 142
     dd4:	80 bd       	out	0x20, r24	; 32
     dd6:	08 95       	ret

00000dd8 <USART_Transmit>:
}

int USART_Transmit (char data, FILE* file)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0) ));
     dd8:	5d 9b       	sbis	0x0b, 5	; 11
     dda:	fe cf       	rjmp	.-4      	; 0xdd8 <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     ddc:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	08 95       	ret

00000de4 <USART_Receive>:

int USART_Receive ( FILE* file )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     de4:	5f 9b       	sbis	0x0b, 7	; 11
     de6:	fe cf       	rjmp	.-4      	; 0xde4 <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
     de8:	8c b1       	in	r24, 0x0c	; 12
}
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	08 95       	ret

00000dee <malloc>:
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	82 30       	cpi	r24, 0x02	; 2
     df8:	91 05       	cpc	r25, r1
     dfa:	10 f4       	brcc	.+4      	; 0xe00 <malloc+0x12>
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <__flp>
     e04:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <__flp+0x1>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	30 97       	sbiw	r30, 0x00	; 0
     e12:	19 f1       	breq	.+70     	; 0xe5a <malloc+0x6c>
     e14:	40 81       	ld	r20, Z
     e16:	51 81       	ldd	r21, Z+1	; 0x01
     e18:	02 81       	ldd	r16, Z+2	; 0x02
     e1a:	13 81       	ldd	r17, Z+3	; 0x03
     e1c:	48 17       	cp	r20, r24
     e1e:	59 07       	cpc	r21, r25
     e20:	c8 f0       	brcs	.+50     	; 0xe54 <malloc+0x66>
     e22:	84 17       	cp	r24, r20
     e24:	95 07       	cpc	r25, r21
     e26:	69 f4       	brne	.+26     	; 0xe42 <malloc+0x54>
     e28:	10 97       	sbiw	r26, 0x00	; 0
     e2a:	31 f0       	breq	.+12     	; 0xe38 <malloc+0x4a>
     e2c:	12 96       	adiw	r26, 0x02	; 2
     e2e:	0c 93       	st	X, r16
     e30:	12 97       	sbiw	r26, 0x02	; 2
     e32:	13 96       	adiw	r26, 0x03	; 3
     e34:	1c 93       	st	X, r17
     e36:	27 c0       	rjmp	.+78     	; 0xe86 <malloc+0x98>
     e38:	00 93 92 03 	sts	0x0392, r16	; 0x800392 <__flp>
     e3c:	10 93 93 03 	sts	0x0393, r17	; 0x800393 <__flp+0x1>
     e40:	22 c0       	rjmp	.+68     	; 0xe86 <malloc+0x98>
     e42:	21 15       	cp	r18, r1
     e44:	31 05       	cpc	r19, r1
     e46:	19 f0       	breq	.+6      	; 0xe4e <malloc+0x60>
     e48:	42 17       	cp	r20, r18
     e4a:	53 07       	cpc	r21, r19
     e4c:	18 f4       	brcc	.+6      	; 0xe54 <malloc+0x66>
     e4e:	9a 01       	movw	r18, r20
     e50:	bd 01       	movw	r22, r26
     e52:	ef 01       	movw	r28, r30
     e54:	df 01       	movw	r26, r30
     e56:	f8 01       	movw	r30, r16
     e58:	db cf       	rjmp	.-74     	; 0xe10 <malloc+0x22>
     e5a:	21 15       	cp	r18, r1
     e5c:	31 05       	cpc	r19, r1
     e5e:	f9 f0       	breq	.+62     	; 0xe9e <malloc+0xb0>
     e60:	28 1b       	sub	r18, r24
     e62:	39 0b       	sbc	r19, r25
     e64:	24 30       	cpi	r18, 0x04	; 4
     e66:	31 05       	cpc	r19, r1
     e68:	80 f4       	brcc	.+32     	; 0xe8a <malloc+0x9c>
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	9b 81       	ldd	r25, Y+3	; 0x03
     e6e:	61 15       	cp	r22, r1
     e70:	71 05       	cpc	r23, r1
     e72:	21 f0       	breq	.+8      	; 0xe7c <malloc+0x8e>
     e74:	fb 01       	movw	r30, r22
     e76:	93 83       	std	Z+3, r25	; 0x03
     e78:	82 83       	std	Z+2, r24	; 0x02
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <malloc+0x96>
     e7c:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <__flp+0x1>
     e80:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <__flp>
     e84:	fe 01       	movw	r30, r28
     e86:	32 96       	adiw	r30, 0x02	; 2
     e88:	44 c0       	rjmp	.+136    	; 0xf12 <malloc+0x124>
     e8a:	fe 01       	movw	r30, r28
     e8c:	e2 0f       	add	r30, r18
     e8e:	f3 1f       	adc	r31, r19
     e90:	81 93       	st	Z+, r24
     e92:	91 93       	st	Z+, r25
     e94:	22 50       	subi	r18, 0x02	; 2
     e96:	31 09       	sbc	r19, r1
     e98:	39 83       	std	Y+1, r19	; 0x01
     e9a:	28 83       	st	Y, r18
     e9c:	3a c0       	rjmp	.+116    	; 0xf12 <malloc+0x124>
     e9e:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <__brkval>
     ea2:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <__brkval+0x1>
     ea6:	23 2b       	or	r18, r19
     ea8:	41 f4       	brne	.+16     	; 0xeba <malloc+0xcc>
     eaa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     eae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     eb2:	30 93 91 03 	sts	0x0391, r19	; 0x800391 <__brkval+0x1>
     eb6:	20 93 90 03 	sts	0x0390, r18	; 0x800390 <__brkval>
     eba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ebe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ec2:	21 15       	cp	r18, r1
     ec4:	31 05       	cpc	r19, r1
     ec6:	41 f4       	brne	.+16     	; 0xed8 <malloc+0xea>
     ec8:	2d b7       	in	r18, 0x3d	; 61
     eca:	3e b7       	in	r19, 0x3e	; 62
     ecc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     ed0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     ed4:	24 1b       	sub	r18, r20
     ed6:	35 0b       	sbc	r19, r21
     ed8:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <__brkval>
     edc:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <__brkval+0x1>
     ee0:	e2 17       	cp	r30, r18
     ee2:	f3 07       	cpc	r31, r19
     ee4:	a0 f4       	brcc	.+40     	; 0xf0e <malloc+0x120>
     ee6:	2e 1b       	sub	r18, r30
     ee8:	3f 0b       	sbc	r19, r31
     eea:	28 17       	cp	r18, r24
     eec:	39 07       	cpc	r19, r25
     eee:	78 f0       	brcs	.+30     	; 0xf0e <malloc+0x120>
     ef0:	ac 01       	movw	r20, r24
     ef2:	4e 5f       	subi	r20, 0xFE	; 254
     ef4:	5f 4f       	sbci	r21, 0xFF	; 255
     ef6:	24 17       	cp	r18, r20
     ef8:	35 07       	cpc	r19, r21
     efa:	48 f0       	brcs	.+18     	; 0xf0e <malloc+0x120>
     efc:	4e 0f       	add	r20, r30
     efe:	5f 1f       	adc	r21, r31
     f00:	50 93 91 03 	sts	0x0391, r21	; 0x800391 <__brkval+0x1>
     f04:	40 93 90 03 	sts	0x0390, r20	; 0x800390 <__brkval>
     f08:	81 93       	st	Z+, r24
     f0a:	91 93       	st	Z+, r25
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <malloc+0x124>
     f0e:	e0 e0       	ldi	r30, 0x00	; 0
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	cf 01       	movw	r24, r30
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	08 95       	ret

00000f1e <free>:
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	09 f4       	brne	.+2      	; 0xf28 <free+0xa>
     f26:	81 c0       	rjmp	.+258    	; 0x102a <free+0x10c>
     f28:	fc 01       	movw	r30, r24
     f2a:	32 97       	sbiw	r30, 0x02	; 2
     f2c:	13 82       	std	Z+3, r1	; 0x03
     f2e:	12 82       	std	Z+2, r1	; 0x02
     f30:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <__flp>
     f34:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <__flp+0x1>
     f38:	10 97       	sbiw	r26, 0x00	; 0
     f3a:	81 f4       	brne	.+32     	; 0xf5c <free+0x3e>
     f3c:	20 81       	ld	r18, Z
     f3e:	31 81       	ldd	r19, Z+1	; 0x01
     f40:	82 0f       	add	r24, r18
     f42:	93 1f       	adc	r25, r19
     f44:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <__brkval>
     f48:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <__brkval+0x1>
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	51 f5       	brne	.+84     	; 0xfa6 <free+0x88>
     f52:	f0 93 91 03 	sts	0x0391, r31	; 0x800391 <__brkval+0x1>
     f56:	e0 93 90 03 	sts	0x0390, r30	; 0x800390 <__brkval>
     f5a:	67 c0       	rjmp	.+206    	; 0x102a <free+0x10c>
     f5c:	ed 01       	movw	r28, r26
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	ce 17       	cp	r28, r30
     f64:	df 07       	cpc	r29, r31
     f66:	40 f4       	brcc	.+16     	; 0xf78 <free+0x5a>
     f68:	4a 81       	ldd	r20, Y+2	; 0x02
     f6a:	5b 81       	ldd	r21, Y+3	; 0x03
     f6c:	9e 01       	movw	r18, r28
     f6e:	41 15       	cp	r20, r1
     f70:	51 05       	cpc	r21, r1
     f72:	f1 f0       	breq	.+60     	; 0xfb0 <free+0x92>
     f74:	ea 01       	movw	r28, r20
     f76:	f5 cf       	rjmp	.-22     	; 0xf62 <free+0x44>
     f78:	d3 83       	std	Z+3, r29	; 0x03
     f7a:	c2 83       	std	Z+2, r28	; 0x02
     f7c:	40 81       	ld	r20, Z
     f7e:	51 81       	ldd	r21, Z+1	; 0x01
     f80:	84 0f       	add	r24, r20
     f82:	95 1f       	adc	r25, r21
     f84:	c8 17       	cp	r28, r24
     f86:	d9 07       	cpc	r29, r25
     f88:	59 f4       	brne	.+22     	; 0xfa0 <free+0x82>
     f8a:	88 81       	ld	r24, Y
     f8c:	99 81       	ldd	r25, Y+1	; 0x01
     f8e:	84 0f       	add	r24, r20
     f90:	95 1f       	adc	r25, r21
     f92:	02 96       	adiw	r24, 0x02	; 2
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	9b 81       	ldd	r25, Y+3	; 0x03
     f9c:	93 83       	std	Z+3, r25	; 0x03
     f9e:	82 83       	std	Z+2, r24	; 0x02
     fa0:	21 15       	cp	r18, r1
     fa2:	31 05       	cpc	r19, r1
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <free+0x92>
     fa6:	f0 93 93 03 	sts	0x0393, r31	; 0x800393 <__flp+0x1>
     faa:	e0 93 92 03 	sts	0x0392, r30	; 0x800392 <__flp>
     fae:	3d c0       	rjmp	.+122    	; 0x102a <free+0x10c>
     fb0:	e9 01       	movw	r28, r18
     fb2:	fb 83       	std	Y+3, r31	; 0x03
     fb4:	ea 83       	std	Y+2, r30	; 0x02
     fb6:	49 91       	ld	r20, Y+
     fb8:	59 91       	ld	r21, Y+
     fba:	c4 0f       	add	r28, r20
     fbc:	d5 1f       	adc	r29, r21
     fbe:	ec 17       	cp	r30, r28
     fc0:	fd 07       	cpc	r31, r29
     fc2:	61 f4       	brne	.+24     	; 0xfdc <free+0xbe>
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	84 0f       	add	r24, r20
     fca:	95 1f       	adc	r25, r21
     fcc:	02 96       	adiw	r24, 0x02	; 2
     fce:	e9 01       	movw	r28, r18
     fd0:	99 83       	std	Y+1, r25	; 0x01
     fd2:	88 83       	st	Y, r24
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	9b 83       	std	Y+3, r25	; 0x03
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	e0 e0       	ldi	r30, 0x00	; 0
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	12 96       	adiw	r26, 0x02	; 2
     fe2:	8d 91       	ld	r24, X+
     fe4:	9c 91       	ld	r25, X
     fe6:	13 97       	sbiw	r26, 0x03	; 3
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	19 f0       	breq	.+6      	; 0xff2 <free+0xd4>
     fec:	fd 01       	movw	r30, r26
     fee:	dc 01       	movw	r26, r24
     ff0:	f7 cf       	rjmp	.-18     	; 0xfe0 <free+0xc2>
     ff2:	8d 91       	ld	r24, X+
     ff4:	9c 91       	ld	r25, X
     ff6:	11 97       	sbiw	r26, 0x01	; 1
     ff8:	9d 01       	movw	r18, r26
     ffa:	2e 5f       	subi	r18, 0xFE	; 254
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	82 0f       	add	r24, r18
    1000:	93 1f       	adc	r25, r19
    1002:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <__brkval>
    1006:	30 91 91 03 	lds	r19, 0x0391	; 0x800391 <__brkval+0x1>
    100a:	28 17       	cp	r18, r24
    100c:	39 07       	cpc	r19, r25
    100e:	69 f4       	brne	.+26     	; 0x102a <free+0x10c>
    1010:	30 97       	sbiw	r30, 0x00	; 0
    1012:	29 f4       	brne	.+10     	; 0x101e <free+0x100>
    1014:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <__flp+0x1>
    1018:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <__flp>
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <free+0x104>
    101e:	13 82       	std	Z+3, r1	; 0x03
    1020:	12 82       	std	Z+2, r1	; 0x02
    1022:	b0 93 91 03 	sts	0x0391, r27	; 0x800391 <__brkval+0x1>
    1026:	a0 93 90 03 	sts	0x0390, r26	; 0x800390 <__brkval>
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <fdevopen>:
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	31 f4       	brne	.+12     	; 0x1048 <fdevopen+0x18>
    103c:	61 15       	cp	r22, r1
    103e:	71 05       	cpc	r23, r1
    1040:	19 f4       	brne	.+6      	; 0x1048 <fdevopen+0x18>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	3a c0       	rjmp	.+116    	; 0x10bc <fdevopen+0x8c>
    1048:	8b 01       	movw	r16, r22
    104a:	ec 01       	movw	r28, r24
    104c:	6e e0       	ldi	r22, 0x0E	; 14
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <calloc>
    1058:	fc 01       	movw	r30, r24
    105a:	89 2b       	or	r24, r25
    105c:	91 f3       	breq	.-28     	; 0x1042 <fdevopen+0x12>
    105e:	80 e8       	ldi	r24, 0x80	; 128
    1060:	83 83       	std	Z+3, r24	; 0x03
    1062:	01 15       	cp	r16, r1
    1064:	11 05       	cpc	r17, r1
    1066:	71 f0       	breq	.+28     	; 0x1084 <fdevopen+0x54>
    1068:	13 87       	std	Z+11, r17	; 0x0b
    106a:	02 87       	std	Z+10, r16	; 0x0a
    106c:	81 e8       	ldi	r24, 0x81	; 129
    106e:	83 83       	std	Z+3, r24	; 0x03
    1070:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <__iob>
    1074:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <__iob+0x1>
    1078:	89 2b       	or	r24, r25
    107a:	21 f4       	brne	.+8      	; 0x1084 <fdevopen+0x54>
    107c:	f0 93 95 03 	sts	0x0395, r31	; 0x800395 <__iob+0x1>
    1080:	e0 93 94 03 	sts	0x0394, r30	; 0x800394 <__iob>
    1084:	20 97       	sbiw	r28, 0x00	; 0
    1086:	c9 f0       	breq	.+50     	; 0x10ba <fdevopen+0x8a>
    1088:	d1 87       	std	Z+9, r29	; 0x09
    108a:	c0 87       	std	Z+8, r28	; 0x08
    108c:	83 81       	ldd	r24, Z+3	; 0x03
    108e:	82 60       	ori	r24, 0x02	; 2
    1090:	83 83       	std	Z+3, r24	; 0x03
    1092:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <__iob+0x2>
    1096:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <__iob+0x3>
    109a:	89 2b       	or	r24, r25
    109c:	71 f4       	brne	.+28     	; 0x10ba <fdevopen+0x8a>
    109e:	f0 93 97 03 	sts	0x0397, r31	; 0x800397 <__iob+0x3>
    10a2:	e0 93 96 03 	sts	0x0396, r30	; 0x800396 <__iob+0x2>
    10a6:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <__iob+0x4>
    10aa:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <__iob+0x5>
    10ae:	89 2b       	or	r24, r25
    10b0:	21 f4       	brne	.+8      	; 0x10ba <fdevopen+0x8a>
    10b2:	f0 93 99 03 	sts	0x0399, r31	; 0x800399 <__iob+0x5>
    10b6:	e0 93 98 03 	sts	0x0398, r30	; 0x800398 <__iob+0x4>
    10ba:	cf 01       	movw	r24, r30
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <printf>:
    10c6:	a0 e0       	ldi	r26, 0x00	; 0
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e9 e6       	ldi	r30, 0x69	; 105
    10cc:	f8 e0       	ldi	r31, 0x08	; 8
    10ce:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__prologue_saves__+0x20>
    10d2:	ae 01       	movw	r20, r28
    10d4:	4b 5f       	subi	r20, 0xFB	; 251
    10d6:	5f 4f       	sbci	r21, 0xFF	; 255
    10d8:	fa 01       	movw	r30, r20
    10da:	61 91       	ld	r22, Z+
    10dc:	71 91       	ld	r23, Z+
    10de:	af 01       	movw	r20, r30
    10e0:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <__iob+0x2>
    10e4:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <__iob+0x3>
    10e8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <vfprintf>
    10ec:	e2 e0       	ldi	r30, 0x02	; 2
    10ee:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__epilogue_restores__+0x20>

000010f2 <vfprintf>:
    10f2:	ab e0       	ldi	r26, 0x0B	; 11
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ef e7       	ldi	r30, 0x7F	; 127
    10f8:	f8 e0       	ldi	r31, 0x08	; 8
    10fa:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__prologue_saves__>
    10fe:	6c 01       	movw	r12, r24
    1100:	7b 01       	movw	r14, r22
    1102:	8a 01       	movw	r16, r20
    1104:	fc 01       	movw	r30, r24
    1106:	17 82       	std	Z+7, r1	; 0x07
    1108:	16 82       	std	Z+6, r1	; 0x06
    110a:	83 81       	ldd	r24, Z+3	; 0x03
    110c:	81 ff       	sbrs	r24, 1
    110e:	cc c1       	rjmp	.+920    	; 0x14a8 <vfprintf+0x3b6>
    1110:	ce 01       	movw	r24, r28
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	3c 01       	movw	r6, r24
    1116:	f6 01       	movw	r30, r12
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	f7 01       	movw	r30, r14
    111c:	93 fd       	sbrc	r25, 3
    111e:	85 91       	lpm	r24, Z+
    1120:	93 ff       	sbrs	r25, 3
    1122:	81 91       	ld	r24, Z+
    1124:	7f 01       	movw	r14, r30
    1126:	88 23       	and	r24, r24
    1128:	09 f4       	brne	.+2      	; 0x112c <vfprintf+0x3a>
    112a:	ba c1       	rjmp	.+884    	; 0x14a0 <vfprintf+0x3ae>
    112c:	85 32       	cpi	r24, 0x25	; 37
    112e:	39 f4       	brne	.+14     	; 0x113e <vfprintf+0x4c>
    1130:	93 fd       	sbrc	r25, 3
    1132:	85 91       	lpm	r24, Z+
    1134:	93 ff       	sbrs	r25, 3
    1136:	81 91       	ld	r24, Z+
    1138:	7f 01       	movw	r14, r30
    113a:	85 32       	cpi	r24, 0x25	; 37
    113c:	29 f4       	brne	.+10     	; 0x1148 <vfprintf+0x56>
    113e:	b6 01       	movw	r22, r12
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1146:	e7 cf       	rjmp	.-50     	; 0x1116 <vfprintf+0x24>
    1148:	91 2c       	mov	r9, r1
    114a:	21 2c       	mov	r2, r1
    114c:	31 2c       	mov	r3, r1
    114e:	ff e1       	ldi	r31, 0x1F	; 31
    1150:	f3 15       	cp	r31, r3
    1152:	d8 f0       	brcs	.+54     	; 0x118a <vfprintf+0x98>
    1154:	8b 32       	cpi	r24, 0x2B	; 43
    1156:	79 f0       	breq	.+30     	; 0x1176 <vfprintf+0x84>
    1158:	38 f4       	brcc	.+14     	; 0x1168 <vfprintf+0x76>
    115a:	80 32       	cpi	r24, 0x20	; 32
    115c:	79 f0       	breq	.+30     	; 0x117c <vfprintf+0x8a>
    115e:	83 32       	cpi	r24, 0x23	; 35
    1160:	a1 f4       	brne	.+40     	; 0x118a <vfprintf+0x98>
    1162:	23 2d       	mov	r18, r3
    1164:	20 61       	ori	r18, 0x10	; 16
    1166:	1d c0       	rjmp	.+58     	; 0x11a2 <vfprintf+0xb0>
    1168:	8d 32       	cpi	r24, 0x2D	; 45
    116a:	61 f0       	breq	.+24     	; 0x1184 <vfprintf+0x92>
    116c:	80 33       	cpi	r24, 0x30	; 48
    116e:	69 f4       	brne	.+26     	; 0x118a <vfprintf+0x98>
    1170:	23 2d       	mov	r18, r3
    1172:	21 60       	ori	r18, 0x01	; 1
    1174:	16 c0       	rjmp	.+44     	; 0x11a2 <vfprintf+0xb0>
    1176:	83 2d       	mov	r24, r3
    1178:	82 60       	ori	r24, 0x02	; 2
    117a:	38 2e       	mov	r3, r24
    117c:	e3 2d       	mov	r30, r3
    117e:	e4 60       	ori	r30, 0x04	; 4
    1180:	3e 2e       	mov	r3, r30
    1182:	2a c0       	rjmp	.+84     	; 0x11d8 <vfprintf+0xe6>
    1184:	f3 2d       	mov	r31, r3
    1186:	f8 60       	ori	r31, 0x08	; 8
    1188:	1d c0       	rjmp	.+58     	; 0x11c4 <vfprintf+0xd2>
    118a:	37 fc       	sbrc	r3, 7
    118c:	2d c0       	rjmp	.+90     	; 0x11e8 <vfprintf+0xf6>
    118e:	20 ed       	ldi	r18, 0xD0	; 208
    1190:	28 0f       	add	r18, r24
    1192:	2a 30       	cpi	r18, 0x0A	; 10
    1194:	40 f0       	brcs	.+16     	; 0x11a6 <vfprintf+0xb4>
    1196:	8e 32       	cpi	r24, 0x2E	; 46
    1198:	b9 f4       	brne	.+46     	; 0x11c8 <vfprintf+0xd6>
    119a:	36 fc       	sbrc	r3, 6
    119c:	81 c1       	rjmp	.+770    	; 0x14a0 <vfprintf+0x3ae>
    119e:	23 2d       	mov	r18, r3
    11a0:	20 64       	ori	r18, 0x40	; 64
    11a2:	32 2e       	mov	r3, r18
    11a4:	19 c0       	rjmp	.+50     	; 0x11d8 <vfprintf+0xe6>
    11a6:	36 fe       	sbrs	r3, 6
    11a8:	06 c0       	rjmp	.+12     	; 0x11b6 <vfprintf+0xc4>
    11aa:	8a e0       	ldi	r24, 0x0A	; 10
    11ac:	98 9e       	mul	r9, r24
    11ae:	20 0d       	add	r18, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	92 2e       	mov	r9, r18
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <vfprintf+0xe6>
    11b6:	ea e0       	ldi	r30, 0x0A	; 10
    11b8:	2e 9e       	mul	r2, r30
    11ba:	20 0d       	add	r18, r0
    11bc:	11 24       	eor	r1, r1
    11be:	22 2e       	mov	r2, r18
    11c0:	f3 2d       	mov	r31, r3
    11c2:	f0 62       	ori	r31, 0x20	; 32
    11c4:	3f 2e       	mov	r3, r31
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <vfprintf+0xe6>
    11c8:	8c 36       	cpi	r24, 0x6C	; 108
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <vfprintf+0xe2>
    11cc:	83 2d       	mov	r24, r3
    11ce:	80 68       	ori	r24, 0x80	; 128
    11d0:	38 2e       	mov	r3, r24
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <vfprintf+0xe6>
    11d4:	88 36       	cpi	r24, 0x68	; 104
    11d6:	41 f4       	brne	.+16     	; 0x11e8 <vfprintf+0xf6>
    11d8:	f7 01       	movw	r30, r14
    11da:	93 fd       	sbrc	r25, 3
    11dc:	85 91       	lpm	r24, Z+
    11de:	93 ff       	sbrs	r25, 3
    11e0:	81 91       	ld	r24, Z+
    11e2:	7f 01       	movw	r14, r30
    11e4:	81 11       	cpse	r24, r1
    11e6:	b3 cf       	rjmp	.-154    	; 0x114e <vfprintf+0x5c>
    11e8:	98 2f       	mov	r25, r24
    11ea:	9f 7d       	andi	r25, 0xDF	; 223
    11ec:	95 54       	subi	r25, 0x45	; 69
    11ee:	93 30       	cpi	r25, 0x03	; 3
    11f0:	28 f4       	brcc	.+10     	; 0x11fc <vfprintf+0x10a>
    11f2:	0c 5f       	subi	r16, 0xFC	; 252
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	9f e3       	ldi	r25, 0x3F	; 63
    11f8:	99 83       	std	Y+1, r25	; 0x01
    11fa:	0d c0       	rjmp	.+26     	; 0x1216 <vfprintf+0x124>
    11fc:	83 36       	cpi	r24, 0x63	; 99
    11fe:	31 f0       	breq	.+12     	; 0x120c <vfprintf+0x11a>
    1200:	83 37       	cpi	r24, 0x73	; 115
    1202:	71 f0       	breq	.+28     	; 0x1220 <vfprintf+0x12e>
    1204:	83 35       	cpi	r24, 0x53	; 83
    1206:	09 f0       	breq	.+2      	; 0x120a <vfprintf+0x118>
    1208:	59 c0       	rjmp	.+178    	; 0x12bc <vfprintf+0x1ca>
    120a:	21 c0       	rjmp	.+66     	; 0x124e <vfprintf+0x15c>
    120c:	f8 01       	movw	r30, r16
    120e:	80 81       	ld	r24, Z
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	0e 5f       	subi	r16, 0xFE	; 254
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	88 24       	eor	r8, r8
    1218:	83 94       	inc	r8
    121a:	91 2c       	mov	r9, r1
    121c:	53 01       	movw	r10, r6
    121e:	13 c0       	rjmp	.+38     	; 0x1246 <vfprintf+0x154>
    1220:	28 01       	movw	r4, r16
    1222:	f2 e0       	ldi	r31, 0x02	; 2
    1224:	4f 0e       	add	r4, r31
    1226:	51 1c       	adc	r5, r1
    1228:	f8 01       	movw	r30, r16
    122a:	a0 80       	ld	r10, Z
    122c:	b1 80       	ldd	r11, Z+1	; 0x01
    122e:	36 fe       	sbrs	r3, 6
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <vfprintf+0x146>
    1232:	69 2d       	mov	r22, r9
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <vfprintf+0x14a>
    1238:	6f ef       	ldi	r22, 0xFF	; 255
    123a:	7f ef       	ldi	r23, 0xFF	; 255
    123c:	c5 01       	movw	r24, r10
    123e:	0e 94 88 0a 	call	0x1510	; 0x1510 <strnlen>
    1242:	4c 01       	movw	r8, r24
    1244:	82 01       	movw	r16, r4
    1246:	f3 2d       	mov	r31, r3
    1248:	ff 77       	andi	r31, 0x7F	; 127
    124a:	3f 2e       	mov	r3, r31
    124c:	16 c0       	rjmp	.+44     	; 0x127a <vfprintf+0x188>
    124e:	28 01       	movw	r4, r16
    1250:	22 e0       	ldi	r18, 0x02	; 2
    1252:	42 0e       	add	r4, r18
    1254:	51 1c       	adc	r5, r1
    1256:	f8 01       	movw	r30, r16
    1258:	a0 80       	ld	r10, Z
    125a:	b1 80       	ldd	r11, Z+1	; 0x01
    125c:	36 fe       	sbrs	r3, 6
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <vfprintf+0x174>
    1260:	69 2d       	mov	r22, r9
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <vfprintf+0x178>
    1266:	6f ef       	ldi	r22, 0xFF	; 255
    1268:	7f ef       	ldi	r23, 0xFF	; 255
    126a:	c5 01       	movw	r24, r10
    126c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <strnlen_P>
    1270:	4c 01       	movw	r8, r24
    1272:	f3 2d       	mov	r31, r3
    1274:	f0 68       	ori	r31, 0x80	; 128
    1276:	3f 2e       	mov	r3, r31
    1278:	82 01       	movw	r16, r4
    127a:	33 fc       	sbrc	r3, 3
    127c:	1b c0       	rjmp	.+54     	; 0x12b4 <vfprintf+0x1c2>
    127e:	82 2d       	mov	r24, r2
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	88 16       	cp	r8, r24
    1284:	99 06       	cpc	r9, r25
    1286:	b0 f4       	brcc	.+44     	; 0x12b4 <vfprintf+0x1c2>
    1288:	b6 01       	movw	r22, r12
    128a:	80 e2       	ldi	r24, 0x20	; 32
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1292:	2a 94       	dec	r2
    1294:	f4 cf       	rjmp	.-24     	; 0x127e <vfprintf+0x18c>
    1296:	f5 01       	movw	r30, r10
    1298:	37 fc       	sbrc	r3, 7
    129a:	85 91       	lpm	r24, Z+
    129c:	37 fe       	sbrs	r3, 7
    129e:	81 91       	ld	r24, Z+
    12a0:	5f 01       	movw	r10, r30
    12a2:	b6 01       	movw	r22, r12
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    12aa:	21 10       	cpse	r2, r1
    12ac:	2a 94       	dec	r2
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	82 1a       	sub	r8, r18
    12b2:	91 08       	sbc	r9, r1
    12b4:	81 14       	cp	r8, r1
    12b6:	91 04       	cpc	r9, r1
    12b8:	71 f7       	brne	.-36     	; 0x1296 <vfprintf+0x1a4>
    12ba:	e8 c0       	rjmp	.+464    	; 0x148c <vfprintf+0x39a>
    12bc:	84 36       	cpi	r24, 0x64	; 100
    12be:	11 f0       	breq	.+4      	; 0x12c4 <vfprintf+0x1d2>
    12c0:	89 36       	cpi	r24, 0x69	; 105
    12c2:	41 f5       	brne	.+80     	; 0x1314 <vfprintf+0x222>
    12c4:	f8 01       	movw	r30, r16
    12c6:	37 fe       	sbrs	r3, 7
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <vfprintf+0x1e6>
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	0c 5f       	subi	r16, 0xFC	; 252
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <vfprintf+0x1f6>
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	07 2e       	mov	r0, r23
    12de:	00 0c       	add	r0, r0
    12e0:	88 0b       	sbc	r24, r24
    12e2:	99 0b       	sbc	r25, r25
    12e4:	0e 5f       	subi	r16, 0xFE	; 254
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	f3 2d       	mov	r31, r3
    12ea:	ff 76       	andi	r31, 0x6F	; 111
    12ec:	3f 2e       	mov	r3, r31
    12ee:	97 ff       	sbrs	r25, 7
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <vfprintf+0x212>
    12f2:	90 95       	com	r25
    12f4:	80 95       	com	r24
    12f6:	70 95       	com	r23
    12f8:	61 95       	neg	r22
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	f0 68       	ori	r31, 0x80	; 128
    1302:	3f 2e       	mov	r3, r31
    1304:	2a e0       	ldi	r18, 0x0A	; 10
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	a3 01       	movw	r20, r6
    130a:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ultoa_invert>
    130e:	88 2e       	mov	r8, r24
    1310:	86 18       	sub	r8, r6
    1312:	45 c0       	rjmp	.+138    	; 0x139e <vfprintf+0x2ac>
    1314:	85 37       	cpi	r24, 0x75	; 117
    1316:	31 f4       	brne	.+12     	; 0x1324 <vfprintf+0x232>
    1318:	23 2d       	mov	r18, r3
    131a:	2f 7e       	andi	r18, 0xEF	; 239
    131c:	b2 2e       	mov	r11, r18
    131e:	2a e0       	ldi	r18, 0x0A	; 10
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	25 c0       	rjmp	.+74     	; 0x136e <vfprintf+0x27c>
    1324:	93 2d       	mov	r25, r3
    1326:	99 7f       	andi	r25, 0xF9	; 249
    1328:	b9 2e       	mov	r11, r25
    132a:	8f 36       	cpi	r24, 0x6F	; 111
    132c:	c1 f0       	breq	.+48     	; 0x135e <vfprintf+0x26c>
    132e:	18 f4       	brcc	.+6      	; 0x1336 <vfprintf+0x244>
    1330:	88 35       	cpi	r24, 0x58	; 88
    1332:	79 f0       	breq	.+30     	; 0x1352 <vfprintf+0x260>
    1334:	b5 c0       	rjmp	.+362    	; 0x14a0 <vfprintf+0x3ae>
    1336:	80 37       	cpi	r24, 0x70	; 112
    1338:	19 f0       	breq	.+6      	; 0x1340 <vfprintf+0x24e>
    133a:	88 37       	cpi	r24, 0x78	; 120
    133c:	21 f0       	breq	.+8      	; 0x1346 <vfprintf+0x254>
    133e:	b0 c0       	rjmp	.+352    	; 0x14a0 <vfprintf+0x3ae>
    1340:	e9 2f       	mov	r30, r25
    1342:	e0 61       	ori	r30, 0x10	; 16
    1344:	be 2e       	mov	r11, r30
    1346:	b4 fe       	sbrs	r11, 4
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <vfprintf+0x272>
    134a:	fb 2d       	mov	r31, r11
    134c:	f4 60       	ori	r31, 0x04	; 4
    134e:	bf 2e       	mov	r11, r31
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <vfprintf+0x272>
    1352:	34 fe       	sbrs	r3, 4
    1354:	0a c0       	rjmp	.+20     	; 0x136a <vfprintf+0x278>
    1356:	29 2f       	mov	r18, r25
    1358:	26 60       	ori	r18, 0x06	; 6
    135a:	b2 2e       	mov	r11, r18
    135c:	06 c0       	rjmp	.+12     	; 0x136a <vfprintf+0x278>
    135e:	28 e0       	ldi	r18, 0x08	; 8
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	05 c0       	rjmp	.+10     	; 0x136e <vfprintf+0x27c>
    1364:	20 e1       	ldi	r18, 0x10	; 16
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <vfprintf+0x27c>
    136a:	20 e1       	ldi	r18, 0x10	; 16
    136c:	32 e0       	ldi	r19, 0x02	; 2
    136e:	f8 01       	movw	r30, r16
    1370:	b7 fe       	sbrs	r11, 7
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <vfprintf+0x290>
    1374:	60 81       	ld	r22, Z
    1376:	71 81       	ldd	r23, Z+1	; 0x01
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	0c 5f       	subi	r16, 0xFC	; 252
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	06 c0       	rjmp	.+12     	; 0x138e <vfprintf+0x29c>
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 5f       	subi	r16, 0xFE	; 254
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	a3 01       	movw	r20, r6
    1390:	0e 94 cf 0a 	call	0x159e	; 0x159e <__ultoa_invert>
    1394:	88 2e       	mov	r8, r24
    1396:	86 18       	sub	r8, r6
    1398:	fb 2d       	mov	r31, r11
    139a:	ff 77       	andi	r31, 0x7F	; 127
    139c:	3f 2e       	mov	r3, r31
    139e:	36 fe       	sbrs	r3, 6
    13a0:	0d c0       	rjmp	.+26     	; 0x13bc <vfprintf+0x2ca>
    13a2:	23 2d       	mov	r18, r3
    13a4:	2e 7f       	andi	r18, 0xFE	; 254
    13a6:	a2 2e       	mov	r10, r18
    13a8:	89 14       	cp	r8, r9
    13aa:	58 f4       	brcc	.+22     	; 0x13c2 <vfprintf+0x2d0>
    13ac:	34 fe       	sbrs	r3, 4
    13ae:	0b c0       	rjmp	.+22     	; 0x13c6 <vfprintf+0x2d4>
    13b0:	32 fc       	sbrc	r3, 2
    13b2:	09 c0       	rjmp	.+18     	; 0x13c6 <vfprintf+0x2d4>
    13b4:	83 2d       	mov	r24, r3
    13b6:	8e 7e       	andi	r24, 0xEE	; 238
    13b8:	a8 2e       	mov	r10, r24
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <vfprintf+0x2d4>
    13bc:	b8 2c       	mov	r11, r8
    13be:	a3 2c       	mov	r10, r3
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <vfprintf+0x2d6>
    13c2:	b8 2c       	mov	r11, r8
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <vfprintf+0x2d6>
    13c6:	b9 2c       	mov	r11, r9
    13c8:	a4 fe       	sbrs	r10, 4
    13ca:	0f c0       	rjmp	.+30     	; 0x13ea <vfprintf+0x2f8>
    13cc:	fe 01       	movw	r30, r28
    13ce:	e8 0d       	add	r30, r8
    13d0:	f1 1d       	adc	r31, r1
    13d2:	80 81       	ld	r24, Z
    13d4:	80 33       	cpi	r24, 0x30	; 48
    13d6:	21 f4       	brne	.+8      	; 0x13e0 <vfprintf+0x2ee>
    13d8:	9a 2d       	mov	r25, r10
    13da:	99 7e       	andi	r25, 0xE9	; 233
    13dc:	a9 2e       	mov	r10, r25
    13de:	09 c0       	rjmp	.+18     	; 0x13f2 <vfprintf+0x300>
    13e0:	a2 fe       	sbrs	r10, 2
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <vfprintf+0x2fe>
    13e4:	b3 94       	inc	r11
    13e6:	b3 94       	inc	r11
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <vfprintf+0x300>
    13ea:	8a 2d       	mov	r24, r10
    13ec:	86 78       	andi	r24, 0x86	; 134
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <vfprintf+0x300>
    13f0:	b3 94       	inc	r11
    13f2:	a3 fc       	sbrc	r10, 3
    13f4:	11 c0       	rjmp	.+34     	; 0x1418 <vfprintf+0x326>
    13f6:	a0 fe       	sbrs	r10, 0
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <vfprintf+0x314>
    13fa:	b2 14       	cp	r11, r2
    13fc:	88 f4       	brcc	.+34     	; 0x1420 <vfprintf+0x32e>
    13fe:	28 0c       	add	r2, r8
    1400:	92 2c       	mov	r9, r2
    1402:	9b 18       	sub	r9, r11
    1404:	0e c0       	rjmp	.+28     	; 0x1422 <vfprintf+0x330>
    1406:	b2 14       	cp	r11, r2
    1408:	60 f4       	brcc	.+24     	; 0x1422 <vfprintf+0x330>
    140a:	b6 01       	movw	r22, r12
    140c:	80 e2       	ldi	r24, 0x20	; 32
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1414:	b3 94       	inc	r11
    1416:	f7 cf       	rjmp	.-18     	; 0x1406 <vfprintf+0x314>
    1418:	b2 14       	cp	r11, r2
    141a:	18 f4       	brcc	.+6      	; 0x1422 <vfprintf+0x330>
    141c:	2b 18       	sub	r2, r11
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <vfprintf+0x332>
    1420:	98 2c       	mov	r9, r8
    1422:	21 2c       	mov	r2, r1
    1424:	a4 fe       	sbrs	r10, 4
    1426:	10 c0       	rjmp	.+32     	; 0x1448 <vfprintf+0x356>
    1428:	b6 01       	movw	r22, r12
    142a:	80 e3       	ldi	r24, 0x30	; 48
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1432:	a2 fe       	sbrs	r10, 2
    1434:	17 c0       	rjmp	.+46     	; 0x1464 <vfprintf+0x372>
    1436:	a1 fc       	sbrc	r10, 1
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <vfprintf+0x34e>
    143a:	88 e7       	ldi	r24, 0x78	; 120
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <vfprintf+0x352>
    1440:	88 e5       	ldi	r24, 0x58	; 88
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	b6 01       	movw	r22, r12
    1446:	0c c0       	rjmp	.+24     	; 0x1460 <vfprintf+0x36e>
    1448:	8a 2d       	mov	r24, r10
    144a:	86 78       	andi	r24, 0x86	; 134
    144c:	59 f0       	breq	.+22     	; 0x1464 <vfprintf+0x372>
    144e:	a1 fe       	sbrs	r10, 1
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <vfprintf+0x364>
    1452:	8b e2       	ldi	r24, 0x2B	; 43
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <vfprintf+0x366>
    1456:	80 e2       	ldi	r24, 0x20	; 32
    1458:	a7 fc       	sbrc	r10, 7
    145a:	8d e2       	ldi	r24, 0x2D	; 45
    145c:	b6 01       	movw	r22, r12
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1464:	89 14       	cp	r8, r9
    1466:	38 f4       	brcc	.+14     	; 0x1476 <vfprintf+0x384>
    1468:	b6 01       	movw	r22, r12
    146a:	80 e3       	ldi	r24, 0x30	; 48
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1472:	9a 94       	dec	r9
    1474:	f7 cf       	rjmp	.-18     	; 0x1464 <vfprintf+0x372>
    1476:	8a 94       	dec	r8
    1478:	f3 01       	movw	r30, r6
    147a:	e8 0d       	add	r30, r8
    147c:	f1 1d       	adc	r31, r1
    147e:	80 81       	ld	r24, Z
    1480:	b6 01       	movw	r22, r12
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    1488:	81 10       	cpse	r8, r1
    148a:	f5 cf       	rjmp	.-22     	; 0x1476 <vfprintf+0x384>
    148c:	22 20       	and	r2, r2
    148e:	09 f4       	brne	.+2      	; 0x1492 <vfprintf+0x3a0>
    1490:	42 ce       	rjmp	.-892    	; 0x1116 <vfprintf+0x24>
    1492:	b6 01       	movw	r22, r12
    1494:	80 e2       	ldi	r24, 0x20	; 32
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 93 0a 	call	0x1526	; 0x1526 <fputc>
    149c:	2a 94       	dec	r2
    149e:	f6 cf       	rjmp	.-20     	; 0x148c <vfprintf+0x39a>
    14a0:	f6 01       	movw	r30, r12
    14a2:	86 81       	ldd	r24, Z+6	; 0x06
    14a4:	97 81       	ldd	r25, Z+7	; 0x07
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <vfprintf+0x3ba>
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	2b 96       	adiw	r28, 0x0b	; 11
    14ae:	e2 e1       	ldi	r30, 0x12	; 18
    14b0:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__epilogue_restores__>

000014b4 <calloc>:
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	86 9f       	mul	r24, r22
    14be:	80 01       	movw	r16, r0
    14c0:	87 9f       	mul	r24, r23
    14c2:	10 0d       	add	r17, r0
    14c4:	96 9f       	mul	r25, r22
    14c6:	10 0d       	add	r17, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	c8 01       	movw	r24, r16
    14cc:	0e 94 f7 06 	call	0xdee	; 0xdee <malloc>
    14d0:	ec 01       	movw	r28, r24
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	29 f0       	breq	.+10     	; 0x14e0 <calloc+0x2c>
    14d6:	a8 01       	movw	r20, r16
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	0e 94 81 0a 	call	0x1502	; 0x1502 <memset>
    14e0:	ce 01       	movw	r24, r28
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <strnlen_P>:
    14ec:	fc 01       	movw	r30, r24
    14ee:	05 90       	lpm	r0, Z+
    14f0:	61 50       	subi	r22, 0x01	; 1
    14f2:	70 40       	sbci	r23, 0x00	; 0
    14f4:	01 10       	cpse	r0, r1
    14f6:	d8 f7       	brcc	.-10     	; 0x14ee <strnlen_P+0x2>
    14f8:	80 95       	com	r24
    14fa:	90 95       	com	r25
    14fc:	8e 0f       	add	r24, r30
    14fe:	9f 1f       	adc	r25, r31
    1500:	08 95       	ret

00001502 <memset>:
    1502:	dc 01       	movw	r26, r24
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <memset+0x6>
    1506:	6d 93       	st	X+, r22
    1508:	41 50       	subi	r20, 0x01	; 1
    150a:	50 40       	sbci	r21, 0x00	; 0
    150c:	e0 f7       	brcc	.-8      	; 0x1506 <memset+0x4>
    150e:	08 95       	ret

00001510 <strnlen>:
    1510:	fc 01       	movw	r30, r24
    1512:	61 50       	subi	r22, 0x01	; 1
    1514:	70 40       	sbci	r23, 0x00	; 0
    1516:	01 90       	ld	r0, Z+
    1518:	01 10       	cpse	r0, r1
    151a:	d8 f7       	brcc	.-10     	; 0x1512 <strnlen+0x2>
    151c:	80 95       	com	r24
    151e:	90 95       	com	r25
    1520:	8e 0f       	add	r24, r30
    1522:	9f 1f       	adc	r25, r31
    1524:	08 95       	ret

00001526 <fputc>:
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	fb 01       	movw	r30, r22
    1530:	23 81       	ldd	r18, Z+3	; 0x03
    1532:	21 fd       	sbrc	r18, 1
    1534:	03 c0       	rjmp	.+6      	; 0x153c <fputc+0x16>
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	2c c0       	rjmp	.+88     	; 0x1594 <fputc+0x6e>
    153c:	22 ff       	sbrs	r18, 2
    153e:	16 c0       	rjmp	.+44     	; 0x156c <fputc+0x46>
    1540:	46 81       	ldd	r20, Z+6	; 0x06
    1542:	57 81       	ldd	r21, Z+7	; 0x07
    1544:	24 81       	ldd	r18, Z+4	; 0x04
    1546:	35 81       	ldd	r19, Z+5	; 0x05
    1548:	42 17       	cp	r20, r18
    154a:	53 07       	cpc	r21, r19
    154c:	44 f4       	brge	.+16     	; 0x155e <fputc+0x38>
    154e:	a0 81       	ld	r26, Z
    1550:	b1 81       	ldd	r27, Z+1	; 0x01
    1552:	9d 01       	movw	r18, r26
    1554:	2f 5f       	subi	r18, 0xFF	; 255
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
    1558:	31 83       	std	Z+1, r19	; 0x01
    155a:	20 83       	st	Z, r18
    155c:	8c 93       	st	X, r24
    155e:	26 81       	ldd	r18, Z+6	; 0x06
    1560:	37 81       	ldd	r19, Z+7	; 0x07
    1562:	2f 5f       	subi	r18, 0xFF	; 255
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	37 83       	std	Z+7, r19	; 0x07
    1568:	26 83       	std	Z+6, r18	; 0x06
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <fputc+0x6e>
    156c:	8b 01       	movw	r16, r22
    156e:	ec 01       	movw	r28, r24
    1570:	fb 01       	movw	r30, r22
    1572:	00 84       	ldd	r0, Z+8	; 0x08
    1574:	f1 85       	ldd	r31, Z+9	; 0x09
    1576:	e0 2d       	mov	r30, r0
    1578:	09 95       	icall
    157a:	89 2b       	or	r24, r25
    157c:	e1 f6       	brne	.-72     	; 0x1536 <fputc+0x10>
    157e:	d8 01       	movw	r26, r16
    1580:	16 96       	adiw	r26, 0x06	; 6
    1582:	8d 91       	ld	r24, X+
    1584:	9c 91       	ld	r25, X
    1586:	17 97       	sbiw	r26, 0x07	; 7
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	17 96       	adiw	r26, 0x07	; 7
    158c:	9c 93       	st	X, r25
    158e:	8e 93       	st	-X, r24
    1590:	16 97       	sbiw	r26, 0x06	; 6
    1592:	ce 01       	movw	r24, r28
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <__ultoa_invert>:
    159e:	fa 01       	movw	r30, r20
    15a0:	aa 27       	eor	r26, r26
    15a2:	28 30       	cpi	r18, 0x08	; 8
    15a4:	51 f1       	breq	.+84     	; 0x15fa <__ultoa_invert+0x5c>
    15a6:	20 31       	cpi	r18, 0x10	; 16
    15a8:	81 f1       	breq	.+96     	; 0x160a <__ultoa_invert+0x6c>
    15aa:	e8 94       	clt
    15ac:	6f 93       	push	r22
    15ae:	6e 7f       	andi	r22, 0xFE	; 254
    15b0:	6e 5f       	subi	r22, 0xFE	; 254
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	af 4f       	sbci	r26, 0xFF	; 255
    15ba:	b1 e0       	ldi	r27, 0x01	; 1
    15bc:	3e d0       	rcall	.+124    	; 0x163a <__ultoa_invert+0x9c>
    15be:	b4 e0       	ldi	r27, 0x04	; 4
    15c0:	3c d0       	rcall	.+120    	; 0x163a <__ultoa_invert+0x9c>
    15c2:	67 0f       	add	r22, r23
    15c4:	78 1f       	adc	r23, r24
    15c6:	89 1f       	adc	r24, r25
    15c8:	9a 1f       	adc	r25, r26
    15ca:	a1 1d       	adc	r26, r1
    15cc:	68 0f       	add	r22, r24
    15ce:	79 1f       	adc	r23, r25
    15d0:	8a 1f       	adc	r24, r26
    15d2:	91 1d       	adc	r25, r1
    15d4:	a1 1d       	adc	r26, r1
    15d6:	6a 0f       	add	r22, r26
    15d8:	71 1d       	adc	r23, r1
    15da:	81 1d       	adc	r24, r1
    15dc:	91 1d       	adc	r25, r1
    15de:	a1 1d       	adc	r26, r1
    15e0:	20 d0       	rcall	.+64     	; 0x1622 <__ultoa_invert+0x84>
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <__ultoa_invert+0x48>
    15e4:	68 94       	set
    15e6:	3f 91       	pop	r19
    15e8:	2a e0       	ldi	r18, 0x0A	; 10
    15ea:	26 9f       	mul	r18, r22
    15ec:	11 24       	eor	r1, r1
    15ee:	30 19       	sub	r19, r0
    15f0:	30 5d       	subi	r19, 0xD0	; 208
    15f2:	31 93       	st	Z+, r19
    15f4:	de f6       	brtc	.-74     	; 0x15ac <__ultoa_invert+0xe>
    15f6:	cf 01       	movw	r24, r30
    15f8:	08 95       	ret
    15fa:	46 2f       	mov	r20, r22
    15fc:	47 70       	andi	r20, 0x07	; 7
    15fe:	40 5d       	subi	r20, 0xD0	; 208
    1600:	41 93       	st	Z+, r20
    1602:	b3 e0       	ldi	r27, 0x03	; 3
    1604:	0f d0       	rcall	.+30     	; 0x1624 <__ultoa_invert+0x86>
    1606:	c9 f7       	brne	.-14     	; 0x15fa <__ultoa_invert+0x5c>
    1608:	f6 cf       	rjmp	.-20     	; 0x15f6 <__ultoa_invert+0x58>
    160a:	46 2f       	mov	r20, r22
    160c:	4f 70       	andi	r20, 0x0F	; 15
    160e:	40 5d       	subi	r20, 0xD0	; 208
    1610:	4a 33       	cpi	r20, 0x3A	; 58
    1612:	18 f0       	brcs	.+6      	; 0x161a <__ultoa_invert+0x7c>
    1614:	49 5d       	subi	r20, 0xD9	; 217
    1616:	31 fd       	sbrc	r19, 1
    1618:	40 52       	subi	r20, 0x20	; 32
    161a:	41 93       	st	Z+, r20
    161c:	02 d0       	rcall	.+4      	; 0x1622 <__ultoa_invert+0x84>
    161e:	a9 f7       	brne	.-22     	; 0x160a <__ultoa_invert+0x6c>
    1620:	ea cf       	rjmp	.-44     	; 0x15f6 <__ultoa_invert+0x58>
    1622:	b4 e0       	ldi	r27, 0x04	; 4
    1624:	a6 95       	lsr	r26
    1626:	97 95       	ror	r25
    1628:	87 95       	ror	r24
    162a:	77 95       	ror	r23
    162c:	67 95       	ror	r22
    162e:	ba 95       	dec	r27
    1630:	c9 f7       	brne	.-14     	; 0x1624 <__ultoa_invert+0x86>
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	61 05       	cpc	r22, r1
    1636:	71 05       	cpc	r23, r1
    1638:	08 95       	ret
    163a:	9b 01       	movw	r18, r22
    163c:	ac 01       	movw	r20, r24
    163e:	0a 2e       	mov	r0, r26
    1640:	06 94       	lsr	r0
    1642:	57 95       	ror	r21
    1644:	47 95       	ror	r20
    1646:	37 95       	ror	r19
    1648:	27 95       	ror	r18
    164a:	ba 95       	dec	r27
    164c:	c9 f7       	brne	.-14     	; 0x1640 <__ultoa_invert+0xa2>
    164e:	62 0f       	add	r22, r18
    1650:	73 1f       	adc	r23, r19
    1652:	84 1f       	adc	r24, r20
    1654:	95 1f       	adc	r25, r21
    1656:	a0 1d       	adc	r26, r0
    1658:	08 95       	ret

0000165a <__prologue_saves__>:
    165a:	2f 92       	push	r2
    165c:	3f 92       	push	r3
    165e:	4f 92       	push	r4
    1660:	5f 92       	push	r5
    1662:	6f 92       	push	r6
    1664:	7f 92       	push	r7
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	ca 1b       	sub	r28, r26
    1684:	db 0b       	sbc	r29, r27
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	09 94       	ijmp

00001692 <__epilogue_restores__>:
    1692:	2a 88       	ldd	r2, Y+18	; 0x12
    1694:	39 88       	ldd	r3, Y+17	; 0x11
    1696:	48 88       	ldd	r4, Y+16	; 0x10
    1698:	5f 84       	ldd	r5, Y+15	; 0x0f
    169a:	6e 84       	ldd	r6, Y+14	; 0x0e
    169c:	7d 84       	ldd	r7, Y+13	; 0x0d
    169e:	8c 84       	ldd	r8, Y+12	; 0x0c
    16a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    16a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    16a4:	b9 84       	ldd	r11, Y+9	; 0x09
    16a6:	c8 84       	ldd	r12, Y+8	; 0x08
    16a8:	df 80       	ldd	r13, Y+7	; 0x07
    16aa:	ee 80       	ldd	r14, Y+6	; 0x06
    16ac:	fd 80       	ldd	r15, Y+5	; 0x05
    16ae:	0c 81       	ldd	r16, Y+4	; 0x04
    16b0:	1b 81       	ldd	r17, Y+3	; 0x03
    16b2:	aa 81       	ldd	r26, Y+2	; 0x02
    16b4:	b9 81       	ldd	r27, Y+1	; 0x01
    16b6:	ce 0f       	add	r28, r30
    16b8:	d1 1d       	adc	r29, r1
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	ed 01       	movw	r28, r26
    16c6:	08 95       	ret

000016c8 <_exit>:
    16c8:	f8 94       	cli

000016ca <__stop_program>:
    16ca:	ff cf       	rjmp	.-2      	; 0x16ca <__stop_program>
