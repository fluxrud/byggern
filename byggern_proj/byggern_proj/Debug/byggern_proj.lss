
byggern_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001fe  008001fe  00000e74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b60  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c8  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000584  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002dd  00000000  00000000  00002f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000031e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 ee       	ldi	r30, 0xE2	; 226
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 3f       	cpi	r26, 0xFE	; 254
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ae ef       	ldi	r26, 0xFE	; 254
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 30       	cpi	r26, 0x08	; 8
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 67 00 	call	0xce	; 0xce <main>
  a6:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <init_pin_directions>:
#include "uart_driver.h"

void init_pin_directions()
{
	// set PORTB PIN0 direction as output
	DDRB = (1<<DDB0);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	08 95       	ret

000000b4 <init_ext_mem>:
}

void init_ext_mem()
{
	// enable XMEM
	set_bit(MCUCR, SRE);
  b4:	85 b7       	in	r24, 0x35	; 53
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	85 bf       	out	0x35, r24	; 53
	// release 4 msb to jtag
	set_bit(SFIOR, XMM2);
  ba:	80 b7       	in	r24, 0x30	; 48
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
  c0:	80 b7       	in	r24, 0x30	; 48
  c2:	8f 7e       	andi	r24, 0xEF	; 239
  c4:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
  c6:	80 b7       	in	r24, 0x30	; 48
  c8:	87 7f       	andi	r24, 0xF7	; 247
  ca:	80 bf       	out	0x30, r24	; 48
  cc:	08 95       	ret

000000ce <main>:

void SRAM_test(void);

int main(void)
{
    init_pin_directions();
  ce:	0e 94 57 00 	call	0xae	; 0xae <init_pin_directions>
	init_ext_mem();
  d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_ext_mem>
	USART_Init(MYUBRR);
  d6:	8f e1       	ldi	r24, 0x1F	; 31
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 04 01 	call	0x208	; 0x208 <USART_Init>
	// todo: change transmit and receive to int return, error handling?
	fdevopen(USART_Transmit, USART_Receive);
  de:	6f e0       	ldi	r22, 0x0F	; 15
  e0:	71 e0       	ldi	r23, 0x01	; 1
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 6f 01 	call	0x2de	; 0x2de <fdevopen>
		
		
	SRAM_test();
  ea:	0e 94 89 00 	call	0x112	; 0x112 <SRAM_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	9e e0       	ldi	r25, 0x0E	; 14
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x26>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x30>
  fe:	00 00       	nop
		//if(c == 'w')
		//{
		//	toggle_pin('B', 0);
		//}
		//test_usart();
		printf("hello world\n\n\r");
 100:	8a e0       	ldi	r24, 0x0A	; 10
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	9f 93       	push	r25
 106:	8f 93       	push	r24
 108:	0e 94 ba 01 	call	0x374	; 0x374 <printf>
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	ee cf       	rjmp	.-36     	; 0xee <main+0x20>

00000112 <SRAM_test>:
#include <stdlib.h>
#include <stdint.h>
void SRAM_test(void)
    {
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
        printf("Starting SRAM test...\n");
 11e:	89 e1       	ldi	r24, 0x19	; 25
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <puts>
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
 126:	0e 94 5f 01 	call	0x2be	; 0x2be <rand>
 12a:	7c 01       	movw	r14, r24
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
 12c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <srand>
        for (uint16_t i = 0; i < ext_ram_size; i++) {
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
#include <stdint.h>
void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
 134:	00 e0       	ldi	r16, 0x00	; 0
 136:	10 e0       	ldi	r17, 0x00	; 0
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
 138:	20 c0       	rjmp	.+64     	; 0x17a <SRAM_test+0x68>
            uint8_t some_value = rand();
 13a:	0e 94 5f 01 	call	0x2be	; 0x2be <rand>
            ext_ram[i] = some_value;
 13e:	fe 01       	movw	r30, r28
 140:	f8 5e       	subi	r31, 0xE8	; 232
 142:	80 83       	st	Z, r24
            uint8_t retreived_value = ext_ram[i];
 144:	20 81       	ld	r18, Z
            if (retreived_value != some_value) {
 146:	28 17       	cp	r18, r24
 148:	b9 f0       	breq	.+46     	; 0x178 <SRAM_test+0x66>
                printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 14a:	99 27       	eor	r25, r25
 14c:	9f 93       	push	r25
 14e:	8f 93       	push	r24
 150:	1f 92       	push	r1
 152:	2f 93       	push	r18
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	8f e2       	ldi	r24, 0x2F	; 47
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	9f 93       	push	r25
 15e:	8f 93       	push	r24
 160:	0e 94 ba 01 	call	0x374	; 0x374 <printf>
                write_errors++;
 164:	0f 5f       	subi	r16, 0xFF	; 255
 166:	1f 4f       	sbci	r17, 0xFF	; 255
 168:	8d b7       	in	r24, 0x3d	; 61
 16a:	9e b7       	in	r25, 0x3e	; 62
 16c:	08 96       	adiw	r24, 0x08	; 8
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	9e bf       	out	0x3e, r25	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	8d bf       	out	0x3d, r24	; 61
        // rand() stores some internal state, so calling this function in a loop will
        // yield different seeds each time (unless srand() is called before this function)
        uint16_t seed = rand();
        // Write phase: Immediately check that the correct value was stored
        srand(seed);
        for (uint16_t i = 0; i < ext_ram_size; i++) {
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	c1 15       	cp	r28, r1
 17c:	98 e0       	ldi	r25, 0x08	; 8
 17e:	d9 07       	cpc	r29, r25
 180:	e0 f2       	brcs	.-72     	; 0x13a <SRAM_test+0x28>
                printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                write_errors++;
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
 182:	c7 01       	movw	r24, r14
 184:	0e 94 64 01 	call	0x2c8	; 0x2c8 <srand>
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
    {
		volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
        uint16_t ext_ram_size = 0x800;
        uint16_t write_errors = 0;
        uint16_t retrieval_errors = 0;
 18c:	e1 2c       	mov	r14, r1
 18e:	f1 2c       	mov	r15, r1
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
 190:	20 c0       	rjmp	.+64     	; 0x1d2 <SRAM_test+0xc0>
            uint8_t some_value = rand();
 192:	0e 94 5f 01 	call	0x2be	; 0x2be <rand>
            uint8_t retreived_value = ext_ram[i];
 196:	fe 01       	movw	r30, r28
 198:	f8 5e       	subi	r31, 0xE8	; 232
 19a:	20 81       	ld	r18, Z
            if (retreived_value != some_value) {
 19c:	28 17       	cp	r18, r24
 19e:	c1 f0       	breq	.+48     	; 0x1d0 <SRAM_test+0xbe>
                printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 1a0:	99 27       	eor	r25, r25
 1a2:	9f 93       	push	r25
 1a4:	8f 93       	push	r24
 1a6:	1f 92       	push	r1
 1a8:	2f 93       	push	r18
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	88 e6       	ldi	r24, 0x68	; 104
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	9f 93       	push	r25
 1b4:	8f 93       	push	r24
 1b6:	0e 94 ba 01 	call	0x374	; 0x374 <printf>
                retrieval_errors++;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	e8 1a       	sub	r14, r24
 1be:	f8 0a       	sbc	r15, r24
 1c0:	8d b7       	in	r24, 0x3d	; 61
 1c2:	9e b7       	in	r25, 0x3e	; 62
 1c4:	08 96       	adiw	r24, 0x08	; 8
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	9e bf       	out	0x3e, r25	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	8d bf       	out	0x3d, r24	; 61
            }
        }
        // Retrieval phase: Check that no values were changed during or after the write phase
        srand(seed);
        // reset the PRNG to the state it had before the write phase
        for (uint16_t i = 0; i < ext_ram_size; i++) {
 1d0:	21 96       	adiw	r28, 0x01	; 1
 1d2:	c1 15       	cp	r28, r1
 1d4:	98 e0       	ldi	r25, 0x08	; 8
 1d6:	d9 07       	cpc	r29, r25
 1d8:	e0 f2       	brcs	.-72     	; 0x192 <SRAM_test+0x80>
            if (retreived_value != some_value) {
                printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
                retrieval_errors++;
            }
        }
        printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 1da:	ff 92       	push	r15
 1dc:	ef 92       	push	r14
 1de:	1f 93       	push	r17
 1e0:	0f 93       	push	r16
 1e2:	85 ea       	ldi	r24, 0xA5	; 165
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	9f 93       	push	r25
 1e8:	8f 93       	push	r24
 1ea:	0e 94 ba 01 	call	0x374	; 0x374 <printf>
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	08 95       	ret

00000208 <USART_Init>:
// Following functions are taken from "Atmel AVR ATmega162 datasheet"

void USART_Init(unsigned int ubrr)
{
	/* set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 208:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 20a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 20c:	88 e1       	ldi	r24, 0x18	; 24
 20e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 210:	8e e8       	ldi	r24, 0x8E	; 142
 212:	80 bd       	out	0x20, r24	; 32
 214:	08 95       	ret

00000216 <USART_Transmit>:
}

void USART_Transmit (unsigned char data, FILE* file)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0) ));
 216:	5d 9b       	sbis	0x0b, 5	; 11
 218:	fe cf       	rjmp	.-4      	; 0x216 <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 21a:	8c b9       	out	0x0c, r24	; 12
 21c:	08 95       	ret

0000021e <USART_Receive>:
}

unsigned char USART_Receive ( FILE* file )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 21e:	5f 9b       	sbis	0x0b, 7	; 11
 220:	fe cf       	rjmp	.-4      	; 0x21e <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 222:	8c b1       	in	r24, 0x0c	; 12
}
 224:	08 95       	ret

00000226 <do_rand>:
 226:	8f 92       	push	r8
 228:	9f 92       	push	r9
 22a:	af 92       	push	r10
 22c:	bf 92       	push	r11
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
 23c:	68 81       	ld	r22, Y
 23e:	79 81       	ldd	r23, Y+1	; 0x01
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	9b 81       	ldd	r25, Y+3	; 0x03
 244:	61 15       	cp	r22, r1
 246:	71 05       	cpc	r23, r1
 248:	81 05       	cpc	r24, r1
 24a:	91 05       	cpc	r25, r1
 24c:	21 f4       	brne	.+8      	; 0x256 <do_rand+0x30>
 24e:	64 e2       	ldi	r22, 0x24	; 36
 250:	79 ed       	ldi	r23, 0xD9	; 217
 252:	8b e5       	ldi	r24, 0x5B	; 91
 254:	97 e0       	ldi	r25, 0x07	; 7
 256:	2d e1       	ldi	r18, 0x1D	; 29
 258:	33 ef       	ldi	r19, 0xF3	; 243
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__divmodsi4>
 262:	49 01       	movw	r8, r18
 264:	5a 01       	movw	r10, r20
 266:	9b 01       	movw	r18, r22
 268:	ac 01       	movw	r20, r24
 26a:	a7 ea       	ldi	r26, 0xA7	; 167
 26c:	b1 e4       	ldi	r27, 0x41	; 65
 26e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__muluhisi3>
 272:	6b 01       	movw	r12, r22
 274:	7c 01       	movw	r14, r24
 276:	ac ee       	ldi	r26, 0xEC	; 236
 278:	b4 ef       	ldi	r27, 0xF4	; 244
 27a:	a5 01       	movw	r20, r10
 27c:	94 01       	movw	r18, r8
 27e:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulohisi3>
 282:	dc 01       	movw	r26, r24
 284:	cb 01       	movw	r24, r22
 286:	8c 0d       	add	r24, r12
 288:	9d 1d       	adc	r25, r13
 28a:	ae 1d       	adc	r26, r14
 28c:	bf 1d       	adc	r27, r15
 28e:	b7 ff       	sbrs	r27, 7
 290:	03 c0       	rjmp	.+6      	; 0x298 <do_rand+0x72>
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	a1 09       	sbc	r26, r1
 296:	b0 48       	sbci	r27, 0x80	; 128
 298:	88 83       	st	Y, r24
 29a:	99 83       	std	Y+1, r25	; 0x01
 29c:	aa 83       	std	Y+2, r26	; 0x02
 29e:	bb 83       	std	Y+3, r27	; 0x03
 2a0:	9f 77       	andi	r25, 0x7F	; 127
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	bf 90       	pop	r11
 2b0:	af 90       	pop	r10
 2b2:	9f 90       	pop	r9
 2b4:	8f 90       	pop	r8
 2b6:	08 95       	ret

000002b8 <rand_r>:
 2b8:	0e 94 13 01 	call	0x226	; 0x226 <do_rand>
 2bc:	08 95       	ret

000002be <rand>:
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 13 01 	call	0x226	; 0x226 <do_rand>
 2c6:	08 95       	ret

000002c8 <srand>:
 2c8:	a0 e0       	ldi	r26, 0x00	; 0
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2d8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2dc:	08 95       	ret

000002de <fdevopen>:
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	31 f4       	brne	.+12     	; 0x2f6 <fdevopen+0x18>
 2ea:	61 15       	cp	r22, r1
 2ec:	71 05       	cpc	r23, r1
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <fdevopen+0x18>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	3a c0       	rjmp	.+116    	; 0x36a <fdevopen+0x8c>
 2f6:	8b 01       	movw	r16, r22
 2f8:	ec 01       	movw	r28, r24
 2fa:	6e e0       	ldi	r22, 0x0E	; 14
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <calloc>
 306:	fc 01       	movw	r30, r24
 308:	89 2b       	or	r24, r25
 30a:	91 f3       	breq	.-28     	; 0x2f0 <fdevopen+0x12>
 30c:	80 e8       	ldi	r24, 0x80	; 128
 30e:	83 83       	std	Z+3, r24	; 0x03
 310:	01 15       	cp	r16, r1
 312:	11 05       	cpc	r17, r1
 314:	71 f0       	breq	.+28     	; 0x332 <fdevopen+0x54>
 316:	13 87       	std	Z+11, r17	; 0x0b
 318:	02 87       	std	Z+10, r16	; 0x0a
 31a:	81 e8       	ldi	r24, 0x81	; 129
 31c:	83 83       	std	Z+3, r24	; 0x03
 31e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <__data_end>
 322:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <__data_end+0x1>
 326:	89 2b       	or	r24, r25
 328:	21 f4       	brne	.+8      	; 0x332 <fdevopen+0x54>
 32a:	f0 93 ff 01 	sts	0x01FF, r31	; 0x8001ff <__data_end+0x1>
 32e:	e0 93 fe 01 	sts	0x01FE, r30	; 0x8001fe <__data_end>
 332:	20 97       	sbiw	r28, 0x00	; 0
 334:	c9 f0       	breq	.+50     	; 0x368 <fdevopen+0x8a>
 336:	d1 87       	std	Z+9, r29	; 0x09
 338:	c0 87       	std	Z+8, r28	; 0x08
 33a:	83 81       	ldd	r24, Z+3	; 0x03
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	83 83       	std	Z+3, r24	; 0x03
 340:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
 344:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
 348:	89 2b       	or	r24, r25
 34a:	71 f4       	brne	.+28     	; 0x368 <fdevopen+0x8a>
 34c:	f0 93 01 02 	sts	0x0201, r31	; 0x800201 <__data_end+0x3>
 350:	e0 93 00 02 	sts	0x0200, r30	; 0x800200 <__data_end+0x2>
 354:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end+0x4>
 358:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x5>
 35c:	89 2b       	or	r24, r25
 35e:	21 f4       	brne	.+8      	; 0x368 <fdevopen+0x8a>
 360:	f0 93 03 02 	sts	0x0203, r31	; 0x800203 <__data_end+0x5>
 364:	e0 93 02 02 	sts	0x0202, r30	; 0x800202 <__data_end+0x4>
 368:	cf 01       	movw	r24, r30
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <printf>:
 374:	a0 e0       	ldi	r26, 0x00	; 0
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e0 ec       	ldi	r30, 0xC0	; 192
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__prologue_saves__+0x20>
 380:	ae 01       	movw	r20, r28
 382:	4b 5f       	subi	r20, 0xFB	; 251
 384:	5f 4f       	sbci	r21, 0xFF	; 255
 386:	fa 01       	movw	r30, r20
 388:	61 91       	ld	r22, Z+
 38a:	71 91       	ld	r23, Z+
 38c:	af 01       	movw	r20, r30
 38e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end+0x2>
 392:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x3>
 396:	0e 94 00 02 	call	0x400	; 0x400 <vfprintf>
 39a:	e2 e0       	ldi	r30, 0x02	; 2
 39c:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__epilogue_restores__+0x20>

000003a0 <puts>:
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__data_end+0x2>
 3ac:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__data_end+0x3>
 3b0:	23 81       	ldd	r18, Z+3	; 0x03
 3b2:	21 ff       	sbrs	r18, 1
 3b4:	1b c0       	rjmp	.+54     	; 0x3ec <puts+0x4c>
 3b6:	8c 01       	movw	r16, r24
 3b8:	d0 e0       	ldi	r29, 0x00	; 0
 3ba:	c0 e0       	ldi	r28, 0x00	; 0
 3bc:	f8 01       	movw	r30, r16
 3be:	81 91       	ld	r24, Z+
 3c0:	8f 01       	movw	r16, r30
 3c2:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__data_end+0x2>
 3c6:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__data_end+0x3>
 3ca:	db 01       	movw	r26, r22
 3cc:	18 96       	adiw	r26, 0x08	; 8
 3ce:	ed 91       	ld	r30, X+
 3d0:	fc 91       	ld	r31, X
 3d2:	19 97       	sbiw	r26, 0x09	; 9
 3d4:	88 23       	and	r24, r24
 3d6:	31 f0       	breq	.+12     	; 0x3e4 <puts+0x44>
 3d8:	09 95       	icall
 3da:	89 2b       	or	r24, r25
 3dc:	79 f3       	breq	.-34     	; 0x3bc <puts+0x1c>
 3de:	df ef       	ldi	r29, 0xFF	; 255
 3e0:	cf ef       	ldi	r28, 0xFF	; 255
 3e2:	ec cf       	rjmp	.-40     	; 0x3bc <puts+0x1c>
 3e4:	8a e0       	ldi	r24, 0x0A	; 10
 3e6:	09 95       	icall
 3e8:	89 2b       	or	r24, r25
 3ea:	19 f0       	breq	.+6      	; 0x3f2 <puts+0x52>
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	9f ef       	ldi	r25, 0xFF	; 255
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <puts+0x56>
 3f2:	8d 2f       	mov	r24, r29
 3f4:	9c 2f       	mov	r25, r28
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <vfprintf>:
 400:	ab e0       	ldi	r26, 0x0B	; 11
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	e6 e0       	ldi	r30, 0x06	; 6
 406:	f2 e0       	ldi	r31, 0x02	; 2
 408:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__prologue_saves__>
 40c:	6c 01       	movw	r12, r24
 40e:	7b 01       	movw	r14, r22
 410:	8a 01       	movw	r16, r20
 412:	fc 01       	movw	r30, r24
 414:	17 82       	std	Z+7, r1	; 0x07
 416:	16 82       	std	Z+6, r1	; 0x06
 418:	83 81       	ldd	r24, Z+3	; 0x03
 41a:	81 ff       	sbrs	r24, 1
 41c:	cc c1       	rjmp	.+920    	; 0x7b6 <__stack+0x2b7>
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	3c 01       	movw	r6, r24
 424:	f6 01       	movw	r30, r12
 426:	93 81       	ldd	r25, Z+3	; 0x03
 428:	f7 01       	movw	r30, r14
 42a:	93 fd       	sbrc	r25, 3
 42c:	85 91       	lpm	r24, Z+
 42e:	93 ff       	sbrs	r25, 3
 430:	81 91       	ld	r24, Z+
 432:	7f 01       	movw	r14, r30
 434:	88 23       	and	r24, r24
 436:	09 f4       	brne	.+2      	; 0x43a <vfprintf+0x3a>
 438:	ba c1       	rjmp	.+884    	; 0x7ae <__stack+0x2af>
 43a:	85 32       	cpi	r24, 0x25	; 37
 43c:	39 f4       	brne	.+14     	; 0x44c <vfprintf+0x4c>
 43e:	93 fd       	sbrc	r25, 3
 440:	85 91       	lpm	r24, Z+
 442:	93 ff       	sbrs	r25, 3
 444:	81 91       	ld	r24, Z+
 446:	7f 01       	movw	r14, r30
 448:	85 32       	cpi	r24, 0x25	; 37
 44a:	29 f4       	brne	.+10     	; 0x456 <vfprintf+0x56>
 44c:	b6 01       	movw	r22, r12
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 454:	e7 cf       	rjmp	.-50     	; 0x424 <vfprintf+0x24>
 456:	91 2c       	mov	r9, r1
 458:	21 2c       	mov	r2, r1
 45a:	31 2c       	mov	r3, r1
 45c:	ff e1       	ldi	r31, 0x1F	; 31
 45e:	f3 15       	cp	r31, r3
 460:	d8 f0       	brcs	.+54     	; 0x498 <vfprintf+0x98>
 462:	8b 32       	cpi	r24, 0x2B	; 43
 464:	79 f0       	breq	.+30     	; 0x484 <vfprintf+0x84>
 466:	38 f4       	brcc	.+14     	; 0x476 <vfprintf+0x76>
 468:	80 32       	cpi	r24, 0x20	; 32
 46a:	79 f0       	breq	.+30     	; 0x48a <vfprintf+0x8a>
 46c:	83 32       	cpi	r24, 0x23	; 35
 46e:	a1 f4       	brne	.+40     	; 0x498 <vfprintf+0x98>
 470:	23 2d       	mov	r18, r3
 472:	20 61       	ori	r18, 0x10	; 16
 474:	1d c0       	rjmp	.+58     	; 0x4b0 <vfprintf+0xb0>
 476:	8d 32       	cpi	r24, 0x2D	; 45
 478:	61 f0       	breq	.+24     	; 0x492 <vfprintf+0x92>
 47a:	80 33       	cpi	r24, 0x30	; 48
 47c:	69 f4       	brne	.+26     	; 0x498 <vfprintf+0x98>
 47e:	23 2d       	mov	r18, r3
 480:	21 60       	ori	r18, 0x01	; 1
 482:	16 c0       	rjmp	.+44     	; 0x4b0 <vfprintf+0xb0>
 484:	83 2d       	mov	r24, r3
 486:	82 60       	ori	r24, 0x02	; 2
 488:	38 2e       	mov	r3, r24
 48a:	e3 2d       	mov	r30, r3
 48c:	e4 60       	ori	r30, 0x04	; 4
 48e:	3e 2e       	mov	r3, r30
 490:	2a c0       	rjmp	.+84     	; 0x4e6 <vfprintf+0xe6>
 492:	f3 2d       	mov	r31, r3
 494:	f8 60       	ori	r31, 0x08	; 8
 496:	1d c0       	rjmp	.+58     	; 0x4d2 <vfprintf+0xd2>
 498:	37 fc       	sbrc	r3, 7
 49a:	2d c0       	rjmp	.+90     	; 0x4f6 <vfprintf+0xf6>
 49c:	20 ed       	ldi	r18, 0xD0	; 208
 49e:	28 0f       	add	r18, r24
 4a0:	2a 30       	cpi	r18, 0x0A	; 10
 4a2:	40 f0       	brcs	.+16     	; 0x4b4 <vfprintf+0xb4>
 4a4:	8e 32       	cpi	r24, 0x2E	; 46
 4a6:	b9 f4       	brne	.+46     	; 0x4d6 <vfprintf+0xd6>
 4a8:	36 fc       	sbrc	r3, 6
 4aa:	81 c1       	rjmp	.+770    	; 0x7ae <__stack+0x2af>
 4ac:	23 2d       	mov	r18, r3
 4ae:	20 64       	ori	r18, 0x40	; 64
 4b0:	32 2e       	mov	r3, r18
 4b2:	19 c0       	rjmp	.+50     	; 0x4e6 <vfprintf+0xe6>
 4b4:	36 fe       	sbrs	r3, 6
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <vfprintf+0xc4>
 4b8:	8a e0       	ldi	r24, 0x0A	; 10
 4ba:	98 9e       	mul	r9, r24
 4bc:	20 0d       	add	r18, r0
 4be:	11 24       	eor	r1, r1
 4c0:	92 2e       	mov	r9, r18
 4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <vfprintf+0xe6>
 4c4:	ea e0       	ldi	r30, 0x0A	; 10
 4c6:	2e 9e       	mul	r2, r30
 4c8:	20 0d       	add	r18, r0
 4ca:	11 24       	eor	r1, r1
 4cc:	22 2e       	mov	r2, r18
 4ce:	f3 2d       	mov	r31, r3
 4d0:	f0 62       	ori	r31, 0x20	; 32
 4d2:	3f 2e       	mov	r3, r31
 4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <vfprintf+0xe6>
 4d6:	8c 36       	cpi	r24, 0x6C	; 108
 4d8:	21 f4       	brne	.+8      	; 0x4e2 <vfprintf+0xe2>
 4da:	83 2d       	mov	r24, r3
 4dc:	80 68       	ori	r24, 0x80	; 128
 4de:	38 2e       	mov	r3, r24
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <vfprintf+0xe6>
 4e2:	88 36       	cpi	r24, 0x68	; 104
 4e4:	41 f4       	brne	.+16     	; 0x4f6 <vfprintf+0xf6>
 4e6:	f7 01       	movw	r30, r14
 4e8:	93 fd       	sbrc	r25, 3
 4ea:	85 91       	lpm	r24, Z+
 4ec:	93 ff       	sbrs	r25, 3
 4ee:	81 91       	ld	r24, Z+
 4f0:	7f 01       	movw	r14, r30
 4f2:	81 11       	cpse	r24, r1
 4f4:	b3 cf       	rjmp	.-154    	; 0x45c <vfprintf+0x5c>
 4f6:	98 2f       	mov	r25, r24
 4f8:	9f 7d       	andi	r25, 0xDF	; 223
 4fa:	95 54       	subi	r25, 0x45	; 69
 4fc:	93 30       	cpi	r25, 0x03	; 3
 4fe:	28 f4       	brcc	.+10     	; 0x50a <__stack+0xb>
 500:	0c 5f       	subi	r16, 0xFC	; 252
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	9f e3       	ldi	r25, 0x3F	; 63
 506:	99 83       	std	Y+1, r25	; 0x01
 508:	0d c0       	rjmp	.+26     	; 0x524 <__stack+0x25>
 50a:	83 36       	cpi	r24, 0x63	; 99
 50c:	31 f0       	breq	.+12     	; 0x51a <__stack+0x1b>
 50e:	83 37       	cpi	r24, 0x73	; 115
 510:	71 f0       	breq	.+28     	; 0x52e <__stack+0x2f>
 512:	83 35       	cpi	r24, 0x53	; 83
 514:	09 f0       	breq	.+2      	; 0x518 <__stack+0x19>
 516:	59 c0       	rjmp	.+178    	; 0x5ca <__stack+0xcb>
 518:	21 c0       	rjmp	.+66     	; 0x55c <__stack+0x5d>
 51a:	f8 01       	movw	r30, r16
 51c:	80 81       	ld	r24, Z
 51e:	89 83       	std	Y+1, r24	; 0x01
 520:	0e 5f       	subi	r16, 0xFE	; 254
 522:	1f 4f       	sbci	r17, 0xFF	; 255
 524:	88 24       	eor	r8, r8
 526:	83 94       	inc	r8
 528:	91 2c       	mov	r9, r1
 52a:	53 01       	movw	r10, r6
 52c:	13 c0       	rjmp	.+38     	; 0x554 <__stack+0x55>
 52e:	28 01       	movw	r4, r16
 530:	f2 e0       	ldi	r31, 0x02	; 2
 532:	4f 0e       	add	r4, r31
 534:	51 1c       	adc	r5, r1
 536:	f8 01       	movw	r30, r16
 538:	a0 80       	ld	r10, Z
 53a:	b1 80       	ldd	r11, Z+1	; 0x01
 53c:	36 fe       	sbrs	r3, 6
 53e:	03 c0       	rjmp	.+6      	; 0x546 <__stack+0x47>
 540:	69 2d       	mov	r22, r9
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <__stack+0x4b>
 546:	6f ef       	ldi	r22, 0xFF	; 255
 548:	7f ef       	ldi	r23, 0xFF	; 255
 54a:	c5 01       	movw	r24, r10
 54c:	0e 94 30 05 	call	0xa60	; 0xa60 <strnlen>
 550:	4c 01       	movw	r8, r24
 552:	82 01       	movw	r16, r4
 554:	f3 2d       	mov	r31, r3
 556:	ff 77       	andi	r31, 0x7F	; 127
 558:	3f 2e       	mov	r3, r31
 55a:	16 c0       	rjmp	.+44     	; 0x588 <__stack+0x89>
 55c:	28 01       	movw	r4, r16
 55e:	22 e0       	ldi	r18, 0x02	; 2
 560:	42 0e       	add	r4, r18
 562:	51 1c       	adc	r5, r1
 564:	f8 01       	movw	r30, r16
 566:	a0 80       	ld	r10, Z
 568:	b1 80       	ldd	r11, Z+1	; 0x01
 56a:	36 fe       	sbrs	r3, 6
 56c:	03 c0       	rjmp	.+6      	; 0x574 <__stack+0x75>
 56e:	69 2d       	mov	r22, r9
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <__stack+0x79>
 574:	6f ef       	ldi	r22, 0xFF	; 255
 576:	7f ef       	ldi	r23, 0xFF	; 255
 578:	c5 01       	movw	r24, r10
 57a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <strnlen_P>
 57e:	4c 01       	movw	r8, r24
 580:	f3 2d       	mov	r31, r3
 582:	f0 68       	ori	r31, 0x80	; 128
 584:	3f 2e       	mov	r3, r31
 586:	82 01       	movw	r16, r4
 588:	33 fc       	sbrc	r3, 3
 58a:	1b c0       	rjmp	.+54     	; 0x5c2 <__stack+0xc3>
 58c:	82 2d       	mov	r24, r2
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	88 16       	cp	r8, r24
 592:	99 06       	cpc	r9, r25
 594:	b0 f4       	brcc	.+44     	; 0x5c2 <__stack+0xc3>
 596:	b6 01       	movw	r22, r12
 598:	80 e2       	ldi	r24, 0x20	; 32
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 5a0:	2a 94       	dec	r2
 5a2:	f4 cf       	rjmp	.-24     	; 0x58c <__stack+0x8d>
 5a4:	f5 01       	movw	r30, r10
 5a6:	37 fc       	sbrc	r3, 7
 5a8:	85 91       	lpm	r24, Z+
 5aa:	37 fe       	sbrs	r3, 7
 5ac:	81 91       	ld	r24, Z+
 5ae:	5f 01       	movw	r10, r30
 5b0:	b6 01       	movw	r22, r12
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 5b8:	21 10       	cpse	r2, r1
 5ba:	2a 94       	dec	r2
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	82 1a       	sub	r8, r18
 5c0:	91 08       	sbc	r9, r1
 5c2:	81 14       	cp	r8, r1
 5c4:	91 04       	cpc	r9, r1
 5c6:	71 f7       	brne	.-36     	; 0x5a4 <__stack+0xa5>
 5c8:	e8 c0       	rjmp	.+464    	; 0x79a <__stack+0x29b>
 5ca:	84 36       	cpi	r24, 0x64	; 100
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <__stack+0xd3>
 5ce:	89 36       	cpi	r24, 0x69	; 105
 5d0:	41 f5       	brne	.+80     	; 0x622 <__stack+0x123>
 5d2:	f8 01       	movw	r30, r16
 5d4:	37 fe       	sbrs	r3, 7
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <__stack+0xe7>
 5d8:	60 81       	ld	r22, Z
 5da:	71 81       	ldd	r23, Z+1	; 0x01
 5dc:	82 81       	ldd	r24, Z+2	; 0x02
 5de:	93 81       	ldd	r25, Z+3	; 0x03
 5e0:	0c 5f       	subi	r16, 0xFC	; 252
 5e2:	1f 4f       	sbci	r17, 0xFF	; 255
 5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <__stack+0xf7>
 5e6:	60 81       	ld	r22, Z
 5e8:	71 81       	ldd	r23, Z+1	; 0x01
 5ea:	07 2e       	mov	r0, r23
 5ec:	00 0c       	add	r0, r0
 5ee:	88 0b       	sbc	r24, r24
 5f0:	99 0b       	sbc	r25, r25
 5f2:	0e 5f       	subi	r16, 0xFE	; 254
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	f3 2d       	mov	r31, r3
 5f8:	ff 76       	andi	r31, 0x6F	; 111
 5fa:	3f 2e       	mov	r3, r31
 5fc:	97 ff       	sbrs	r25, 7
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <__stack+0x113>
 600:	90 95       	com	r25
 602:	80 95       	com	r24
 604:	70 95       	com	r23
 606:	61 95       	neg	r22
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	f0 68       	ori	r31, 0x80	; 128
 610:	3f 2e       	mov	r3, r31
 612:	2a e0       	ldi	r18, 0x0A	; 10
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	a3 01       	movw	r20, r6
 618:	0e 94 77 05 	call	0xaee	; 0xaee <__ultoa_invert>
 61c:	88 2e       	mov	r8, r24
 61e:	86 18       	sub	r8, r6
 620:	45 c0       	rjmp	.+138    	; 0x6ac <__stack+0x1ad>
 622:	85 37       	cpi	r24, 0x75	; 117
 624:	31 f4       	brne	.+12     	; 0x632 <__stack+0x133>
 626:	23 2d       	mov	r18, r3
 628:	2f 7e       	andi	r18, 0xEF	; 239
 62a:	b2 2e       	mov	r11, r18
 62c:	2a e0       	ldi	r18, 0x0A	; 10
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	25 c0       	rjmp	.+74     	; 0x67c <__stack+0x17d>
 632:	93 2d       	mov	r25, r3
 634:	99 7f       	andi	r25, 0xF9	; 249
 636:	b9 2e       	mov	r11, r25
 638:	8f 36       	cpi	r24, 0x6F	; 111
 63a:	c1 f0       	breq	.+48     	; 0x66c <__stack+0x16d>
 63c:	18 f4       	brcc	.+6      	; 0x644 <__stack+0x145>
 63e:	88 35       	cpi	r24, 0x58	; 88
 640:	79 f0       	breq	.+30     	; 0x660 <__stack+0x161>
 642:	b5 c0       	rjmp	.+362    	; 0x7ae <__stack+0x2af>
 644:	80 37       	cpi	r24, 0x70	; 112
 646:	19 f0       	breq	.+6      	; 0x64e <__stack+0x14f>
 648:	88 37       	cpi	r24, 0x78	; 120
 64a:	21 f0       	breq	.+8      	; 0x654 <__stack+0x155>
 64c:	b0 c0       	rjmp	.+352    	; 0x7ae <__stack+0x2af>
 64e:	e9 2f       	mov	r30, r25
 650:	e0 61       	ori	r30, 0x10	; 16
 652:	be 2e       	mov	r11, r30
 654:	b4 fe       	sbrs	r11, 4
 656:	0d c0       	rjmp	.+26     	; 0x672 <__stack+0x173>
 658:	fb 2d       	mov	r31, r11
 65a:	f4 60       	ori	r31, 0x04	; 4
 65c:	bf 2e       	mov	r11, r31
 65e:	09 c0       	rjmp	.+18     	; 0x672 <__stack+0x173>
 660:	34 fe       	sbrs	r3, 4
 662:	0a c0       	rjmp	.+20     	; 0x678 <__stack+0x179>
 664:	29 2f       	mov	r18, r25
 666:	26 60       	ori	r18, 0x06	; 6
 668:	b2 2e       	mov	r11, r18
 66a:	06 c0       	rjmp	.+12     	; 0x678 <__stack+0x179>
 66c:	28 e0       	ldi	r18, 0x08	; 8
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	05 c0       	rjmp	.+10     	; 0x67c <__stack+0x17d>
 672:	20 e1       	ldi	r18, 0x10	; 16
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <__stack+0x17d>
 678:	20 e1       	ldi	r18, 0x10	; 16
 67a:	32 e0       	ldi	r19, 0x02	; 2
 67c:	f8 01       	movw	r30, r16
 67e:	b7 fe       	sbrs	r11, 7
 680:	07 c0       	rjmp	.+14     	; 0x690 <__stack+0x191>
 682:	60 81       	ld	r22, Z
 684:	71 81       	ldd	r23, Z+1	; 0x01
 686:	82 81       	ldd	r24, Z+2	; 0x02
 688:	93 81       	ldd	r25, Z+3	; 0x03
 68a:	0c 5f       	subi	r16, 0xFC	; 252
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	06 c0       	rjmp	.+12     	; 0x69c <__stack+0x19d>
 690:	60 81       	ld	r22, Z
 692:	71 81       	ldd	r23, Z+1	; 0x01
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 5f       	subi	r16, 0xFE	; 254
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	a3 01       	movw	r20, r6
 69e:	0e 94 77 05 	call	0xaee	; 0xaee <__ultoa_invert>
 6a2:	88 2e       	mov	r8, r24
 6a4:	86 18       	sub	r8, r6
 6a6:	fb 2d       	mov	r31, r11
 6a8:	ff 77       	andi	r31, 0x7F	; 127
 6aa:	3f 2e       	mov	r3, r31
 6ac:	36 fe       	sbrs	r3, 6
 6ae:	0d c0       	rjmp	.+26     	; 0x6ca <__stack+0x1cb>
 6b0:	23 2d       	mov	r18, r3
 6b2:	2e 7f       	andi	r18, 0xFE	; 254
 6b4:	a2 2e       	mov	r10, r18
 6b6:	89 14       	cp	r8, r9
 6b8:	58 f4       	brcc	.+22     	; 0x6d0 <__stack+0x1d1>
 6ba:	34 fe       	sbrs	r3, 4
 6bc:	0b c0       	rjmp	.+22     	; 0x6d4 <__stack+0x1d5>
 6be:	32 fc       	sbrc	r3, 2
 6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <__stack+0x1d5>
 6c2:	83 2d       	mov	r24, r3
 6c4:	8e 7e       	andi	r24, 0xEE	; 238
 6c6:	a8 2e       	mov	r10, r24
 6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <__stack+0x1d5>
 6ca:	b8 2c       	mov	r11, r8
 6cc:	a3 2c       	mov	r10, r3
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <__stack+0x1d7>
 6d0:	b8 2c       	mov	r11, r8
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <__stack+0x1d7>
 6d4:	b9 2c       	mov	r11, r9
 6d6:	a4 fe       	sbrs	r10, 4
 6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <__stack+0x1f9>
 6da:	fe 01       	movw	r30, r28
 6dc:	e8 0d       	add	r30, r8
 6de:	f1 1d       	adc	r31, r1
 6e0:	80 81       	ld	r24, Z
 6e2:	80 33       	cpi	r24, 0x30	; 48
 6e4:	21 f4       	brne	.+8      	; 0x6ee <__stack+0x1ef>
 6e6:	9a 2d       	mov	r25, r10
 6e8:	99 7e       	andi	r25, 0xE9	; 233
 6ea:	a9 2e       	mov	r10, r25
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <__stack+0x201>
 6ee:	a2 fe       	sbrs	r10, 2
 6f0:	06 c0       	rjmp	.+12     	; 0x6fe <__stack+0x1ff>
 6f2:	b3 94       	inc	r11
 6f4:	b3 94       	inc	r11
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <__stack+0x201>
 6f8:	8a 2d       	mov	r24, r10
 6fa:	86 78       	andi	r24, 0x86	; 134
 6fc:	09 f0       	breq	.+2      	; 0x700 <__stack+0x201>
 6fe:	b3 94       	inc	r11
 700:	a3 fc       	sbrc	r10, 3
 702:	11 c0       	rjmp	.+34     	; 0x726 <__stack+0x227>
 704:	a0 fe       	sbrs	r10, 0
 706:	06 c0       	rjmp	.+12     	; 0x714 <__stack+0x215>
 708:	b2 14       	cp	r11, r2
 70a:	88 f4       	brcc	.+34     	; 0x72e <__stack+0x22f>
 70c:	28 0c       	add	r2, r8
 70e:	92 2c       	mov	r9, r2
 710:	9b 18       	sub	r9, r11
 712:	0e c0       	rjmp	.+28     	; 0x730 <__stack+0x231>
 714:	b2 14       	cp	r11, r2
 716:	60 f4       	brcc	.+24     	; 0x730 <__stack+0x231>
 718:	b6 01       	movw	r22, r12
 71a:	80 e2       	ldi	r24, 0x20	; 32
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 722:	b3 94       	inc	r11
 724:	f7 cf       	rjmp	.-18     	; 0x714 <__stack+0x215>
 726:	b2 14       	cp	r11, r2
 728:	18 f4       	brcc	.+6      	; 0x730 <__stack+0x231>
 72a:	2b 18       	sub	r2, r11
 72c:	02 c0       	rjmp	.+4      	; 0x732 <__stack+0x233>
 72e:	98 2c       	mov	r9, r8
 730:	21 2c       	mov	r2, r1
 732:	a4 fe       	sbrs	r10, 4
 734:	10 c0       	rjmp	.+32     	; 0x756 <__stack+0x257>
 736:	b6 01       	movw	r22, r12
 738:	80 e3       	ldi	r24, 0x30	; 48
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 740:	a2 fe       	sbrs	r10, 2
 742:	17 c0       	rjmp	.+46     	; 0x772 <__stack+0x273>
 744:	a1 fc       	sbrc	r10, 1
 746:	03 c0       	rjmp	.+6      	; 0x74e <__stack+0x24f>
 748:	88 e7       	ldi	r24, 0x78	; 120
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <__stack+0x253>
 74e:	88 e5       	ldi	r24, 0x58	; 88
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	b6 01       	movw	r22, r12
 754:	0c c0       	rjmp	.+24     	; 0x76e <__stack+0x26f>
 756:	8a 2d       	mov	r24, r10
 758:	86 78       	andi	r24, 0x86	; 134
 75a:	59 f0       	breq	.+22     	; 0x772 <__stack+0x273>
 75c:	a1 fe       	sbrs	r10, 1
 75e:	02 c0       	rjmp	.+4      	; 0x764 <__stack+0x265>
 760:	8b e2       	ldi	r24, 0x2B	; 43
 762:	01 c0       	rjmp	.+2      	; 0x766 <__stack+0x267>
 764:	80 e2       	ldi	r24, 0x20	; 32
 766:	a7 fc       	sbrc	r10, 7
 768:	8d e2       	ldi	r24, 0x2D	; 45
 76a:	b6 01       	movw	r22, r12
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 772:	89 14       	cp	r8, r9
 774:	38 f4       	brcc	.+14     	; 0x784 <__stack+0x285>
 776:	b6 01       	movw	r22, r12
 778:	80 e3       	ldi	r24, 0x30	; 48
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 780:	9a 94       	dec	r9
 782:	f7 cf       	rjmp	.-18     	; 0x772 <__stack+0x273>
 784:	8a 94       	dec	r8
 786:	f3 01       	movw	r30, r6
 788:	e8 0d       	add	r30, r8
 78a:	f1 1d       	adc	r31, r1
 78c:	80 81       	ld	r24, Z
 78e:	b6 01       	movw	r22, r12
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 796:	81 10       	cpse	r8, r1
 798:	f5 cf       	rjmp	.-22     	; 0x784 <__stack+0x285>
 79a:	22 20       	and	r2, r2
 79c:	09 f4       	brne	.+2      	; 0x7a0 <__stack+0x2a1>
 79e:	42 ce       	rjmp	.-892    	; 0x424 <vfprintf+0x24>
 7a0:	b6 01       	movw	r22, r12
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 3b 05 	call	0xa76	; 0xa76 <fputc>
 7aa:	2a 94       	dec	r2
 7ac:	f6 cf       	rjmp	.-20     	; 0x79a <__stack+0x29b>
 7ae:	f6 01       	movw	r30, r12
 7b0:	86 81       	ldd	r24, Z+6	; 0x06
 7b2:	97 81       	ldd	r25, Z+7	; 0x07
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__stack+0x2bb>
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	9f ef       	ldi	r25, 0xFF	; 255
 7ba:	2b 96       	adiw	r28, 0x0b	; 11
 7bc:	e2 e1       	ldi	r30, 0x12	; 18
 7be:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__epilogue_restores__>

000007c2 <calloc>:
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	86 9f       	mul	r24, r22
 7cc:	80 01       	movw	r16, r0
 7ce:	87 9f       	mul	r24, r23
 7d0:	10 0d       	add	r17, r0
 7d2:	96 9f       	mul	r25, r22
 7d4:	10 0d       	add	r17, r0
 7d6:	11 24       	eor	r1, r1
 7d8:	c8 01       	movw	r24, r16
 7da:	0e 94 fd 03 	call	0x7fa	; 0x7fa <malloc>
 7de:	ec 01       	movw	r28, r24
 7e0:	00 97       	sbiw	r24, 0x00	; 0
 7e2:	29 f0       	breq	.+10     	; 0x7ee <calloc+0x2c>
 7e4:	a8 01       	movw	r20, r16
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	0e 94 29 05 	call	0xa52	; 0xa52 <memset>
 7ee:	ce 01       	movw	r24, r28
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	1f 91       	pop	r17
 7f6:	0f 91       	pop	r16
 7f8:	08 95       	ret

000007fa <malloc>:
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	82 30       	cpi	r24, 0x02	; 2
 804:	91 05       	cpc	r25, r1
 806:	10 f4       	brcc	.+4      	; 0x80c <malloc+0x12>
 808:	82 e0       	ldi	r24, 0x02	; 2
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__flp>
 810:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__flp+0x1>
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	a0 e0       	ldi	r26, 0x00	; 0
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	30 97       	sbiw	r30, 0x00	; 0
 81e:	19 f1       	breq	.+70     	; 0x866 <malloc+0x6c>
 820:	40 81       	ld	r20, Z
 822:	51 81       	ldd	r21, Z+1	; 0x01
 824:	02 81       	ldd	r16, Z+2	; 0x02
 826:	13 81       	ldd	r17, Z+3	; 0x03
 828:	48 17       	cp	r20, r24
 82a:	59 07       	cpc	r21, r25
 82c:	c8 f0       	brcs	.+50     	; 0x860 <malloc+0x66>
 82e:	84 17       	cp	r24, r20
 830:	95 07       	cpc	r25, r21
 832:	69 f4       	brne	.+26     	; 0x84e <malloc+0x54>
 834:	10 97       	sbiw	r26, 0x00	; 0
 836:	31 f0       	breq	.+12     	; 0x844 <malloc+0x4a>
 838:	12 96       	adiw	r26, 0x02	; 2
 83a:	0c 93       	st	X, r16
 83c:	12 97       	sbiw	r26, 0x02	; 2
 83e:	13 96       	adiw	r26, 0x03	; 3
 840:	1c 93       	st	X, r17
 842:	27 c0       	rjmp	.+78     	; 0x892 <malloc+0x98>
 844:	00 93 06 02 	sts	0x0206, r16	; 0x800206 <__flp>
 848:	10 93 07 02 	sts	0x0207, r17	; 0x800207 <__flp+0x1>
 84c:	22 c0       	rjmp	.+68     	; 0x892 <malloc+0x98>
 84e:	21 15       	cp	r18, r1
 850:	31 05       	cpc	r19, r1
 852:	19 f0       	breq	.+6      	; 0x85a <malloc+0x60>
 854:	42 17       	cp	r20, r18
 856:	53 07       	cpc	r21, r19
 858:	18 f4       	brcc	.+6      	; 0x860 <malloc+0x66>
 85a:	9a 01       	movw	r18, r20
 85c:	bd 01       	movw	r22, r26
 85e:	ef 01       	movw	r28, r30
 860:	df 01       	movw	r26, r30
 862:	f8 01       	movw	r30, r16
 864:	db cf       	rjmp	.-74     	; 0x81c <malloc+0x22>
 866:	21 15       	cp	r18, r1
 868:	31 05       	cpc	r19, r1
 86a:	f9 f0       	breq	.+62     	; 0x8aa <malloc+0xb0>
 86c:	28 1b       	sub	r18, r24
 86e:	39 0b       	sbc	r19, r25
 870:	24 30       	cpi	r18, 0x04	; 4
 872:	31 05       	cpc	r19, r1
 874:	80 f4       	brcc	.+32     	; 0x896 <malloc+0x9c>
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	9b 81       	ldd	r25, Y+3	; 0x03
 87a:	61 15       	cp	r22, r1
 87c:	71 05       	cpc	r23, r1
 87e:	21 f0       	breq	.+8      	; 0x888 <malloc+0x8e>
 880:	fb 01       	movw	r30, r22
 882:	93 83       	std	Z+3, r25	; 0x03
 884:	82 83       	std	Z+2, r24	; 0x02
 886:	04 c0       	rjmp	.+8      	; 0x890 <malloc+0x96>
 888:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__flp+0x1>
 88c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__flp>
 890:	fe 01       	movw	r30, r28
 892:	32 96       	adiw	r30, 0x02	; 2
 894:	44 c0       	rjmp	.+136    	; 0x91e <malloc+0x124>
 896:	fe 01       	movw	r30, r28
 898:	e2 0f       	add	r30, r18
 89a:	f3 1f       	adc	r31, r19
 89c:	81 93       	st	Z+, r24
 89e:	91 93       	st	Z+, r25
 8a0:	22 50       	subi	r18, 0x02	; 2
 8a2:	31 09       	sbc	r19, r1
 8a4:	39 83       	std	Y+1, r19	; 0x01
 8a6:	28 83       	st	Y, r18
 8a8:	3a c0       	rjmp	.+116    	; 0x91e <malloc+0x124>
 8aa:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__brkval>
 8ae:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__brkval+0x1>
 8b2:	23 2b       	or	r18, r19
 8b4:	41 f4       	brne	.+16     	; 0x8c6 <malloc+0xcc>
 8b6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 8ba:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 8be:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <__brkval+0x1>
 8c2:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <__brkval>
 8c6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 8ca:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 8ce:	21 15       	cp	r18, r1
 8d0:	31 05       	cpc	r19, r1
 8d2:	41 f4       	brne	.+16     	; 0x8e4 <malloc+0xea>
 8d4:	2d b7       	in	r18, 0x3d	; 61
 8d6:	3e b7       	in	r19, 0x3e	; 62
 8d8:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 8dc:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 8e0:	24 1b       	sub	r18, r20
 8e2:	35 0b       	sbc	r19, r21
 8e4:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__brkval>
 8e8:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__brkval+0x1>
 8ec:	e2 17       	cp	r30, r18
 8ee:	f3 07       	cpc	r31, r19
 8f0:	a0 f4       	brcc	.+40     	; 0x91a <malloc+0x120>
 8f2:	2e 1b       	sub	r18, r30
 8f4:	3f 0b       	sbc	r19, r31
 8f6:	28 17       	cp	r18, r24
 8f8:	39 07       	cpc	r19, r25
 8fa:	78 f0       	brcs	.+30     	; 0x91a <malloc+0x120>
 8fc:	ac 01       	movw	r20, r24
 8fe:	4e 5f       	subi	r20, 0xFE	; 254
 900:	5f 4f       	sbci	r21, 0xFF	; 255
 902:	24 17       	cp	r18, r20
 904:	35 07       	cpc	r19, r21
 906:	48 f0       	brcs	.+18     	; 0x91a <malloc+0x120>
 908:	4e 0f       	add	r20, r30
 90a:	5f 1f       	adc	r21, r31
 90c:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <__brkval+0x1>
 910:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <__brkval>
 914:	81 93       	st	Z+, r24
 916:	91 93       	st	Z+, r25
 918:	02 c0       	rjmp	.+4      	; 0x91e <malloc+0x124>
 91a:	e0 e0       	ldi	r30, 0x00	; 0
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	cf 01       	movw	r24, r30
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	08 95       	ret

0000092a <free>:
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	00 97       	sbiw	r24, 0x00	; 0
 930:	09 f4       	brne	.+2      	; 0x934 <free+0xa>
 932:	81 c0       	rjmp	.+258    	; 0xa36 <free+0x10c>
 934:	fc 01       	movw	r30, r24
 936:	32 97       	sbiw	r30, 0x02	; 2
 938:	13 82       	std	Z+3, r1	; 0x03
 93a:	12 82       	std	Z+2, r1	; 0x02
 93c:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__flp>
 940:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__flp+0x1>
 944:	10 97       	sbiw	r26, 0x00	; 0
 946:	81 f4       	brne	.+32     	; 0x968 <free+0x3e>
 948:	20 81       	ld	r18, Z
 94a:	31 81       	ldd	r19, Z+1	; 0x01
 94c:	82 0f       	add	r24, r18
 94e:	93 1f       	adc	r25, r19
 950:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__brkval>
 954:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__brkval+0x1>
 958:	28 17       	cp	r18, r24
 95a:	39 07       	cpc	r19, r25
 95c:	51 f5       	brne	.+84     	; 0x9b2 <free+0x88>
 95e:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <__brkval+0x1>
 962:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <__brkval>
 966:	67 c0       	rjmp	.+206    	; 0xa36 <free+0x10c>
 968:	ed 01       	movw	r28, r26
 96a:	20 e0       	ldi	r18, 0x00	; 0
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	ce 17       	cp	r28, r30
 970:	df 07       	cpc	r29, r31
 972:	40 f4       	brcc	.+16     	; 0x984 <free+0x5a>
 974:	4a 81       	ldd	r20, Y+2	; 0x02
 976:	5b 81       	ldd	r21, Y+3	; 0x03
 978:	9e 01       	movw	r18, r28
 97a:	41 15       	cp	r20, r1
 97c:	51 05       	cpc	r21, r1
 97e:	f1 f0       	breq	.+60     	; 0x9bc <free+0x92>
 980:	ea 01       	movw	r28, r20
 982:	f5 cf       	rjmp	.-22     	; 0x96e <free+0x44>
 984:	d3 83       	std	Z+3, r29	; 0x03
 986:	c2 83       	std	Z+2, r28	; 0x02
 988:	40 81       	ld	r20, Z
 98a:	51 81       	ldd	r21, Z+1	; 0x01
 98c:	84 0f       	add	r24, r20
 98e:	95 1f       	adc	r25, r21
 990:	c8 17       	cp	r28, r24
 992:	d9 07       	cpc	r29, r25
 994:	59 f4       	brne	.+22     	; 0x9ac <free+0x82>
 996:	88 81       	ld	r24, Y
 998:	99 81       	ldd	r25, Y+1	; 0x01
 99a:	84 0f       	add	r24, r20
 99c:	95 1f       	adc	r25, r21
 99e:	02 96       	adiw	r24, 0x02	; 2
 9a0:	91 83       	std	Z+1, r25	; 0x01
 9a2:	80 83       	st	Z, r24
 9a4:	8a 81       	ldd	r24, Y+2	; 0x02
 9a6:	9b 81       	ldd	r25, Y+3	; 0x03
 9a8:	93 83       	std	Z+3, r25	; 0x03
 9aa:	82 83       	std	Z+2, r24	; 0x02
 9ac:	21 15       	cp	r18, r1
 9ae:	31 05       	cpc	r19, r1
 9b0:	29 f4       	brne	.+10     	; 0x9bc <free+0x92>
 9b2:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <__flp+0x1>
 9b6:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <__flp>
 9ba:	3d c0       	rjmp	.+122    	; 0xa36 <free+0x10c>
 9bc:	e9 01       	movw	r28, r18
 9be:	fb 83       	std	Y+3, r31	; 0x03
 9c0:	ea 83       	std	Y+2, r30	; 0x02
 9c2:	49 91       	ld	r20, Y+
 9c4:	59 91       	ld	r21, Y+
 9c6:	c4 0f       	add	r28, r20
 9c8:	d5 1f       	adc	r29, r21
 9ca:	ec 17       	cp	r30, r28
 9cc:	fd 07       	cpc	r31, r29
 9ce:	61 f4       	brne	.+24     	; 0x9e8 <free+0xbe>
 9d0:	80 81       	ld	r24, Z
 9d2:	91 81       	ldd	r25, Z+1	; 0x01
 9d4:	84 0f       	add	r24, r20
 9d6:	95 1f       	adc	r25, r21
 9d8:	02 96       	adiw	r24, 0x02	; 2
 9da:	e9 01       	movw	r28, r18
 9dc:	99 83       	std	Y+1, r25	; 0x01
 9de:	88 83       	st	Y, r24
 9e0:	82 81       	ldd	r24, Z+2	; 0x02
 9e2:	93 81       	ldd	r25, Z+3	; 0x03
 9e4:	9b 83       	std	Y+3, r25	; 0x03
 9e6:	8a 83       	std	Y+2, r24	; 0x02
 9e8:	e0 e0       	ldi	r30, 0x00	; 0
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	12 96       	adiw	r26, 0x02	; 2
 9ee:	8d 91       	ld	r24, X+
 9f0:	9c 91       	ld	r25, X
 9f2:	13 97       	sbiw	r26, 0x03	; 3
 9f4:	00 97       	sbiw	r24, 0x00	; 0
 9f6:	19 f0       	breq	.+6      	; 0x9fe <free+0xd4>
 9f8:	fd 01       	movw	r30, r26
 9fa:	dc 01       	movw	r26, r24
 9fc:	f7 cf       	rjmp	.-18     	; 0x9ec <free+0xc2>
 9fe:	8d 91       	ld	r24, X+
 a00:	9c 91       	ld	r25, X
 a02:	11 97       	sbiw	r26, 0x01	; 1
 a04:	9d 01       	movw	r18, r26
 a06:	2e 5f       	subi	r18, 0xFE	; 254
 a08:	3f 4f       	sbci	r19, 0xFF	; 255
 a0a:	82 0f       	add	r24, r18
 a0c:	93 1f       	adc	r25, r19
 a0e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__brkval>
 a12:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__brkval+0x1>
 a16:	28 17       	cp	r18, r24
 a18:	39 07       	cpc	r19, r25
 a1a:	69 f4       	brne	.+26     	; 0xa36 <free+0x10c>
 a1c:	30 97       	sbiw	r30, 0x00	; 0
 a1e:	29 f4       	brne	.+10     	; 0xa2a <free+0x100>
 a20:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__flp+0x1>
 a24:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__flp>
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <free+0x104>
 a2a:	13 82       	std	Z+3, r1	; 0x03
 a2c:	12 82       	std	Z+2, r1	; 0x02
 a2e:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <__brkval+0x1>
 a32:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <__brkval>
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	08 95       	ret

00000a3c <strnlen_P>:
 a3c:	fc 01       	movw	r30, r24
 a3e:	05 90       	lpm	r0, Z+
 a40:	61 50       	subi	r22, 0x01	; 1
 a42:	70 40       	sbci	r23, 0x00	; 0
 a44:	01 10       	cpse	r0, r1
 a46:	d8 f7       	brcc	.-10     	; 0xa3e <strnlen_P+0x2>
 a48:	80 95       	com	r24
 a4a:	90 95       	com	r25
 a4c:	8e 0f       	add	r24, r30
 a4e:	9f 1f       	adc	r25, r31
 a50:	08 95       	ret

00000a52 <memset>:
 a52:	dc 01       	movw	r26, r24
 a54:	01 c0       	rjmp	.+2      	; 0xa58 <memset+0x6>
 a56:	6d 93       	st	X+, r22
 a58:	41 50       	subi	r20, 0x01	; 1
 a5a:	50 40       	sbci	r21, 0x00	; 0
 a5c:	e0 f7       	brcc	.-8      	; 0xa56 <memset+0x4>
 a5e:	08 95       	ret

00000a60 <strnlen>:
 a60:	fc 01       	movw	r30, r24
 a62:	61 50       	subi	r22, 0x01	; 1
 a64:	70 40       	sbci	r23, 0x00	; 0
 a66:	01 90       	ld	r0, Z+
 a68:	01 10       	cpse	r0, r1
 a6a:	d8 f7       	brcc	.-10     	; 0xa62 <strnlen+0x2>
 a6c:	80 95       	com	r24
 a6e:	90 95       	com	r25
 a70:	8e 0f       	add	r24, r30
 a72:	9f 1f       	adc	r25, r31
 a74:	08 95       	ret

00000a76 <fputc>:
 a76:	0f 93       	push	r16
 a78:	1f 93       	push	r17
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	fb 01       	movw	r30, r22
 a80:	23 81       	ldd	r18, Z+3	; 0x03
 a82:	21 fd       	sbrc	r18, 1
 a84:	03 c0       	rjmp	.+6      	; 0xa8c <fputc+0x16>
 a86:	8f ef       	ldi	r24, 0xFF	; 255
 a88:	9f ef       	ldi	r25, 0xFF	; 255
 a8a:	2c c0       	rjmp	.+88     	; 0xae4 <fputc+0x6e>
 a8c:	22 ff       	sbrs	r18, 2
 a8e:	16 c0       	rjmp	.+44     	; 0xabc <fputc+0x46>
 a90:	46 81       	ldd	r20, Z+6	; 0x06
 a92:	57 81       	ldd	r21, Z+7	; 0x07
 a94:	24 81       	ldd	r18, Z+4	; 0x04
 a96:	35 81       	ldd	r19, Z+5	; 0x05
 a98:	42 17       	cp	r20, r18
 a9a:	53 07       	cpc	r21, r19
 a9c:	44 f4       	brge	.+16     	; 0xaae <fputc+0x38>
 a9e:	a0 81       	ld	r26, Z
 aa0:	b1 81       	ldd	r27, Z+1	; 0x01
 aa2:	9d 01       	movw	r18, r26
 aa4:	2f 5f       	subi	r18, 0xFF	; 255
 aa6:	3f 4f       	sbci	r19, 0xFF	; 255
 aa8:	31 83       	std	Z+1, r19	; 0x01
 aaa:	20 83       	st	Z, r18
 aac:	8c 93       	st	X, r24
 aae:	26 81       	ldd	r18, Z+6	; 0x06
 ab0:	37 81       	ldd	r19, Z+7	; 0x07
 ab2:	2f 5f       	subi	r18, 0xFF	; 255
 ab4:	3f 4f       	sbci	r19, 0xFF	; 255
 ab6:	37 83       	std	Z+7, r19	; 0x07
 ab8:	26 83       	std	Z+6, r18	; 0x06
 aba:	14 c0       	rjmp	.+40     	; 0xae4 <fputc+0x6e>
 abc:	8b 01       	movw	r16, r22
 abe:	ec 01       	movw	r28, r24
 ac0:	fb 01       	movw	r30, r22
 ac2:	00 84       	ldd	r0, Z+8	; 0x08
 ac4:	f1 85       	ldd	r31, Z+9	; 0x09
 ac6:	e0 2d       	mov	r30, r0
 ac8:	09 95       	icall
 aca:	89 2b       	or	r24, r25
 acc:	e1 f6       	brne	.-72     	; 0xa86 <fputc+0x10>
 ace:	d8 01       	movw	r26, r16
 ad0:	16 96       	adiw	r26, 0x06	; 6
 ad2:	8d 91       	ld	r24, X+
 ad4:	9c 91       	ld	r25, X
 ad6:	17 97       	sbiw	r26, 0x07	; 7
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	17 96       	adiw	r26, 0x07	; 7
 adc:	9c 93       	st	X, r25
 ade:	8e 93       	st	-X, r24
 ae0:	16 97       	sbiw	r26, 0x06	; 6
 ae2:	ce 01       	movw	r24, r28
 ae4:	df 91       	pop	r29
 ae6:	cf 91       	pop	r28
 ae8:	1f 91       	pop	r17
 aea:	0f 91       	pop	r16
 aec:	08 95       	ret

00000aee <__ultoa_invert>:
 aee:	fa 01       	movw	r30, r20
 af0:	aa 27       	eor	r26, r26
 af2:	28 30       	cpi	r18, 0x08	; 8
 af4:	51 f1       	breq	.+84     	; 0xb4a <__ultoa_invert+0x5c>
 af6:	20 31       	cpi	r18, 0x10	; 16
 af8:	81 f1       	breq	.+96     	; 0xb5a <__ultoa_invert+0x6c>
 afa:	e8 94       	clt
 afc:	6f 93       	push	r22
 afe:	6e 7f       	andi	r22, 0xFE	; 254
 b00:	6e 5f       	subi	r22, 0xFE	; 254
 b02:	7f 4f       	sbci	r23, 0xFF	; 255
 b04:	8f 4f       	sbci	r24, 0xFF	; 255
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	af 4f       	sbci	r26, 0xFF	; 255
 b0a:	b1 e0       	ldi	r27, 0x01	; 1
 b0c:	3e d0       	rcall	.+124    	; 0xb8a <__ultoa_invert+0x9c>
 b0e:	b4 e0       	ldi	r27, 0x04	; 4
 b10:	3c d0       	rcall	.+120    	; 0xb8a <__ultoa_invert+0x9c>
 b12:	67 0f       	add	r22, r23
 b14:	78 1f       	adc	r23, r24
 b16:	89 1f       	adc	r24, r25
 b18:	9a 1f       	adc	r25, r26
 b1a:	a1 1d       	adc	r26, r1
 b1c:	68 0f       	add	r22, r24
 b1e:	79 1f       	adc	r23, r25
 b20:	8a 1f       	adc	r24, r26
 b22:	91 1d       	adc	r25, r1
 b24:	a1 1d       	adc	r26, r1
 b26:	6a 0f       	add	r22, r26
 b28:	71 1d       	adc	r23, r1
 b2a:	81 1d       	adc	r24, r1
 b2c:	91 1d       	adc	r25, r1
 b2e:	a1 1d       	adc	r26, r1
 b30:	20 d0       	rcall	.+64     	; 0xb72 <__ultoa_invert+0x84>
 b32:	09 f4       	brne	.+2      	; 0xb36 <__ultoa_invert+0x48>
 b34:	68 94       	set
 b36:	3f 91       	pop	r19
 b38:	2a e0       	ldi	r18, 0x0A	; 10
 b3a:	26 9f       	mul	r18, r22
 b3c:	11 24       	eor	r1, r1
 b3e:	30 19       	sub	r19, r0
 b40:	30 5d       	subi	r19, 0xD0	; 208
 b42:	31 93       	st	Z+, r19
 b44:	de f6       	brtc	.-74     	; 0xafc <__ultoa_invert+0xe>
 b46:	cf 01       	movw	r24, r30
 b48:	08 95       	ret
 b4a:	46 2f       	mov	r20, r22
 b4c:	47 70       	andi	r20, 0x07	; 7
 b4e:	40 5d       	subi	r20, 0xD0	; 208
 b50:	41 93       	st	Z+, r20
 b52:	b3 e0       	ldi	r27, 0x03	; 3
 b54:	0f d0       	rcall	.+30     	; 0xb74 <__ultoa_invert+0x86>
 b56:	c9 f7       	brne	.-14     	; 0xb4a <__ultoa_invert+0x5c>
 b58:	f6 cf       	rjmp	.-20     	; 0xb46 <__ultoa_invert+0x58>
 b5a:	46 2f       	mov	r20, r22
 b5c:	4f 70       	andi	r20, 0x0F	; 15
 b5e:	40 5d       	subi	r20, 0xD0	; 208
 b60:	4a 33       	cpi	r20, 0x3A	; 58
 b62:	18 f0       	brcs	.+6      	; 0xb6a <__ultoa_invert+0x7c>
 b64:	49 5d       	subi	r20, 0xD9	; 217
 b66:	31 fd       	sbrc	r19, 1
 b68:	40 52       	subi	r20, 0x20	; 32
 b6a:	41 93       	st	Z+, r20
 b6c:	02 d0       	rcall	.+4      	; 0xb72 <__ultoa_invert+0x84>
 b6e:	a9 f7       	brne	.-22     	; 0xb5a <__ultoa_invert+0x6c>
 b70:	ea cf       	rjmp	.-44     	; 0xb46 <__ultoa_invert+0x58>
 b72:	b4 e0       	ldi	r27, 0x04	; 4
 b74:	a6 95       	lsr	r26
 b76:	97 95       	ror	r25
 b78:	87 95       	ror	r24
 b7a:	77 95       	ror	r23
 b7c:	67 95       	ror	r22
 b7e:	ba 95       	dec	r27
 b80:	c9 f7       	brne	.-14     	; 0xb74 <__ultoa_invert+0x86>
 b82:	00 97       	sbiw	r24, 0x00	; 0
 b84:	61 05       	cpc	r22, r1
 b86:	71 05       	cpc	r23, r1
 b88:	08 95       	ret
 b8a:	9b 01       	movw	r18, r22
 b8c:	ac 01       	movw	r20, r24
 b8e:	0a 2e       	mov	r0, r26
 b90:	06 94       	lsr	r0
 b92:	57 95       	ror	r21
 b94:	47 95       	ror	r20
 b96:	37 95       	ror	r19
 b98:	27 95       	ror	r18
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0xa2>
 b9e:	62 0f       	add	r22, r18
 ba0:	73 1f       	adc	r23, r19
 ba2:	84 1f       	adc	r24, r20
 ba4:	95 1f       	adc	r25, r21
 ba6:	a0 1d       	adc	r26, r0
 ba8:	08 95       	ret

00000baa <__divmodsi4>:
 baa:	05 2e       	mov	r0, r21
 bac:	97 fb       	bst	r25, 7
 bae:	1e f4       	brtc	.+6      	; 0xbb6 <__divmodsi4+0xc>
 bb0:	00 94       	com	r0
 bb2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__negsi2>
 bb6:	57 fd       	sbrc	r21, 7
 bb8:	07 d0       	rcall	.+14     	; 0xbc8 <__divmodsi4_neg2>
 bba:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__udivmodsi4>
 bbe:	07 fc       	sbrc	r0, 7
 bc0:	03 d0       	rcall	.+6      	; 0xbc8 <__divmodsi4_neg2>
 bc2:	4e f4       	brtc	.+18     	; 0xbd6 <__divmodsi4_exit>
 bc4:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__negsi2>

00000bc8 <__divmodsi4_neg2>:
 bc8:	50 95       	com	r21
 bca:	40 95       	com	r20
 bcc:	30 95       	com	r19
 bce:	21 95       	neg	r18
 bd0:	3f 4f       	sbci	r19, 0xFF	; 255
 bd2:	4f 4f       	sbci	r20, 0xFF	; 255
 bd4:	5f 4f       	sbci	r21, 0xFF	; 255

00000bd6 <__divmodsi4_exit>:
 bd6:	08 95       	ret

00000bd8 <__negsi2>:
 bd8:	90 95       	com	r25
 bda:	80 95       	com	r24
 bdc:	70 95       	com	r23
 bde:	61 95       	neg	r22
 be0:	7f 4f       	sbci	r23, 0xFF	; 255
 be2:	8f 4f       	sbci	r24, 0xFF	; 255
 be4:	9f 4f       	sbci	r25, 0xFF	; 255
 be6:	08 95       	ret

00000be8 <__muluhisi3>:
 be8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__umulhisi3>
 bec:	a5 9f       	mul	r26, r21
 bee:	90 0d       	add	r25, r0
 bf0:	b4 9f       	mul	r27, r20
 bf2:	90 0d       	add	r25, r0
 bf4:	a4 9f       	mul	r26, r20
 bf6:	80 0d       	add	r24, r0
 bf8:	91 1d       	adc	r25, r1
 bfa:	11 24       	eor	r1, r1
 bfc:	08 95       	ret

00000bfe <__mulshisi3>:
 bfe:	b7 ff       	sbrs	r27, 7
 c00:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__muluhisi3>

00000c04 <__mulohisi3>:
 c04:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__muluhisi3>
 c08:	82 1b       	sub	r24, r18
 c0a:	93 0b       	sbc	r25, r19
 c0c:	08 95       	ret

00000c0e <__prologue_saves__>:
 c0e:	2f 92       	push	r2
 c10:	3f 92       	push	r3
 c12:	4f 92       	push	r4
 c14:	5f 92       	push	r5
 c16:	6f 92       	push	r6
 c18:	7f 92       	push	r7
 c1a:	8f 92       	push	r8
 c1c:	9f 92       	push	r9
 c1e:	af 92       	push	r10
 c20:	bf 92       	push	r11
 c22:	cf 92       	push	r12
 c24:	df 92       	push	r13
 c26:	ef 92       	push	r14
 c28:	ff 92       	push	r15
 c2a:	0f 93       	push	r16
 c2c:	1f 93       	push	r17
 c2e:	cf 93       	push	r28
 c30:	df 93       	push	r29
 c32:	cd b7       	in	r28, 0x3d	; 61
 c34:	de b7       	in	r29, 0x3e	; 62
 c36:	ca 1b       	sub	r28, r26
 c38:	db 0b       	sbc	r29, r27
 c3a:	0f b6       	in	r0, 0x3f	; 63
 c3c:	f8 94       	cli
 c3e:	de bf       	out	0x3e, r29	; 62
 c40:	0f be       	out	0x3f, r0	; 63
 c42:	cd bf       	out	0x3d, r28	; 61
 c44:	09 94       	ijmp

00000c46 <__epilogue_restores__>:
 c46:	2a 88       	ldd	r2, Y+18	; 0x12
 c48:	39 88       	ldd	r3, Y+17	; 0x11
 c4a:	48 88       	ldd	r4, Y+16	; 0x10
 c4c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c4e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c50:	7d 84       	ldd	r7, Y+13	; 0x0d
 c52:	8c 84       	ldd	r8, Y+12	; 0x0c
 c54:	9b 84       	ldd	r9, Y+11	; 0x0b
 c56:	aa 84       	ldd	r10, Y+10	; 0x0a
 c58:	b9 84       	ldd	r11, Y+9	; 0x09
 c5a:	c8 84       	ldd	r12, Y+8	; 0x08
 c5c:	df 80       	ldd	r13, Y+7	; 0x07
 c5e:	ee 80       	ldd	r14, Y+6	; 0x06
 c60:	fd 80       	ldd	r15, Y+5	; 0x05
 c62:	0c 81       	ldd	r16, Y+4	; 0x04
 c64:	1b 81       	ldd	r17, Y+3	; 0x03
 c66:	aa 81       	ldd	r26, Y+2	; 0x02
 c68:	b9 81       	ldd	r27, Y+1	; 0x01
 c6a:	ce 0f       	add	r28, r30
 c6c:	d1 1d       	adc	r29, r1
 c6e:	0f b6       	in	r0, 0x3f	; 63
 c70:	f8 94       	cli
 c72:	de bf       	out	0x3e, r29	; 62
 c74:	0f be       	out	0x3f, r0	; 63
 c76:	cd bf       	out	0x3d, r28	; 61
 c78:	ed 01       	movw	r28, r26
 c7a:	08 95       	ret

00000c7c <__udivmodsi4>:
 c7c:	a1 e2       	ldi	r26, 0x21	; 33
 c7e:	1a 2e       	mov	r1, r26
 c80:	aa 1b       	sub	r26, r26
 c82:	bb 1b       	sub	r27, r27
 c84:	fd 01       	movw	r30, r26
 c86:	0d c0       	rjmp	.+26     	; 0xca2 <__udivmodsi4_ep>

00000c88 <__udivmodsi4_loop>:
 c88:	aa 1f       	adc	r26, r26
 c8a:	bb 1f       	adc	r27, r27
 c8c:	ee 1f       	adc	r30, r30
 c8e:	ff 1f       	adc	r31, r31
 c90:	a2 17       	cp	r26, r18
 c92:	b3 07       	cpc	r27, r19
 c94:	e4 07       	cpc	r30, r20
 c96:	f5 07       	cpc	r31, r21
 c98:	20 f0       	brcs	.+8      	; 0xca2 <__udivmodsi4_ep>
 c9a:	a2 1b       	sub	r26, r18
 c9c:	b3 0b       	sbc	r27, r19
 c9e:	e4 0b       	sbc	r30, r20
 ca0:	f5 0b       	sbc	r31, r21

00000ca2 <__udivmodsi4_ep>:
 ca2:	66 1f       	adc	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	99 1f       	adc	r25, r25
 caa:	1a 94       	dec	r1
 cac:	69 f7       	brne	.-38     	; 0xc88 <__udivmodsi4_loop>
 cae:	60 95       	com	r22
 cb0:	70 95       	com	r23
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	9b 01       	movw	r18, r22
 cb8:	ac 01       	movw	r20, r24
 cba:	bd 01       	movw	r22, r26
 cbc:	cf 01       	movw	r24, r30
 cbe:	08 95       	ret

00000cc0 <__umulhisi3>:
 cc0:	a2 9f       	mul	r26, r18
 cc2:	b0 01       	movw	r22, r0
 cc4:	b3 9f       	mul	r27, r19
 cc6:	c0 01       	movw	r24, r0
 cc8:	a3 9f       	mul	r26, r19
 cca:	70 0d       	add	r23, r0
 ccc:	81 1d       	adc	r24, r1
 cce:	11 24       	eor	r1, r1
 cd0:	91 1d       	adc	r25, r1
 cd2:	b2 9f       	mul	r27, r18
 cd4:	70 0d       	add	r23, r0
 cd6:	81 1d       	adc	r24, r1
 cd8:	11 24       	eor	r1, r1
 cda:	91 1d       	adc	r25, r1
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
