
byggern_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000144  00800100  00000fc4  00001058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800244  00800244  0000119c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ae1  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d11  00000000  00000000  00003f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011af  00000000  00000000  00004c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005bc  00000000  00000000  00005e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094e  00000000  00000000  000063c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc2  00000000  00000000  00006d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00007cd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 ec       	ldi	r30, 0xC4	; 196
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 34       	cpi	r26, 0x44	; 68
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a4 e4       	ldi	r26, 0x44	; 68
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 35       	cpi	r26, 0x50	; 80
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 66 02 	call	0x4cc	; 0x4cc <main>
  a6:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <set_ctc_mode>:
void init_interrupt(){
	clear_bit(GICR,5);		//clear the INT2 bit in GICR to avoid unintentional interrupts
	clear_bit(EMCUCR, 0);	//set ISC2 bit low to enable INT2 triggered by falling edge
	set_bit(GIFR, 5);		//clear interrupt flagg by writing a logic one to it
	set_bit(GICR, 5);		//set the INT2 bit in GICR to enable interrupts
	sei();					//set the I-bit in SREG (Global interrupt enable)
  ae:	eb e8       	ldi	r30, 0x8B	; 139
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	80 83       	st	Z, r24
  b8:	80 81       	ld	r24, Z
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	80 83       	st	Z, r24
  be:	ea e8       	ldi	r30, 0x8A	; 138
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
  c8:	80 81       	ld	r24, Z
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <set_selected_clock>:
  d0:	ea e8       	ldi	r30, 0x8A	; 138
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
  da:	80 81       	ld	r24, Z
  dc:	8d 7f       	andi	r24, 0xFD	; 253
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <set_compare_match_mode>:
  e8:	eb e8       	ldi	r30, 0x8B	; 139
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
  f2:	80 81       	ld	r24, Z
  f4:	8f 77       	andi	r24, 0x7F	; 127
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <init_pwm>:
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	81 bb       	out	0x11, r24	; 17
 100:	0e 94 57 00 	call	0xae	; 0xae <set_ctc_mode>
 104:	0e 94 68 00 	call	0xd0	; 0xd0 <set_selected_clock>
 108:	0e 94 74 00 	call	0xe8	; 0xe8 <set_compare_match_mode>
 10c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
 110:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
 114:	08 95       	ret

00000116 <init_adc>:
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	05 c0       	rjmp	.+10     	; 0x126 <init_adc+0x10>
 11c:	20 e1       	ldi	r18, 0x10	; 16
 11e:	28 0f       	add	r18, r24
 120:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x11b0>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	91 05       	cpc	r25, r1
 12a:	c4 f3       	brlt	.-16     	; 0x11c <init_adc+0x6>
 12c:	08 95       	ret

0000012e <SPI_MasterTransmit>:
 12e:	8f b9       	out	0x0f, r24	; 15
 130:	77 9b       	sbis	0x0e, 7	; 14
 132:	fe cf       	rjmp	.-4      	; 0x130 <SPI_MasterTransmit+0x2>
 134:	08 95       	ret

00000136 <SPI_MasterTrancieve>:
 136:	8f b9       	out	0x0f, r24	; 15
 138:	77 9b       	sbis	0x0e, 7	; 14
 13a:	fe cf       	rjmp	.-4      	; 0x138 <SPI_MasterTrancieve+0x2>
 13c:	8f b1       	in	r24, 0x0f	; 15
 13e:	08 95       	ret

00000140 <SPI_set_slave_select>:
 140:	86 b3       	in	r24, 0x16	; 22
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	88 bb       	out	0x18, r24	; 24
 146:	08 95       	ret

00000148 <SPI_clear_slave_select>:
 148:	86 b3       	in	r24, 0x16	; 22
 14a:	80 61       	ori	r24, 0x10	; 16
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	08 95       	ret

00000150 <SPI_MasterInit>:
 150:	87 b3       	in	r24, 0x17	; 23
 152:	80 62       	ori	r24, 0x20	; 32
 154:	87 bb       	out	0x17, r24	; 23
 156:	87 b3       	in	r24, 0x17	; 23
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	87 bb       	out	0x17, r24	; 23
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	80 61       	ori	r24, 0x10	; 16
 160:	87 bb       	out	0x17, r24	; 23
 162:	87 b3       	in	r24, 0x17	; 23
 164:	8f 7b       	andi	r24, 0xBF	; 191
 166:	87 bb       	out	0x17, r24	; 23
 168:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_clear_slave_select>
 16c:	83 e5       	ldi	r24, 0x53	; 83
 16e:	8d b9       	out	0x0d, r24	; 13
 170:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_clear_slave_select>
 174:	08 95       	ret

00000176 <mcp2515_read>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_set_slave_select>
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 18a:	8f e0       	ldi	r24, 0x0F	; 15
 18c:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_MasterTrancieve>
 190:	c8 2f       	mov	r28, r24
 192:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_clear_slave_select>
 196:	8c 2f       	mov	r24, r28
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <mcp2515_write>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	d8 2f       	mov	r29, r24
 1a2:	c6 2f       	mov	r28, r22
 1a4:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_set_slave_select>
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 1ae:	8d 2f       	mov	r24, r29
 1b0:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 1b4:	8c 2f       	mov	r24, r28
 1b6:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 1ba:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_clear_slave_select>
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <mcp2515_send_req>:
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
 1c8:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_set_slave_select>
 1cc:	c8 30       	cpi	r28, 0x08	; 8
 1ce:	30 f4       	brcc	.+12     	; 0x1dc <mcp2515_send_req+0x18>
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	8c 0f       	add	r24, r28
 1d4:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 1d8:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_clear_slave_select>
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <mcp2515_bit_mod>:
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	18 2f       	mov	r17, r24
 1e8:	d6 2f       	mov	r29, r22
 1ea:	c4 2f       	mov	r28, r20
 1ec:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_set_slave_select>
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 1f6:	81 2f       	mov	r24, r17
 1f8:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 1fc:	8d 2f       	mov	r24, r29
 1fe:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 208:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_clear_slave_select>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	08 95       	ret

00000214 <mcp2515_reset>:
 214:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_set_slave_select>
 218:	80 ec       	ldi	r24, 0xC0	; 192
 21a:	0e 94 97 00 	call	0x12e	; 0x12e <SPI_MasterTransmit>
 21e:	0e 94 a4 00 	call	0x148	; 0x148 <SPI_clear_slave_select>
 222:	08 95       	ret

00000224 <can_interrupt_enable>:
 224:	8a b7       	in	r24, 0x3a	; 58
 226:	80 64       	ori	r24, 0x40	; 64
 228:	8a bf       	out	0x3a, r24	; 58
 22a:	8b b7       	in	r24, 0x3b	; 59
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	8b bf       	out	0x3b, r24	; 59
 230:	85 b7       	in	r24, 0x35	; 53
 232:	82 60       	ori	r24, 0x02	; 2
 234:	85 bf       	out	0x35, r24	; 53
 236:	85 b7       	in	r24, 0x35	; 53
 238:	8e 7f       	andi	r24, 0xFE	; 254
 23a:	85 bf       	out	0x35, r24	; 53
 23c:	78 94       	sei
 23e:	08 95       	ret

00000240 <can_set_config_mode>:
 240:	48 2f       	mov	r20, r24
 242:	60 ee       	ldi	r22, 0xE0	; 224
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mcp2515_bit_mod>
 24a:	08 95       	ret

0000024c <init_can>:
 24c:	0e 94 12 01 	call	0x224	; 0x224 <can_interrupt_enable>
 250:	41 ec       	ldi	r20, 0xC1	; 193
 252:	6f ef       	ldi	r22, 0xFF	; 255
 254:	8a e2       	ldi	r24, 0x2A	; 42
 256:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mcp2515_bit_mod>
 25a:	49 e7       	ldi	r20, 0x79	; 121
 25c:	6f ef       	ldi	r22, 0xFF	; 255
 25e:	89 e2       	ldi	r24, 0x29	; 41
 260:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mcp2515_bit_mod>
 264:	47 e8       	ldi	r20, 0x87	; 135
 266:	6f ef       	ldi	r22, 0xFF	; 255
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mcp2515_bit_mod>
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	0e 94 20 01 	call	0x240	; 0x240 <can_set_config_mode>
 274:	43 e0       	ldi	r20, 0x03	; 3
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	8b e2       	ldi	r24, 0x2B	; 43
 27a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mcp2515_bit_mod>
 27e:	08 95       	ret

00000280 <can_transmit_tx_buf0>:
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	c6 2f       	mov	r28, r22
 28c:	f7 2e       	mov	r15, r23
 28e:	08 2f       	mov	r16, r24
 290:	19 2f       	mov	r17, r25
 292:	66 95       	lsr	r22
 294:	66 95       	lsr	r22
 296:	66 95       	lsr	r22
 298:	81 e3       	ldi	r24, 0x31	; 49
 29a:	0e 94 ce 00 	call	0x19c	; 0x19c <mcp2515_write>
 29e:	6c 2f       	mov	r22, r28
 2a0:	62 95       	swap	r22
 2a2:	66 0f       	add	r22, r22
 2a4:	60 7e       	andi	r22, 0xE0	; 224
 2a6:	82 e3       	ldi	r24, 0x32	; 50
 2a8:	0e 94 ce 00 	call	0x19c	; 0x19c <mcp2515_write>
 2ac:	df 2d       	mov	r29, r15
 2ae:	6f 2d       	mov	r22, r15
 2b0:	85 e3       	ldi	r24, 0x35	; 53
 2b2:	0e 94 ce 00 	call	0x19c	; 0x19c <mcp2515_write>
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	0b c0       	rjmp	.+22     	; 0x2d0 <can_transmit_tx_buf0+0x50>
 2ba:	80 2f       	mov	r24, r16
 2bc:	91 2f       	mov	r25, r17
 2be:	fc 01       	movw	r30, r24
 2c0:	ec 0f       	add	r30, r28
 2c2:	f1 1d       	adc	r31, r1
 2c4:	60 81       	ld	r22, Z
 2c6:	86 e3       	ldi	r24, 0x36	; 54
 2c8:	8c 0f       	add	r24, r28
 2ca:	0e 94 ce 00 	call	0x19c	; 0x19c <mcp2515_write>
 2ce:	cf 5f       	subi	r28, 0xFF	; 255
 2d0:	cd 17       	cp	r28, r29
 2d2:	10 f4       	brcc	.+4      	; 0x2d8 <can_transmit_tx_buf0+0x58>
 2d4:	c8 30       	cpi	r28, 0x08	; 8
 2d6:	88 f3       	brcs	.-30     	; 0x2ba <can_transmit_tx_buf0+0x3a>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <mcp2515_send_req>
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	08 95       	ret

000002ea <can_read_rx_buf0>:
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	81 e6       	ldi	r24, 0x61	; 97
 2fa:	0e 94 bb 00 	call	0x176	; 0x176 <mcp2515_read>
 2fe:	d8 2e       	mov	r13, r24
 300:	dd 0c       	add	r13, r13
 302:	dd 0c       	add	r13, r13
 304:	dd 0c       	add	r13, r13
 306:	82 e6       	ldi	r24, 0x62	; 98
 308:	0e 94 bb 00 	call	0x176	; 0x176 <mcp2515_read>
 30c:	82 95       	swap	r24
 30e:	86 95       	lsr	r24
 310:	87 70       	andi	r24, 0x07	; 7
 312:	d8 0e       	add	r13, r24
 314:	85 e6       	ldi	r24, 0x65	; 101
 316:	0e 94 bb 00 	call	0x176	; 0x176 <mcp2515_read>
 31a:	d8 2f       	mov	r29, r24
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <malloc>
 322:	7c 01       	movw	r14, r24
 324:	c0 e0       	ldi	r28, 0x00	; 0
 326:	0a c0       	rjmp	.+20     	; 0x33c <can_read_rx_buf0+0x52>
 328:	87 01       	movw	r16, r14
 32a:	0c 0f       	add	r16, r28
 32c:	11 1d       	adc	r17, r1
 32e:	86 e6       	ldi	r24, 0x66	; 102
 330:	8c 0f       	add	r24, r28
 332:	0e 94 bb 00 	call	0x176	; 0x176 <mcp2515_read>
 336:	f8 01       	movw	r30, r16
 338:	80 83       	st	Z, r24
 33a:	cf 5f       	subi	r28, 0xFF	; 255
 33c:	cd 17       	cp	r28, r29
 33e:	10 f4       	brcc	.+4      	; 0x344 <can_read_rx_buf0+0x5a>
 340:	c8 30       	cpi	r28, 0x08	; 8
 342:	90 f3       	brcs	.-28     	; 0x328 <can_read_rx_buf0+0x3e>
 344:	6d 2d       	mov	r22, r13
 346:	7d 2f       	mov	r23, r29
 348:	8e 2d       	mov	r24, r14
 34a:	9f 2d       	mov	r25, r15
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	df 90       	pop	r13
 35a:	08 95       	ret

0000035c <display_can_frame>:
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	d6 2f       	mov	r29, r22
 366:	c7 2f       	mov	r28, r23
 368:	08 2f       	mov	r16, r24
 36a:	19 2f       	mov	r17, r25
 36c:	86 e2       	ldi	r24, 0x26	; 38
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	9f 93       	push	r25
 372:	8f 93       	push	r24
 374:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
 378:	1f 92       	push	r1
 37a:	df 93       	push	r29
 37c:	81 e3       	ldi	r24, 0x31	; 49
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	9f 93       	push	r25
 382:	8f 93       	push	r24
 384:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
 388:	dc 2f       	mov	r29, r28
 38a:	1f 92       	push	r1
 38c:	cf 93       	push	r28
 38e:	8d e3       	ldi	r24, 0x3D	; 61
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
 39a:	8d b7       	in	r24, 0x3d	; 61
 39c:	9e b7       	in	r25, 0x3e	; 62
 39e:	0a 96       	adiw	r24, 0x0a	; 10
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	9e bf       	out	0x3e, r25	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	8d bf       	out	0x3d, r24	; 61
 3aa:	c0 e0       	ldi	r28, 0x00	; 0
 3ac:	13 c0       	rjmp	.+38     	; 0x3d4 <display_can_frame+0x78>
 3ae:	80 2f       	mov	r24, r16
 3b0:	91 2f       	mov	r25, r17
 3b2:	fc 01       	movw	r30, r24
 3b4:	ec 0f       	add	r30, r28
 3b6:	f1 1d       	adc	r31, r1
 3b8:	80 81       	ld	r24, Z
 3ba:	1f 92       	push	r1
 3bc:	8f 93       	push	r24
 3be:	88 e3       	ldi	r24, 0x38	; 56
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	9f 93       	push	r25
 3c4:	8f 93       	push	r24
 3c6:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
 3ca:	cf 5f       	subi	r28, 0xFF	; 255
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	cd 17       	cp	r28, r29
 3d6:	58 f3       	brcs	.-42     	; 0x3ae <display_can_frame+0x52>
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret

000003e2 <__vector_1>:
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
 404:	8e e0       	ldi	r24, 0x0E	; 14
 406:	0e 94 bb 00 	call	0x176	; 0x176 <mcp2515_read>
 40a:	8e 70       	andi	r24, 0x0E	; 14
 40c:	8c 30       	cpi	r24, 0x0C	; 12
 40e:	21 f4       	brne	.+8      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
 410:	0e 94 75 01 	call	0x2ea	; 0x2ea <can_read_rx_buf0>
 414:	0e 94 ae 01 	call	0x35c	; 0x35c <display_can_frame>
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	65 e0       	ldi	r22, 0x05	; 5
 41c:	8c e2       	ldi	r24, 0x2C	; 44
 41e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mcp2515_bit_mod>
 422:	8a b7       	in	r24, 0x3a	; 58
 424:	80 64       	ori	r24, 0x40	; 64
 426:	8a bf       	out	0x3a, r24	; 58
 428:	ff 91       	pop	r31
 42a:	ef 91       	pop	r30
 42c:	bf 91       	pop	r27
 42e:	af 91       	pop	r26
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	7f 91       	pop	r23
 436:	6f 91       	pop	r22
 438:	5f 91       	pop	r21
 43a:	4f 91       	pop	r20
 43c:	3f 91       	pop	r19
 43e:	2f 91       	pop	r18
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <__vector_3>:
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
 46c:	84 e5       	ldi	r24, 0x54	; 84
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	9f 93       	push	r25
 472:	8f 93       	push	r24
 474:	0e 94 df 04 	call	0x9be	; 0x9be <printf>
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <init_pin_directions>:
#include "joystick_button.h"

void init_pin_directions()
{
	// set PORTB PIN0 direction as output
	set_bit(DDRB, DDB0);
 49e:	87 b3       	in	r24, 0x17	; 23
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	87 bb       	out	0x17, r24	; 23
	// mcp transistor
	set_bit(DDRB, DDB1);
 4a4:	87 b3       	in	r24, 0x17	; 23
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	87 bb       	out	0x17, r24	; 23
	char reg = PINB;
 4aa:	86 b3       	in	r24, 0x16	; 22
	set_bit(reg, DDB1);
 4ac:	82 60       	ori	r24, 0x02	; 2
	PORTB = reg;
 4ae:	88 bb       	out	0x18, r24	; 24
 4b0:	08 95       	ret

000004b2 <init_ext_mem>:
}

void init_ext_mem()
{
	// enable XMEM
	set_bit(MCUCR, SRE);
 4b2:	85 b7       	in	r24, 0x35	; 53
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	85 bf       	out	0x35, r24	; 53
	// release 4 msb to jtag
	set_bit(SFIOR, XMM2);
 4b8:	80 b7       	in	r24, 0x30	; 48
 4ba:	80 62       	ori	r24, 0x20	; 32
 4bc:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
 4be:	80 b7       	in	r24, 0x30	; 48
 4c0:	8f 7e       	andi	r24, 0xEF	; 239
 4c2:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
 4c4:	80 b7       	in	r24, 0x30	; 48
 4c6:	87 7f       	andi	r24, 0xF7	; 247
 4c8:	80 bf       	out	0x30, r24	; 48
 4ca:	08 95       	ret

000004cc <main>:

void test_static_address();

int main(void)
{
    init_pin_directions();
 4cc:	0e 94 4f 02 	call	0x49e	; 0x49e <init_pin_directions>
	init_ext_mem();
 4d0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <init_ext_mem>
	init_pwm();
 4d4:	0e 94 7d 00 	call	0xfa	; 0xfa <init_pwm>
	USART_Init(MYUBRR);
 4d8:	8f e1       	ldi	r24, 0x1F	; 31
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <USART_Init>
	init_adc();
 4e0:	0e 94 8b 00 	call	0x116	; 0x116 <init_adc>
	init_oled();
 4e4:	0e 94 b0 02 	call	0x560	; 0x560 <init_oled>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e8:	23 e0       	ldi	r18, 0x03	; 3
 4ea:	2a 95       	dec	r18
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <main+0x1e>
 4ee:	00 00       	nop
	//init_can();
	//init_interrupt();
	
	
	_delay_us(2); // the MCP takes a maximum of 2 us to be ready for a reset
	SPI_MasterInit();
 4f0:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_MasterInit>
	mcp2515_reset();
 4f4:	0e 94 0a 01 	call	0x214	; 0x214 <mcp2515_reset>
	
	// todo: change transmit and receive to int return, error handling?
	fdevopen(USART_Transmit, USART_Receive);
 4f8:	6e e6       	ldi	r22, 0x6E	; 110
 4fa:	73 e0       	ldi	r23, 0x03	; 3
 4fc:	88 e6       	ldi	r24, 0x68	; 104
 4fe:	93 e0       	ldi	r25, 0x03	; 3
 500:	0e 94 94 04 	call	0x928	; 0x928 <fdevopen>
	
	// test functions
	//test_static_address();
	//SRAM_test();
	
	oled_fill_entire(0x0F);
 504:	8f e0       	ldi	r24, 0x0F	; 15
 506:	0e 94 c4 02 	call	0x588	; 0x588 <oled_fill_entire>
	// oled_goto_page(0);
	//printf("\n\r arrow = ");
	//oled_draw_arrow();
	
	//_delay_ms(10000);
	toggle_pin('B', 1);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	82 e4       	ldi	r24, 0x42	; 66
 50e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <toggle_pin>
	
	//mcp2515_reset();
	//_delay_ms(1000);
	
	
	init_can();
 512:	0e 94 26 01 	call	0x24c	; 0x24c <init_can>
    while (1) 
    {
		/* TEST */
		//printf("\n\r-- LOOP --\n\r");
		//mcp2515_reset();
		mcp2515_read(0x0e);
 516:	8e e0       	ldi	r24, 0x0E	; 14
 518:	0e 94 bb 00 	call	0x176	; 0x176 <mcp2515_read>
		struct can_msg_t msg;
		msg.id = 0xf0;
		msg.data_l = 4;
		msg.data = (uint8_t*)malloc(msg.data_l);
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 73 03 	call	0x6e6	; 0x6e6 <malloc>
 524:	ec 01       	movw	r28, r24
		msg.data[0] = 0x12;
 526:	82 e1       	ldi	r24, 0x12	; 18
 528:	88 83       	st	Y, r24
		msg.data[1] = 0x34;
 52a:	84 e3       	ldi	r24, 0x34	; 52
 52c:	89 83       	std	Y+1, r24	; 0x01
		msg.data[2] = 0x56;
 52e:	86 e5       	ldi	r24, 0x56	; 86
 530:	8a 83       	std	Y+2, r24	; 0x02
		can_transmit_tx_buf0(msg);
 532:	60 ef       	ldi	r22, 0xF0	; 240
 534:	74 e0       	ldi	r23, 0x04	; 4
 536:	8c 2f       	mov	r24, r28
 538:	9d 2f       	mov	r25, r29
 53a:	0e 94 40 01 	call	0x280	; 0x280 <can_transmit_tx_buf0>
		free(msg.data);
 53e:	ce 01       	movw	r24, r28
 540:	0e 94 0b 04 	call	0x816	; 0x816 <free>
		
		/* OLED RENDER */
		//oled_render();
		
		/* LOOP PERIOD AND LED */
		toggle_pin('B', 0);
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	82 e4       	ldi	r24, 0x42	; 66
 548:	0e 94 d5 02 	call	0x5aa	; 0x5aa <toggle_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	9f ef       	ldi	r25, 0xFF	; 255
 550:	2e e0       	ldi	r18, 0x0E	; 14
 552:	81 50       	subi	r24, 0x01	; 1
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	20 40       	sbci	r18, 0x00	; 0
 558:	e1 f7       	brne	.-8      	; 0x552 <__stack+0x53>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <__stack+0x5d>
 55c:	00 00       	nop
 55e:	db cf       	rjmp	.-74     	; 0x516 <__stack+0x17>

00000560 <init_oled>:


void oled_write(unsigned char c){
	oled_sram_base[current_adr] = c;
	current_adr++;
	current_adr %= 1024;
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	07 c0       	rjmp	.+14     	; 0x574 <init_oled+0x14>
 566:	fc 01       	movw	r30, r24
 568:	e2 5d       	subi	r30, 0xD2	; 210
 56a:	fd 4f       	sbci	r31, 0xFD	; 253
 56c:	20 81       	ld	r18, Z
 56e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__bss_end+0xdb0>
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	86 31       	cpi	r24, 0x16	; 22
 576:	91 05       	cpc	r25, r1
 578:	b4 f3       	brlt	.-20     	; 0x566 <init_oled+0x6>
 57a:	e0 e0       	ldi	r30, 0x00	; 0
 57c:	f0 e1       	ldi	r31, 0x10	; 16
 57e:	80 e2       	ldi	r24, 0x20	; 32
 580:	80 83       	st	Z, r24
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	80 83       	st	Z, r24
 586:	08 95       	ret

00000588 <oled_fill_entire>:
}

void oled_fill_entire(unsigned char c)
{	
	for(int i = 0; i < 1024; i++) {
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	05 c0       	rjmp	.+10     	; 0x598 <oled_fill_entire+0x10>
		//if (i % 128 == 0) *oled_c_base = 0xb0 + i / 128;
		oled_sram_base[i] = c;
 58e:	f9 01       	movw	r30, r18
 590:	f4 5e       	subi	r31, 0xE4	; 228
 592:	80 83       	st	Z, r24
	current_adr %= 1024;
}

void oled_fill_entire(unsigned char c)
{	
	for(int i = 0; i < 1024; i++) {
 594:	2f 5f       	subi	r18, 0xFF	; 255
 596:	3f 4f       	sbci	r19, 0xFF	; 255
 598:	21 15       	cp	r18, r1
 59a:	94 e0       	ldi	r25, 0x04	; 4
 59c:	39 07       	cpc	r19, r25
 59e:	bc f3       	brlt	.-18     	; 0x58e <oled_fill_entire+0x6>
		//if (i % 128 == 0) *oled_c_base = 0xb0 + i / 128;
		oled_sram_base[i] = c;
	}
	current_adr = 0;
 5a0:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <__data_end+0x1>
 5a4:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__data_end>
 5a8:	08 95       	ret

000005aa <toggle_pin>:

#include "pin_util.h"

void toggle_pin(char port, uint8_t pin)
{
	if(pin > 7){
 5aa:	68 30       	cpi	r22, 0x08	; 8
 5ac:	08 f0       	brcs	.+2      	; 0x5b0 <toggle_pin+0x6>
 5ae:	88 c0       	rjmp	.+272    	; 0x6c0 <toggle_pin+0x116>
		// too high pin number
		return;
	}
	
	switch (port)
 5b0:	82 34       	cpi	r24, 0x42	; 66
 5b2:	51 f1       	breq	.+84     	; 0x608 <toggle_pin+0x5e>
 5b4:	18 f4       	brcc	.+6      	; 0x5bc <toggle_pin+0x12>
 5b6:	81 34       	cpi	r24, 0x41	; 65
 5b8:	41 f0       	breq	.+16     	; 0x5ca <toggle_pin+0x20>
 5ba:	08 95       	ret
 5bc:	83 34       	cpi	r24, 0x43	; 67
 5be:	09 f4       	brne	.+2      	; 0x5c2 <toggle_pin+0x18>
 5c0:	42 c0       	rjmp	.+132    	; 0x646 <toggle_pin+0x9c>
 5c2:	84 34       	cpi	r24, 0x44	; 68
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <toggle_pin+0x1e>
 5c6:	5e c0       	rjmp	.+188    	; 0x684 <toggle_pin+0xda>
 5c8:	08 95       	ret
	{
		unsigned char reg;
		uint8_t pin_value;
		case 'A':
			reg = PINA;
 5ca:	89 b3       	in	r24, 0x19	; 25
			// 0000x000
			// 0000000x & 00000001
			pin_value = (reg>>pin)&1;
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	06 2e       	mov	r0, r22
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <toggle_pin+0x2e>
 5d4:	35 95       	asr	r19
 5d6:	27 95       	ror	r18
 5d8:	0a 94       	dec	r0
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <toggle_pin+0x2a>
			// reg = xxxxxxxx
			// set_bit(reg, 2)
			// reg = xxxxx1xx
			if (pin_value){
 5dc:	20 ff       	sbrs	r18, 0
 5de:	0a c0       	rjmp	.+20     	; 0x5f4 <toggle_pin+0x4a>
				clear_bit(reg, pin);
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <toggle_pin+0x40>
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <toggle_pin+0x3c>
 5ee:	20 95       	com	r18
 5f0:	82 23       	and	r24, r18
 5f2:	08 c0       	rjmp	.+16     	; 0x604 <toggle_pin+0x5a>
			} else {
				set_bit(reg, pin);
 5f4:	21 e0       	ldi	r18, 0x01	; 1
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <toggle_pin+0x54>
 5fa:	22 0f       	add	r18, r18
 5fc:	33 1f       	adc	r19, r19
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <toggle_pin+0x50>
 602:	82 2b       	or	r24, r18
			}
			PORTA = reg;
 604:	8b bb       	out	0x1b, r24	; 27
			break;
 606:	08 95       	ret
		case 'B':
			reg = PINB;
 608:	86 b3       	in	r24, 0x16	; 22
			pin_value = (reg>>pin)&1;
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	06 2e       	mov	r0, r22
 610:	02 c0       	rjmp	.+4      	; 0x616 <toggle_pin+0x6c>
 612:	35 95       	asr	r19
 614:	27 95       	ror	r18
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <toggle_pin+0x68>
			if (pin_value){
 61a:	20 ff       	sbrs	r18, 0
 61c:	0a c0       	rjmp	.+20     	; 0x632 <toggle_pin+0x88>
				clear_bit(reg, pin);
 61e:	21 e0       	ldi	r18, 0x01	; 1
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <toggle_pin+0x7e>
 624:	22 0f       	add	r18, r18
 626:	33 1f       	adc	r19, r19
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <toggle_pin+0x7a>
 62c:	20 95       	com	r18
 62e:	82 23       	and	r24, r18
 630:	08 c0       	rjmp	.+16     	; 0x642 <toggle_pin+0x98>
			} else {
				set_bit(reg, pin);
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <toggle_pin+0x92>
 638:	22 0f       	add	r18, r18
 63a:	33 1f       	adc	r19, r19
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <toggle_pin+0x8e>
 640:	82 2b       	or	r24, r18
			}
			PORTB = reg;
 642:	88 bb       	out	0x18, r24	; 24
			break;
 644:	08 95       	ret
		case 'C':
			reg = PINC;
 646:	83 b3       	in	r24, 0x13	; 19
			pin_value = (reg>>pin)&1;
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	06 2e       	mov	r0, r22
 64e:	02 c0       	rjmp	.+4      	; 0x654 <toggle_pin+0xaa>
 650:	35 95       	asr	r19
 652:	27 95       	ror	r18
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <toggle_pin+0xa6>
			if (pin_value){
 658:	20 ff       	sbrs	r18, 0
 65a:	0a c0       	rjmp	.+20     	; 0x670 <toggle_pin+0xc6>
				clear_bit(reg, pin);
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <toggle_pin+0xbc>
 662:	22 0f       	add	r18, r18
 664:	33 1f       	adc	r19, r19
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <toggle_pin+0xb8>
 66a:	20 95       	com	r18
 66c:	82 23       	and	r24, r18
 66e:	08 c0       	rjmp	.+16     	; 0x680 <toggle_pin+0xd6>
			} else {
				set_bit(reg, pin);
 670:	21 e0       	ldi	r18, 0x01	; 1
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <toggle_pin+0xd0>
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <toggle_pin+0xcc>
 67e:	82 2b       	or	r24, r18
			}
			PORTC = reg;
 680:	85 bb       	out	0x15, r24	; 21
			break;
 682:	08 95       	ret
		case 'D':
			reg = PIND;
 684:	80 b3       	in	r24, 0x10	; 16
			pin_value = (reg>>pin)&1;
 686:	28 2f       	mov	r18, r24
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	06 2e       	mov	r0, r22
 68c:	02 c0       	rjmp	.+4      	; 0x692 <toggle_pin+0xe8>
 68e:	35 95       	asr	r19
 690:	27 95       	ror	r18
 692:	0a 94       	dec	r0
 694:	e2 f7       	brpl	.-8      	; 0x68e <toggle_pin+0xe4>
			if (pin_value){
 696:	20 ff       	sbrs	r18, 0
 698:	0a c0       	rjmp	.+20     	; 0x6ae <toggle_pin+0x104>
				clear_bit(reg, pin);
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <toggle_pin+0xfa>
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	6a 95       	dec	r22
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <toggle_pin+0xf6>
 6a8:	20 95       	com	r18
 6aa:	82 23       	and	r24, r18
 6ac:	08 c0       	rjmp	.+16     	; 0x6be <toggle_pin+0x114>
			} else {
				set_bit(reg, pin);
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <toggle_pin+0x10e>
 6b4:	22 0f       	add	r18, r18
 6b6:	33 1f       	adc	r19, r19
 6b8:	6a 95       	dec	r22
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <toggle_pin+0x10a>
 6bc:	82 2b       	or	r24, r18
			}
			PORTD = reg;
 6be:	82 bb       	out	0x12, r24	; 18
 6c0:	08 95       	ret

000006c2 <USART_Init>:
// Following functions are taken from "Atmel AVR ATmega162 datasheet"

void USART_Init(unsigned int ubrr)
{
	/* set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 6c2:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 6c4:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 6c6:	88 e1       	ldi	r24, 0x18	; 24
 6c8:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 6ca:	8e e8       	ldi	r24, 0x8E	; 142
 6cc:	80 bd       	out	0x20, r24	; 32
 6ce:	08 95       	ret

000006d0 <USART_Transmit>:
}

int USART_Transmit (char data, FILE* file)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0) ));
 6d0:	5d 9b       	sbis	0x0b, 5	; 11
 6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <USART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 6d4:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	08 95       	ret

000006dc <USART_Receive>:

int USART_Receive ( FILE* file )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 6dc:	5f 9b       	sbis	0x0b, 7	; 11
 6de:	fe cf       	rjmp	.-4      	; 0x6dc <USART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 6e0:	8c b1       	in	r24, 0x0c	; 12
}
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	08 95       	ret

000006e6 <malloc>:
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	82 30       	cpi	r24, 0x02	; 2
 6f0:	91 05       	cpc	r25, r1
 6f2:	10 f4       	brcc	.+4      	; 0x6f8 <malloc+0x12>
 6f4:	82 e0       	ldi	r24, 0x02	; 2
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__flp>
 6fc:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <__flp+0x1>
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	a0 e0       	ldi	r26, 0x00	; 0
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	30 97       	sbiw	r30, 0x00	; 0
 70a:	19 f1       	breq	.+70     	; 0x752 <malloc+0x6c>
 70c:	40 81       	ld	r20, Z
 70e:	51 81       	ldd	r21, Z+1	; 0x01
 710:	02 81       	ldd	r16, Z+2	; 0x02
 712:	13 81       	ldd	r17, Z+3	; 0x03
 714:	48 17       	cp	r20, r24
 716:	59 07       	cpc	r21, r25
 718:	c8 f0       	brcs	.+50     	; 0x74c <malloc+0x66>
 71a:	84 17       	cp	r24, r20
 71c:	95 07       	cpc	r25, r21
 71e:	69 f4       	brne	.+26     	; 0x73a <malloc+0x54>
 720:	10 97       	sbiw	r26, 0x00	; 0
 722:	31 f0       	breq	.+12     	; 0x730 <malloc+0x4a>
 724:	12 96       	adiw	r26, 0x02	; 2
 726:	0c 93       	st	X, r16
 728:	12 97       	sbiw	r26, 0x02	; 2
 72a:	13 96       	adiw	r26, 0x03	; 3
 72c:	1c 93       	st	X, r17
 72e:	27 c0       	rjmp	.+78     	; 0x77e <malloc+0x98>
 730:	00 93 48 02 	sts	0x0248, r16	; 0x800248 <__flp>
 734:	10 93 49 02 	sts	0x0249, r17	; 0x800249 <__flp+0x1>
 738:	22 c0       	rjmp	.+68     	; 0x77e <malloc+0x98>
 73a:	21 15       	cp	r18, r1
 73c:	31 05       	cpc	r19, r1
 73e:	19 f0       	breq	.+6      	; 0x746 <malloc+0x60>
 740:	42 17       	cp	r20, r18
 742:	53 07       	cpc	r21, r19
 744:	18 f4       	brcc	.+6      	; 0x74c <malloc+0x66>
 746:	9a 01       	movw	r18, r20
 748:	bd 01       	movw	r22, r26
 74a:	ef 01       	movw	r28, r30
 74c:	df 01       	movw	r26, r30
 74e:	f8 01       	movw	r30, r16
 750:	db cf       	rjmp	.-74     	; 0x708 <malloc+0x22>
 752:	21 15       	cp	r18, r1
 754:	31 05       	cpc	r19, r1
 756:	f9 f0       	breq	.+62     	; 0x796 <malloc+0xb0>
 758:	28 1b       	sub	r18, r24
 75a:	39 0b       	sbc	r19, r25
 75c:	24 30       	cpi	r18, 0x04	; 4
 75e:	31 05       	cpc	r19, r1
 760:	80 f4       	brcc	.+32     	; 0x782 <malloc+0x9c>
 762:	8a 81       	ldd	r24, Y+2	; 0x02
 764:	9b 81       	ldd	r25, Y+3	; 0x03
 766:	61 15       	cp	r22, r1
 768:	71 05       	cpc	r23, r1
 76a:	21 f0       	breq	.+8      	; 0x774 <malloc+0x8e>
 76c:	fb 01       	movw	r30, r22
 76e:	93 83       	std	Z+3, r25	; 0x03
 770:	82 83       	std	Z+2, r24	; 0x02
 772:	04 c0       	rjmp	.+8      	; 0x77c <malloc+0x96>
 774:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <__flp+0x1>
 778:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <__flp>
 77c:	fe 01       	movw	r30, r28
 77e:	32 96       	adiw	r30, 0x02	; 2
 780:	44 c0       	rjmp	.+136    	; 0x80a <malloc+0x124>
 782:	fe 01       	movw	r30, r28
 784:	e2 0f       	add	r30, r18
 786:	f3 1f       	adc	r31, r19
 788:	81 93       	st	Z+, r24
 78a:	91 93       	st	Z+, r25
 78c:	22 50       	subi	r18, 0x02	; 2
 78e:	31 09       	sbc	r19, r1
 790:	39 83       	std	Y+1, r19	; 0x01
 792:	28 83       	st	Y, r18
 794:	3a c0       	rjmp	.+116    	; 0x80a <malloc+0x124>
 796:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <__brkval>
 79a:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <__brkval+0x1>
 79e:	23 2b       	or	r18, r19
 7a0:	41 f4       	brne	.+16     	; 0x7b2 <malloc+0xcc>
 7a2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7a6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7aa:	30 93 47 02 	sts	0x0247, r19	; 0x800247 <__brkval+0x1>
 7ae:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <__brkval>
 7b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7ba:	21 15       	cp	r18, r1
 7bc:	31 05       	cpc	r19, r1
 7be:	41 f4       	brne	.+16     	; 0x7d0 <malloc+0xea>
 7c0:	2d b7       	in	r18, 0x3d	; 61
 7c2:	3e b7       	in	r19, 0x3e	; 62
 7c4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7c8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7cc:	24 1b       	sub	r18, r20
 7ce:	35 0b       	sbc	r19, r21
 7d0:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <__brkval>
 7d4:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <__brkval+0x1>
 7d8:	e2 17       	cp	r30, r18
 7da:	f3 07       	cpc	r31, r19
 7dc:	a0 f4       	brcc	.+40     	; 0x806 <malloc+0x120>
 7de:	2e 1b       	sub	r18, r30
 7e0:	3f 0b       	sbc	r19, r31
 7e2:	28 17       	cp	r18, r24
 7e4:	39 07       	cpc	r19, r25
 7e6:	78 f0       	brcs	.+30     	; 0x806 <malloc+0x120>
 7e8:	ac 01       	movw	r20, r24
 7ea:	4e 5f       	subi	r20, 0xFE	; 254
 7ec:	5f 4f       	sbci	r21, 0xFF	; 255
 7ee:	24 17       	cp	r18, r20
 7f0:	35 07       	cpc	r19, r21
 7f2:	48 f0       	brcs	.+18     	; 0x806 <malloc+0x120>
 7f4:	4e 0f       	add	r20, r30
 7f6:	5f 1f       	adc	r21, r31
 7f8:	50 93 47 02 	sts	0x0247, r21	; 0x800247 <__brkval+0x1>
 7fc:	40 93 46 02 	sts	0x0246, r20	; 0x800246 <__brkval>
 800:	81 93       	st	Z+, r24
 802:	91 93       	st	Z+, r25
 804:	02 c0       	rjmp	.+4      	; 0x80a <malloc+0x124>
 806:	e0 e0       	ldi	r30, 0x00	; 0
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	cf 01       	movw	r24, r30
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	08 95       	ret

00000816 <free>:
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	09 f4       	brne	.+2      	; 0x820 <free+0xa>
 81e:	81 c0       	rjmp	.+258    	; 0x922 <free+0x10c>
 820:	fc 01       	movw	r30, r24
 822:	32 97       	sbiw	r30, 0x02	; 2
 824:	13 82       	std	Z+3, r1	; 0x03
 826:	12 82       	std	Z+2, r1	; 0x02
 828:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <__flp>
 82c:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <__flp+0x1>
 830:	10 97       	sbiw	r26, 0x00	; 0
 832:	81 f4       	brne	.+32     	; 0x854 <free+0x3e>
 834:	20 81       	ld	r18, Z
 836:	31 81       	ldd	r19, Z+1	; 0x01
 838:	82 0f       	add	r24, r18
 83a:	93 1f       	adc	r25, r19
 83c:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <__brkval>
 840:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <__brkval+0x1>
 844:	28 17       	cp	r18, r24
 846:	39 07       	cpc	r19, r25
 848:	51 f5       	brne	.+84     	; 0x89e <free+0x88>
 84a:	f0 93 47 02 	sts	0x0247, r31	; 0x800247 <__brkval+0x1>
 84e:	e0 93 46 02 	sts	0x0246, r30	; 0x800246 <__brkval>
 852:	67 c0       	rjmp	.+206    	; 0x922 <free+0x10c>
 854:	ed 01       	movw	r28, r26
 856:	20 e0       	ldi	r18, 0x00	; 0
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	ce 17       	cp	r28, r30
 85c:	df 07       	cpc	r29, r31
 85e:	40 f4       	brcc	.+16     	; 0x870 <free+0x5a>
 860:	4a 81       	ldd	r20, Y+2	; 0x02
 862:	5b 81       	ldd	r21, Y+3	; 0x03
 864:	9e 01       	movw	r18, r28
 866:	41 15       	cp	r20, r1
 868:	51 05       	cpc	r21, r1
 86a:	f1 f0       	breq	.+60     	; 0x8a8 <free+0x92>
 86c:	ea 01       	movw	r28, r20
 86e:	f5 cf       	rjmp	.-22     	; 0x85a <free+0x44>
 870:	d3 83       	std	Z+3, r29	; 0x03
 872:	c2 83       	std	Z+2, r28	; 0x02
 874:	40 81       	ld	r20, Z
 876:	51 81       	ldd	r21, Z+1	; 0x01
 878:	84 0f       	add	r24, r20
 87a:	95 1f       	adc	r25, r21
 87c:	c8 17       	cp	r28, r24
 87e:	d9 07       	cpc	r29, r25
 880:	59 f4       	brne	.+22     	; 0x898 <free+0x82>
 882:	88 81       	ld	r24, Y
 884:	99 81       	ldd	r25, Y+1	; 0x01
 886:	84 0f       	add	r24, r20
 888:	95 1f       	adc	r25, r21
 88a:	02 96       	adiw	r24, 0x02	; 2
 88c:	91 83       	std	Z+1, r25	; 0x01
 88e:	80 83       	st	Z, r24
 890:	8a 81       	ldd	r24, Y+2	; 0x02
 892:	9b 81       	ldd	r25, Y+3	; 0x03
 894:	93 83       	std	Z+3, r25	; 0x03
 896:	82 83       	std	Z+2, r24	; 0x02
 898:	21 15       	cp	r18, r1
 89a:	31 05       	cpc	r19, r1
 89c:	29 f4       	brne	.+10     	; 0x8a8 <free+0x92>
 89e:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <__flp+0x1>
 8a2:	e0 93 48 02 	sts	0x0248, r30	; 0x800248 <__flp>
 8a6:	3d c0       	rjmp	.+122    	; 0x922 <free+0x10c>
 8a8:	e9 01       	movw	r28, r18
 8aa:	fb 83       	std	Y+3, r31	; 0x03
 8ac:	ea 83       	std	Y+2, r30	; 0x02
 8ae:	49 91       	ld	r20, Y+
 8b0:	59 91       	ld	r21, Y+
 8b2:	c4 0f       	add	r28, r20
 8b4:	d5 1f       	adc	r29, r21
 8b6:	ec 17       	cp	r30, r28
 8b8:	fd 07       	cpc	r31, r29
 8ba:	61 f4       	brne	.+24     	; 0x8d4 <free+0xbe>
 8bc:	80 81       	ld	r24, Z
 8be:	91 81       	ldd	r25, Z+1	; 0x01
 8c0:	84 0f       	add	r24, r20
 8c2:	95 1f       	adc	r25, r21
 8c4:	02 96       	adiw	r24, 0x02	; 2
 8c6:	e9 01       	movw	r28, r18
 8c8:	99 83       	std	Y+1, r25	; 0x01
 8ca:	88 83       	st	Y, r24
 8cc:	82 81       	ldd	r24, Z+2	; 0x02
 8ce:	93 81       	ldd	r25, Z+3	; 0x03
 8d0:	9b 83       	std	Y+3, r25	; 0x03
 8d2:	8a 83       	std	Y+2, r24	; 0x02
 8d4:	e0 e0       	ldi	r30, 0x00	; 0
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	12 96       	adiw	r26, 0x02	; 2
 8da:	8d 91       	ld	r24, X+
 8dc:	9c 91       	ld	r25, X
 8de:	13 97       	sbiw	r26, 0x03	; 3
 8e0:	00 97       	sbiw	r24, 0x00	; 0
 8e2:	19 f0       	breq	.+6      	; 0x8ea <free+0xd4>
 8e4:	fd 01       	movw	r30, r26
 8e6:	dc 01       	movw	r26, r24
 8e8:	f7 cf       	rjmp	.-18     	; 0x8d8 <free+0xc2>
 8ea:	8d 91       	ld	r24, X+
 8ec:	9c 91       	ld	r25, X
 8ee:	11 97       	sbiw	r26, 0x01	; 1
 8f0:	9d 01       	movw	r18, r26
 8f2:	2e 5f       	subi	r18, 0xFE	; 254
 8f4:	3f 4f       	sbci	r19, 0xFF	; 255
 8f6:	82 0f       	add	r24, r18
 8f8:	93 1f       	adc	r25, r19
 8fa:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <__brkval>
 8fe:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <__brkval+0x1>
 902:	28 17       	cp	r18, r24
 904:	39 07       	cpc	r19, r25
 906:	69 f4       	brne	.+26     	; 0x922 <free+0x10c>
 908:	30 97       	sbiw	r30, 0x00	; 0
 90a:	29 f4       	brne	.+10     	; 0x916 <free+0x100>
 90c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <__flp+0x1>
 910:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <__flp>
 914:	02 c0       	rjmp	.+4      	; 0x91a <free+0x104>
 916:	13 82       	std	Z+3, r1	; 0x03
 918:	12 82       	std	Z+2, r1	; 0x02
 91a:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <__brkval+0x1>
 91e:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <__brkval>
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	08 95       	ret

00000928 <fdevopen>:
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	00 97       	sbiw	r24, 0x00	; 0
 932:	31 f4       	brne	.+12     	; 0x940 <fdevopen+0x18>
 934:	61 15       	cp	r22, r1
 936:	71 05       	cpc	r23, r1
 938:	19 f4       	brne	.+6      	; 0x940 <fdevopen+0x18>
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	3a c0       	rjmp	.+116    	; 0x9b4 <fdevopen+0x8c>
 940:	8b 01       	movw	r16, r22
 942:	ec 01       	movw	r28, r24
 944:	6e e0       	ldi	r22, 0x0E	; 14
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 d6 06 	call	0xdac	; 0xdac <calloc>
 950:	fc 01       	movw	r30, r24
 952:	89 2b       	or	r24, r25
 954:	91 f3       	breq	.-28     	; 0x93a <fdevopen+0x12>
 956:	80 e8       	ldi	r24, 0x80	; 128
 958:	83 83       	std	Z+3, r24	; 0x03
 95a:	01 15       	cp	r16, r1
 95c:	11 05       	cpc	r17, r1
 95e:	71 f0       	breq	.+28     	; 0x97c <fdevopen+0x54>
 960:	13 87       	std	Z+11, r17	; 0x0b
 962:	02 87       	std	Z+10, r16	; 0x0a
 964:	81 e8       	ldi	r24, 0x81	; 129
 966:	83 83       	std	Z+3, r24	; 0x03
 968:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__iob>
 96c:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <__iob+0x1>
 970:	89 2b       	or	r24, r25
 972:	21 f4       	brne	.+8      	; 0x97c <fdevopen+0x54>
 974:	f0 93 4b 02 	sts	0x024B, r31	; 0x80024b <__iob+0x1>
 978:	e0 93 4a 02 	sts	0x024A, r30	; 0x80024a <__iob>
 97c:	20 97       	sbiw	r28, 0x00	; 0
 97e:	c9 f0       	breq	.+50     	; 0x9b2 <fdevopen+0x8a>
 980:	d1 87       	std	Z+9, r29	; 0x09
 982:	c0 87       	std	Z+8, r28	; 0x08
 984:	83 81       	ldd	r24, Z+3	; 0x03
 986:	82 60       	ori	r24, 0x02	; 2
 988:	83 83       	std	Z+3, r24	; 0x03
 98a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__iob+0x2>
 98e:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__iob+0x3>
 992:	89 2b       	or	r24, r25
 994:	71 f4       	brne	.+28     	; 0x9b2 <fdevopen+0x8a>
 996:	f0 93 4d 02 	sts	0x024D, r31	; 0x80024d <__iob+0x3>
 99a:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <__iob+0x2>
 99e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <__iob+0x4>
 9a2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <__iob+0x5>
 9a6:	89 2b       	or	r24, r25
 9a8:	21 f4       	brne	.+8      	; 0x9b2 <fdevopen+0x8a>
 9aa:	f0 93 4f 02 	sts	0x024F, r31	; 0x80024f <__iob+0x5>
 9ae:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <__iob+0x4>
 9b2:	cf 01       	movw	r24, r30
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	08 95       	ret

000009be <printf>:
 9be:	a0 e0       	ldi	r26, 0x00	; 0
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	e5 ee       	ldi	r30, 0xE5	; 229
 9c4:	f4 e0       	ldi	r31, 0x04	; 4
 9c6:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__prologue_saves__+0x20>
 9ca:	ae 01       	movw	r20, r28
 9cc:	4b 5f       	subi	r20, 0xFB	; 251
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	fa 01       	movw	r30, r20
 9d2:	61 91       	ld	r22, Z+
 9d4:	71 91       	ld	r23, Z+
 9d6:	af 01       	movw	r20, r30
 9d8:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__iob+0x2>
 9dc:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__iob+0x3>
 9e0:	0e 94 f5 04 	call	0x9ea	; 0x9ea <vfprintf>
 9e4:	e2 e0       	ldi	r30, 0x02	; 2
 9e6:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__epilogue_restores__+0x20>

000009ea <vfprintf>:
 9ea:	ab e0       	ldi	r26, 0x0B	; 11
 9ec:	b0 e0       	ldi	r27, 0x00	; 0
 9ee:	eb ef       	ldi	r30, 0xFB	; 251
 9f0:	f4 e0       	ldi	r31, 0x04	; 4
 9f2:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__prologue_saves__>
 9f6:	6c 01       	movw	r12, r24
 9f8:	7b 01       	movw	r14, r22
 9fa:	8a 01       	movw	r16, r20
 9fc:	fc 01       	movw	r30, r24
 9fe:	17 82       	std	Z+7, r1	; 0x07
 a00:	16 82       	std	Z+6, r1	; 0x06
 a02:	83 81       	ldd	r24, Z+3	; 0x03
 a04:	81 ff       	sbrs	r24, 1
 a06:	cc c1       	rjmp	.+920    	; 0xda0 <vfprintf+0x3b6>
 a08:	ce 01       	movw	r24, r28
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	3c 01       	movw	r6, r24
 a0e:	f6 01       	movw	r30, r12
 a10:	93 81       	ldd	r25, Z+3	; 0x03
 a12:	f7 01       	movw	r30, r14
 a14:	93 fd       	sbrc	r25, 3
 a16:	85 91       	lpm	r24, Z+
 a18:	93 ff       	sbrs	r25, 3
 a1a:	81 91       	ld	r24, Z+
 a1c:	7f 01       	movw	r14, r30
 a1e:	88 23       	and	r24, r24
 a20:	09 f4       	brne	.+2      	; 0xa24 <vfprintf+0x3a>
 a22:	ba c1       	rjmp	.+884    	; 0xd98 <vfprintf+0x3ae>
 a24:	85 32       	cpi	r24, 0x25	; 37
 a26:	39 f4       	brne	.+14     	; 0xa36 <vfprintf+0x4c>
 a28:	93 fd       	sbrc	r25, 3
 a2a:	85 91       	lpm	r24, Z+
 a2c:	93 ff       	sbrs	r25, 3
 a2e:	81 91       	ld	r24, Z+
 a30:	7f 01       	movw	r14, r30
 a32:	85 32       	cpi	r24, 0x25	; 37
 a34:	29 f4       	brne	.+10     	; 0xa40 <vfprintf+0x56>
 a36:	b6 01       	movw	r22, r12
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 a3e:	e7 cf       	rjmp	.-50     	; 0xa0e <vfprintf+0x24>
 a40:	91 2c       	mov	r9, r1
 a42:	21 2c       	mov	r2, r1
 a44:	31 2c       	mov	r3, r1
 a46:	ff e1       	ldi	r31, 0x1F	; 31
 a48:	f3 15       	cp	r31, r3
 a4a:	d8 f0       	brcs	.+54     	; 0xa82 <vfprintf+0x98>
 a4c:	8b 32       	cpi	r24, 0x2B	; 43
 a4e:	79 f0       	breq	.+30     	; 0xa6e <vfprintf+0x84>
 a50:	38 f4       	brcc	.+14     	; 0xa60 <vfprintf+0x76>
 a52:	80 32       	cpi	r24, 0x20	; 32
 a54:	79 f0       	breq	.+30     	; 0xa74 <vfprintf+0x8a>
 a56:	83 32       	cpi	r24, 0x23	; 35
 a58:	a1 f4       	brne	.+40     	; 0xa82 <vfprintf+0x98>
 a5a:	23 2d       	mov	r18, r3
 a5c:	20 61       	ori	r18, 0x10	; 16
 a5e:	1d c0       	rjmp	.+58     	; 0xa9a <vfprintf+0xb0>
 a60:	8d 32       	cpi	r24, 0x2D	; 45
 a62:	61 f0       	breq	.+24     	; 0xa7c <vfprintf+0x92>
 a64:	80 33       	cpi	r24, 0x30	; 48
 a66:	69 f4       	brne	.+26     	; 0xa82 <vfprintf+0x98>
 a68:	23 2d       	mov	r18, r3
 a6a:	21 60       	ori	r18, 0x01	; 1
 a6c:	16 c0       	rjmp	.+44     	; 0xa9a <vfprintf+0xb0>
 a6e:	83 2d       	mov	r24, r3
 a70:	82 60       	ori	r24, 0x02	; 2
 a72:	38 2e       	mov	r3, r24
 a74:	e3 2d       	mov	r30, r3
 a76:	e4 60       	ori	r30, 0x04	; 4
 a78:	3e 2e       	mov	r3, r30
 a7a:	2a c0       	rjmp	.+84     	; 0xad0 <vfprintf+0xe6>
 a7c:	f3 2d       	mov	r31, r3
 a7e:	f8 60       	ori	r31, 0x08	; 8
 a80:	1d c0       	rjmp	.+58     	; 0xabc <vfprintf+0xd2>
 a82:	37 fc       	sbrc	r3, 7
 a84:	2d c0       	rjmp	.+90     	; 0xae0 <vfprintf+0xf6>
 a86:	20 ed       	ldi	r18, 0xD0	; 208
 a88:	28 0f       	add	r18, r24
 a8a:	2a 30       	cpi	r18, 0x0A	; 10
 a8c:	40 f0       	brcs	.+16     	; 0xa9e <vfprintf+0xb4>
 a8e:	8e 32       	cpi	r24, 0x2E	; 46
 a90:	b9 f4       	brne	.+46     	; 0xac0 <vfprintf+0xd6>
 a92:	36 fc       	sbrc	r3, 6
 a94:	81 c1       	rjmp	.+770    	; 0xd98 <vfprintf+0x3ae>
 a96:	23 2d       	mov	r18, r3
 a98:	20 64       	ori	r18, 0x40	; 64
 a9a:	32 2e       	mov	r3, r18
 a9c:	19 c0       	rjmp	.+50     	; 0xad0 <vfprintf+0xe6>
 a9e:	36 fe       	sbrs	r3, 6
 aa0:	06 c0       	rjmp	.+12     	; 0xaae <vfprintf+0xc4>
 aa2:	8a e0       	ldi	r24, 0x0A	; 10
 aa4:	98 9e       	mul	r9, r24
 aa6:	20 0d       	add	r18, r0
 aa8:	11 24       	eor	r1, r1
 aaa:	92 2e       	mov	r9, r18
 aac:	11 c0       	rjmp	.+34     	; 0xad0 <vfprintf+0xe6>
 aae:	ea e0       	ldi	r30, 0x0A	; 10
 ab0:	2e 9e       	mul	r2, r30
 ab2:	20 0d       	add	r18, r0
 ab4:	11 24       	eor	r1, r1
 ab6:	22 2e       	mov	r2, r18
 ab8:	f3 2d       	mov	r31, r3
 aba:	f0 62       	ori	r31, 0x20	; 32
 abc:	3f 2e       	mov	r3, r31
 abe:	08 c0       	rjmp	.+16     	; 0xad0 <vfprintf+0xe6>
 ac0:	8c 36       	cpi	r24, 0x6C	; 108
 ac2:	21 f4       	brne	.+8      	; 0xacc <vfprintf+0xe2>
 ac4:	83 2d       	mov	r24, r3
 ac6:	80 68       	ori	r24, 0x80	; 128
 ac8:	38 2e       	mov	r3, r24
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <vfprintf+0xe6>
 acc:	88 36       	cpi	r24, 0x68	; 104
 ace:	41 f4       	brne	.+16     	; 0xae0 <vfprintf+0xf6>
 ad0:	f7 01       	movw	r30, r14
 ad2:	93 fd       	sbrc	r25, 3
 ad4:	85 91       	lpm	r24, Z+
 ad6:	93 ff       	sbrs	r25, 3
 ad8:	81 91       	ld	r24, Z+
 ada:	7f 01       	movw	r14, r30
 adc:	81 11       	cpse	r24, r1
 ade:	b3 cf       	rjmp	.-154    	; 0xa46 <vfprintf+0x5c>
 ae0:	98 2f       	mov	r25, r24
 ae2:	9f 7d       	andi	r25, 0xDF	; 223
 ae4:	95 54       	subi	r25, 0x45	; 69
 ae6:	93 30       	cpi	r25, 0x03	; 3
 ae8:	28 f4       	brcc	.+10     	; 0xaf4 <vfprintf+0x10a>
 aea:	0c 5f       	subi	r16, 0xFC	; 252
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
 aee:	9f e3       	ldi	r25, 0x3F	; 63
 af0:	99 83       	std	Y+1, r25	; 0x01
 af2:	0d c0       	rjmp	.+26     	; 0xb0e <vfprintf+0x124>
 af4:	83 36       	cpi	r24, 0x63	; 99
 af6:	31 f0       	breq	.+12     	; 0xb04 <vfprintf+0x11a>
 af8:	83 37       	cpi	r24, 0x73	; 115
 afa:	71 f0       	breq	.+28     	; 0xb18 <vfprintf+0x12e>
 afc:	83 35       	cpi	r24, 0x53	; 83
 afe:	09 f0       	breq	.+2      	; 0xb02 <vfprintf+0x118>
 b00:	59 c0       	rjmp	.+178    	; 0xbb4 <vfprintf+0x1ca>
 b02:	21 c0       	rjmp	.+66     	; 0xb46 <vfprintf+0x15c>
 b04:	f8 01       	movw	r30, r16
 b06:	80 81       	ld	r24, Z
 b08:	89 83       	std	Y+1, r24	; 0x01
 b0a:	0e 5f       	subi	r16, 0xFE	; 254
 b0c:	1f 4f       	sbci	r17, 0xFF	; 255
 b0e:	88 24       	eor	r8, r8
 b10:	83 94       	inc	r8
 b12:	91 2c       	mov	r9, r1
 b14:	53 01       	movw	r10, r6
 b16:	13 c0       	rjmp	.+38     	; 0xb3e <vfprintf+0x154>
 b18:	28 01       	movw	r4, r16
 b1a:	f2 e0       	ldi	r31, 0x02	; 2
 b1c:	4f 0e       	add	r4, r31
 b1e:	51 1c       	adc	r5, r1
 b20:	f8 01       	movw	r30, r16
 b22:	a0 80       	ld	r10, Z
 b24:	b1 80       	ldd	r11, Z+1	; 0x01
 b26:	36 fe       	sbrs	r3, 6
 b28:	03 c0       	rjmp	.+6      	; 0xb30 <vfprintf+0x146>
 b2a:	69 2d       	mov	r22, r9
 b2c:	70 e0       	ldi	r23, 0x00	; 0
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <vfprintf+0x14a>
 b30:	6f ef       	ldi	r22, 0xFF	; 255
 b32:	7f ef       	ldi	r23, 0xFF	; 255
 b34:	c5 01       	movw	r24, r10
 b36:	0e 94 04 07 	call	0xe08	; 0xe08 <strnlen>
 b3a:	4c 01       	movw	r8, r24
 b3c:	82 01       	movw	r16, r4
 b3e:	f3 2d       	mov	r31, r3
 b40:	ff 77       	andi	r31, 0x7F	; 127
 b42:	3f 2e       	mov	r3, r31
 b44:	16 c0       	rjmp	.+44     	; 0xb72 <vfprintf+0x188>
 b46:	28 01       	movw	r4, r16
 b48:	22 e0       	ldi	r18, 0x02	; 2
 b4a:	42 0e       	add	r4, r18
 b4c:	51 1c       	adc	r5, r1
 b4e:	f8 01       	movw	r30, r16
 b50:	a0 80       	ld	r10, Z
 b52:	b1 80       	ldd	r11, Z+1	; 0x01
 b54:	36 fe       	sbrs	r3, 6
 b56:	03 c0       	rjmp	.+6      	; 0xb5e <vfprintf+0x174>
 b58:	69 2d       	mov	r22, r9
 b5a:	70 e0       	ldi	r23, 0x00	; 0
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0x178>
 b5e:	6f ef       	ldi	r22, 0xFF	; 255
 b60:	7f ef       	ldi	r23, 0xFF	; 255
 b62:	c5 01       	movw	r24, r10
 b64:	0e 94 f2 06 	call	0xde4	; 0xde4 <strnlen_P>
 b68:	4c 01       	movw	r8, r24
 b6a:	f3 2d       	mov	r31, r3
 b6c:	f0 68       	ori	r31, 0x80	; 128
 b6e:	3f 2e       	mov	r3, r31
 b70:	82 01       	movw	r16, r4
 b72:	33 fc       	sbrc	r3, 3
 b74:	1b c0       	rjmp	.+54     	; 0xbac <vfprintf+0x1c2>
 b76:	82 2d       	mov	r24, r2
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	88 16       	cp	r8, r24
 b7c:	99 06       	cpc	r9, r25
 b7e:	b0 f4       	brcc	.+44     	; 0xbac <vfprintf+0x1c2>
 b80:	b6 01       	movw	r22, r12
 b82:	80 e2       	ldi	r24, 0x20	; 32
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 b8a:	2a 94       	dec	r2
 b8c:	f4 cf       	rjmp	.-24     	; 0xb76 <vfprintf+0x18c>
 b8e:	f5 01       	movw	r30, r10
 b90:	37 fc       	sbrc	r3, 7
 b92:	85 91       	lpm	r24, Z+
 b94:	37 fe       	sbrs	r3, 7
 b96:	81 91       	ld	r24, Z+
 b98:	5f 01       	movw	r10, r30
 b9a:	b6 01       	movw	r22, r12
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 ba2:	21 10       	cpse	r2, r1
 ba4:	2a 94       	dec	r2
 ba6:	21 e0       	ldi	r18, 0x01	; 1
 ba8:	82 1a       	sub	r8, r18
 baa:	91 08       	sbc	r9, r1
 bac:	81 14       	cp	r8, r1
 bae:	91 04       	cpc	r9, r1
 bb0:	71 f7       	brne	.-36     	; 0xb8e <vfprintf+0x1a4>
 bb2:	e8 c0       	rjmp	.+464    	; 0xd84 <vfprintf+0x39a>
 bb4:	84 36       	cpi	r24, 0x64	; 100
 bb6:	11 f0       	breq	.+4      	; 0xbbc <vfprintf+0x1d2>
 bb8:	89 36       	cpi	r24, 0x69	; 105
 bba:	41 f5       	brne	.+80     	; 0xc0c <vfprintf+0x222>
 bbc:	f8 01       	movw	r30, r16
 bbe:	37 fe       	sbrs	r3, 7
 bc0:	07 c0       	rjmp	.+14     	; 0xbd0 <vfprintf+0x1e6>
 bc2:	60 81       	ld	r22, Z
 bc4:	71 81       	ldd	r23, Z+1	; 0x01
 bc6:	82 81       	ldd	r24, Z+2	; 0x02
 bc8:	93 81       	ldd	r25, Z+3	; 0x03
 bca:	0c 5f       	subi	r16, 0xFC	; 252
 bcc:	1f 4f       	sbci	r17, 0xFF	; 255
 bce:	08 c0       	rjmp	.+16     	; 0xbe0 <vfprintf+0x1f6>
 bd0:	60 81       	ld	r22, Z
 bd2:	71 81       	ldd	r23, Z+1	; 0x01
 bd4:	07 2e       	mov	r0, r23
 bd6:	00 0c       	add	r0, r0
 bd8:	88 0b       	sbc	r24, r24
 bda:	99 0b       	sbc	r25, r25
 bdc:	0e 5f       	subi	r16, 0xFE	; 254
 bde:	1f 4f       	sbci	r17, 0xFF	; 255
 be0:	f3 2d       	mov	r31, r3
 be2:	ff 76       	andi	r31, 0x6F	; 111
 be4:	3f 2e       	mov	r3, r31
 be6:	97 ff       	sbrs	r25, 7
 be8:	09 c0       	rjmp	.+18     	; 0xbfc <vfprintf+0x212>
 bea:	90 95       	com	r25
 bec:	80 95       	com	r24
 bee:	70 95       	com	r23
 bf0:	61 95       	neg	r22
 bf2:	7f 4f       	sbci	r23, 0xFF	; 255
 bf4:	8f 4f       	sbci	r24, 0xFF	; 255
 bf6:	9f 4f       	sbci	r25, 0xFF	; 255
 bf8:	f0 68       	ori	r31, 0x80	; 128
 bfa:	3f 2e       	mov	r3, r31
 bfc:	2a e0       	ldi	r18, 0x0A	; 10
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	a3 01       	movw	r20, r6
 c02:	0e 94 4b 07 	call	0xe96	; 0xe96 <__ultoa_invert>
 c06:	88 2e       	mov	r8, r24
 c08:	86 18       	sub	r8, r6
 c0a:	45 c0       	rjmp	.+138    	; 0xc96 <vfprintf+0x2ac>
 c0c:	85 37       	cpi	r24, 0x75	; 117
 c0e:	31 f4       	brne	.+12     	; 0xc1c <vfprintf+0x232>
 c10:	23 2d       	mov	r18, r3
 c12:	2f 7e       	andi	r18, 0xEF	; 239
 c14:	b2 2e       	mov	r11, r18
 c16:	2a e0       	ldi	r18, 0x0A	; 10
 c18:	30 e0       	ldi	r19, 0x00	; 0
 c1a:	25 c0       	rjmp	.+74     	; 0xc66 <vfprintf+0x27c>
 c1c:	93 2d       	mov	r25, r3
 c1e:	99 7f       	andi	r25, 0xF9	; 249
 c20:	b9 2e       	mov	r11, r25
 c22:	8f 36       	cpi	r24, 0x6F	; 111
 c24:	c1 f0       	breq	.+48     	; 0xc56 <vfprintf+0x26c>
 c26:	18 f4       	brcc	.+6      	; 0xc2e <vfprintf+0x244>
 c28:	88 35       	cpi	r24, 0x58	; 88
 c2a:	79 f0       	breq	.+30     	; 0xc4a <vfprintf+0x260>
 c2c:	b5 c0       	rjmp	.+362    	; 0xd98 <vfprintf+0x3ae>
 c2e:	80 37       	cpi	r24, 0x70	; 112
 c30:	19 f0       	breq	.+6      	; 0xc38 <vfprintf+0x24e>
 c32:	88 37       	cpi	r24, 0x78	; 120
 c34:	21 f0       	breq	.+8      	; 0xc3e <vfprintf+0x254>
 c36:	b0 c0       	rjmp	.+352    	; 0xd98 <vfprintf+0x3ae>
 c38:	e9 2f       	mov	r30, r25
 c3a:	e0 61       	ori	r30, 0x10	; 16
 c3c:	be 2e       	mov	r11, r30
 c3e:	b4 fe       	sbrs	r11, 4
 c40:	0d c0       	rjmp	.+26     	; 0xc5c <vfprintf+0x272>
 c42:	fb 2d       	mov	r31, r11
 c44:	f4 60       	ori	r31, 0x04	; 4
 c46:	bf 2e       	mov	r11, r31
 c48:	09 c0       	rjmp	.+18     	; 0xc5c <vfprintf+0x272>
 c4a:	34 fe       	sbrs	r3, 4
 c4c:	0a c0       	rjmp	.+20     	; 0xc62 <vfprintf+0x278>
 c4e:	29 2f       	mov	r18, r25
 c50:	26 60       	ori	r18, 0x06	; 6
 c52:	b2 2e       	mov	r11, r18
 c54:	06 c0       	rjmp	.+12     	; 0xc62 <vfprintf+0x278>
 c56:	28 e0       	ldi	r18, 0x08	; 8
 c58:	30 e0       	ldi	r19, 0x00	; 0
 c5a:	05 c0       	rjmp	.+10     	; 0xc66 <vfprintf+0x27c>
 c5c:	20 e1       	ldi	r18, 0x10	; 16
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	02 c0       	rjmp	.+4      	; 0xc66 <vfprintf+0x27c>
 c62:	20 e1       	ldi	r18, 0x10	; 16
 c64:	32 e0       	ldi	r19, 0x02	; 2
 c66:	f8 01       	movw	r30, r16
 c68:	b7 fe       	sbrs	r11, 7
 c6a:	07 c0       	rjmp	.+14     	; 0xc7a <vfprintf+0x290>
 c6c:	60 81       	ld	r22, Z
 c6e:	71 81       	ldd	r23, Z+1	; 0x01
 c70:	82 81       	ldd	r24, Z+2	; 0x02
 c72:	93 81       	ldd	r25, Z+3	; 0x03
 c74:	0c 5f       	subi	r16, 0xFC	; 252
 c76:	1f 4f       	sbci	r17, 0xFF	; 255
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x29c>
 c7a:	60 81       	ld	r22, Z
 c7c:	71 81       	ldd	r23, Z+1	; 0x01
 c7e:	80 e0       	ldi	r24, 0x00	; 0
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	0e 5f       	subi	r16, 0xFE	; 254
 c84:	1f 4f       	sbci	r17, 0xFF	; 255
 c86:	a3 01       	movw	r20, r6
 c88:	0e 94 4b 07 	call	0xe96	; 0xe96 <__ultoa_invert>
 c8c:	88 2e       	mov	r8, r24
 c8e:	86 18       	sub	r8, r6
 c90:	fb 2d       	mov	r31, r11
 c92:	ff 77       	andi	r31, 0x7F	; 127
 c94:	3f 2e       	mov	r3, r31
 c96:	36 fe       	sbrs	r3, 6
 c98:	0d c0       	rjmp	.+26     	; 0xcb4 <vfprintf+0x2ca>
 c9a:	23 2d       	mov	r18, r3
 c9c:	2e 7f       	andi	r18, 0xFE	; 254
 c9e:	a2 2e       	mov	r10, r18
 ca0:	89 14       	cp	r8, r9
 ca2:	58 f4       	brcc	.+22     	; 0xcba <vfprintf+0x2d0>
 ca4:	34 fe       	sbrs	r3, 4
 ca6:	0b c0       	rjmp	.+22     	; 0xcbe <vfprintf+0x2d4>
 ca8:	32 fc       	sbrc	r3, 2
 caa:	09 c0       	rjmp	.+18     	; 0xcbe <vfprintf+0x2d4>
 cac:	83 2d       	mov	r24, r3
 cae:	8e 7e       	andi	r24, 0xEE	; 238
 cb0:	a8 2e       	mov	r10, r24
 cb2:	05 c0       	rjmp	.+10     	; 0xcbe <vfprintf+0x2d4>
 cb4:	b8 2c       	mov	r11, r8
 cb6:	a3 2c       	mov	r10, r3
 cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <vfprintf+0x2d6>
 cba:	b8 2c       	mov	r11, r8
 cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <vfprintf+0x2d6>
 cbe:	b9 2c       	mov	r11, r9
 cc0:	a4 fe       	sbrs	r10, 4
 cc2:	0f c0       	rjmp	.+30     	; 0xce2 <vfprintf+0x2f8>
 cc4:	fe 01       	movw	r30, r28
 cc6:	e8 0d       	add	r30, r8
 cc8:	f1 1d       	adc	r31, r1
 cca:	80 81       	ld	r24, Z
 ccc:	80 33       	cpi	r24, 0x30	; 48
 cce:	21 f4       	brne	.+8      	; 0xcd8 <vfprintf+0x2ee>
 cd0:	9a 2d       	mov	r25, r10
 cd2:	99 7e       	andi	r25, 0xE9	; 233
 cd4:	a9 2e       	mov	r10, r25
 cd6:	09 c0       	rjmp	.+18     	; 0xcea <vfprintf+0x300>
 cd8:	a2 fe       	sbrs	r10, 2
 cda:	06 c0       	rjmp	.+12     	; 0xce8 <vfprintf+0x2fe>
 cdc:	b3 94       	inc	r11
 cde:	b3 94       	inc	r11
 ce0:	04 c0       	rjmp	.+8      	; 0xcea <vfprintf+0x300>
 ce2:	8a 2d       	mov	r24, r10
 ce4:	86 78       	andi	r24, 0x86	; 134
 ce6:	09 f0       	breq	.+2      	; 0xcea <vfprintf+0x300>
 ce8:	b3 94       	inc	r11
 cea:	a3 fc       	sbrc	r10, 3
 cec:	11 c0       	rjmp	.+34     	; 0xd10 <vfprintf+0x326>
 cee:	a0 fe       	sbrs	r10, 0
 cf0:	06 c0       	rjmp	.+12     	; 0xcfe <vfprintf+0x314>
 cf2:	b2 14       	cp	r11, r2
 cf4:	88 f4       	brcc	.+34     	; 0xd18 <vfprintf+0x32e>
 cf6:	28 0c       	add	r2, r8
 cf8:	92 2c       	mov	r9, r2
 cfa:	9b 18       	sub	r9, r11
 cfc:	0e c0       	rjmp	.+28     	; 0xd1a <vfprintf+0x330>
 cfe:	b2 14       	cp	r11, r2
 d00:	60 f4       	brcc	.+24     	; 0xd1a <vfprintf+0x330>
 d02:	b6 01       	movw	r22, r12
 d04:	80 e2       	ldi	r24, 0x20	; 32
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 d0c:	b3 94       	inc	r11
 d0e:	f7 cf       	rjmp	.-18     	; 0xcfe <vfprintf+0x314>
 d10:	b2 14       	cp	r11, r2
 d12:	18 f4       	brcc	.+6      	; 0xd1a <vfprintf+0x330>
 d14:	2b 18       	sub	r2, r11
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0x332>
 d18:	98 2c       	mov	r9, r8
 d1a:	21 2c       	mov	r2, r1
 d1c:	a4 fe       	sbrs	r10, 4
 d1e:	10 c0       	rjmp	.+32     	; 0xd40 <vfprintf+0x356>
 d20:	b6 01       	movw	r22, r12
 d22:	80 e3       	ldi	r24, 0x30	; 48
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 d2a:	a2 fe       	sbrs	r10, 2
 d2c:	17 c0       	rjmp	.+46     	; 0xd5c <vfprintf+0x372>
 d2e:	a1 fc       	sbrc	r10, 1
 d30:	03 c0       	rjmp	.+6      	; 0xd38 <vfprintf+0x34e>
 d32:	88 e7       	ldi	r24, 0x78	; 120
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x352>
 d38:	88 e5       	ldi	r24, 0x58	; 88
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	b6 01       	movw	r22, r12
 d3e:	0c c0       	rjmp	.+24     	; 0xd58 <vfprintf+0x36e>
 d40:	8a 2d       	mov	r24, r10
 d42:	86 78       	andi	r24, 0x86	; 134
 d44:	59 f0       	breq	.+22     	; 0xd5c <vfprintf+0x372>
 d46:	a1 fe       	sbrs	r10, 1
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x364>
 d4a:	8b e2       	ldi	r24, 0x2B	; 43
 d4c:	01 c0       	rjmp	.+2      	; 0xd50 <vfprintf+0x366>
 d4e:	80 e2       	ldi	r24, 0x20	; 32
 d50:	a7 fc       	sbrc	r10, 7
 d52:	8d e2       	ldi	r24, 0x2D	; 45
 d54:	b6 01       	movw	r22, r12
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 d5c:	89 14       	cp	r8, r9
 d5e:	38 f4       	brcc	.+14     	; 0xd6e <vfprintf+0x384>
 d60:	b6 01       	movw	r22, r12
 d62:	80 e3       	ldi	r24, 0x30	; 48
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 d6a:	9a 94       	dec	r9
 d6c:	f7 cf       	rjmp	.-18     	; 0xd5c <vfprintf+0x372>
 d6e:	8a 94       	dec	r8
 d70:	f3 01       	movw	r30, r6
 d72:	e8 0d       	add	r30, r8
 d74:	f1 1d       	adc	r31, r1
 d76:	80 81       	ld	r24, Z
 d78:	b6 01       	movw	r22, r12
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 d80:	81 10       	cpse	r8, r1
 d82:	f5 cf       	rjmp	.-22     	; 0xd6e <vfprintf+0x384>
 d84:	22 20       	and	r2, r2
 d86:	09 f4       	brne	.+2      	; 0xd8a <vfprintf+0x3a0>
 d88:	42 ce       	rjmp	.-892    	; 0xa0e <vfprintf+0x24>
 d8a:	b6 01       	movw	r22, r12
 d8c:	80 e2       	ldi	r24, 0x20	; 32
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	0e 94 0f 07 	call	0xe1e	; 0xe1e <fputc>
 d94:	2a 94       	dec	r2
 d96:	f6 cf       	rjmp	.-20     	; 0xd84 <vfprintf+0x39a>
 d98:	f6 01       	movw	r30, r12
 d9a:	86 81       	ldd	r24, Z+6	; 0x06
 d9c:	97 81       	ldd	r25, Z+7	; 0x07
 d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x3ba>
 da0:	8f ef       	ldi	r24, 0xFF	; 255
 da2:	9f ef       	ldi	r25, 0xFF	; 255
 da4:	2b 96       	adiw	r28, 0x0b	; 11
 da6:	e2 e1       	ldi	r30, 0x12	; 18
 da8:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__epilogue_restores__>

00000dac <calloc>:
 dac:	0f 93       	push	r16
 dae:	1f 93       	push	r17
 db0:	cf 93       	push	r28
 db2:	df 93       	push	r29
 db4:	86 9f       	mul	r24, r22
 db6:	80 01       	movw	r16, r0
 db8:	87 9f       	mul	r24, r23
 dba:	10 0d       	add	r17, r0
 dbc:	96 9f       	mul	r25, r22
 dbe:	10 0d       	add	r17, r0
 dc0:	11 24       	eor	r1, r1
 dc2:	c8 01       	movw	r24, r16
 dc4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <malloc>
 dc8:	ec 01       	movw	r28, r24
 dca:	00 97       	sbiw	r24, 0x00	; 0
 dcc:	29 f0       	breq	.+10     	; 0xdd8 <calloc+0x2c>
 dce:	a8 01       	movw	r20, r16
 dd0:	60 e0       	ldi	r22, 0x00	; 0
 dd2:	70 e0       	ldi	r23, 0x00	; 0
 dd4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <memset>
 dd8:	ce 01       	movw	r24, r28
 dda:	df 91       	pop	r29
 ddc:	cf 91       	pop	r28
 dde:	1f 91       	pop	r17
 de0:	0f 91       	pop	r16
 de2:	08 95       	ret

00000de4 <strnlen_P>:
 de4:	fc 01       	movw	r30, r24
 de6:	05 90       	lpm	r0, Z+
 de8:	61 50       	subi	r22, 0x01	; 1
 dea:	70 40       	sbci	r23, 0x00	; 0
 dec:	01 10       	cpse	r0, r1
 dee:	d8 f7       	brcc	.-10     	; 0xde6 <strnlen_P+0x2>
 df0:	80 95       	com	r24
 df2:	90 95       	com	r25
 df4:	8e 0f       	add	r24, r30
 df6:	9f 1f       	adc	r25, r31
 df8:	08 95       	ret

00000dfa <memset>:
 dfa:	dc 01       	movw	r26, r24
 dfc:	01 c0       	rjmp	.+2      	; 0xe00 <memset+0x6>
 dfe:	6d 93       	st	X+, r22
 e00:	41 50       	subi	r20, 0x01	; 1
 e02:	50 40       	sbci	r21, 0x00	; 0
 e04:	e0 f7       	brcc	.-8      	; 0xdfe <memset+0x4>
 e06:	08 95       	ret

00000e08 <strnlen>:
 e08:	fc 01       	movw	r30, r24
 e0a:	61 50       	subi	r22, 0x01	; 1
 e0c:	70 40       	sbci	r23, 0x00	; 0
 e0e:	01 90       	ld	r0, Z+
 e10:	01 10       	cpse	r0, r1
 e12:	d8 f7       	brcc	.-10     	; 0xe0a <strnlen+0x2>
 e14:	80 95       	com	r24
 e16:	90 95       	com	r25
 e18:	8e 0f       	add	r24, r30
 e1a:	9f 1f       	adc	r25, r31
 e1c:	08 95       	ret

00000e1e <fputc>:
 e1e:	0f 93       	push	r16
 e20:	1f 93       	push	r17
 e22:	cf 93       	push	r28
 e24:	df 93       	push	r29
 e26:	fb 01       	movw	r30, r22
 e28:	23 81       	ldd	r18, Z+3	; 0x03
 e2a:	21 fd       	sbrc	r18, 1
 e2c:	03 c0       	rjmp	.+6      	; 0xe34 <fputc+0x16>
 e2e:	8f ef       	ldi	r24, 0xFF	; 255
 e30:	9f ef       	ldi	r25, 0xFF	; 255
 e32:	2c c0       	rjmp	.+88     	; 0xe8c <fputc+0x6e>
 e34:	22 ff       	sbrs	r18, 2
 e36:	16 c0       	rjmp	.+44     	; 0xe64 <fputc+0x46>
 e38:	46 81       	ldd	r20, Z+6	; 0x06
 e3a:	57 81       	ldd	r21, Z+7	; 0x07
 e3c:	24 81       	ldd	r18, Z+4	; 0x04
 e3e:	35 81       	ldd	r19, Z+5	; 0x05
 e40:	42 17       	cp	r20, r18
 e42:	53 07       	cpc	r21, r19
 e44:	44 f4       	brge	.+16     	; 0xe56 <fputc+0x38>
 e46:	a0 81       	ld	r26, Z
 e48:	b1 81       	ldd	r27, Z+1	; 0x01
 e4a:	9d 01       	movw	r18, r26
 e4c:	2f 5f       	subi	r18, 0xFF	; 255
 e4e:	3f 4f       	sbci	r19, 0xFF	; 255
 e50:	31 83       	std	Z+1, r19	; 0x01
 e52:	20 83       	st	Z, r18
 e54:	8c 93       	st	X, r24
 e56:	26 81       	ldd	r18, Z+6	; 0x06
 e58:	37 81       	ldd	r19, Z+7	; 0x07
 e5a:	2f 5f       	subi	r18, 0xFF	; 255
 e5c:	3f 4f       	sbci	r19, 0xFF	; 255
 e5e:	37 83       	std	Z+7, r19	; 0x07
 e60:	26 83       	std	Z+6, r18	; 0x06
 e62:	14 c0       	rjmp	.+40     	; 0xe8c <fputc+0x6e>
 e64:	8b 01       	movw	r16, r22
 e66:	ec 01       	movw	r28, r24
 e68:	fb 01       	movw	r30, r22
 e6a:	00 84       	ldd	r0, Z+8	; 0x08
 e6c:	f1 85       	ldd	r31, Z+9	; 0x09
 e6e:	e0 2d       	mov	r30, r0
 e70:	09 95       	icall
 e72:	89 2b       	or	r24, r25
 e74:	e1 f6       	brne	.-72     	; 0xe2e <fputc+0x10>
 e76:	d8 01       	movw	r26, r16
 e78:	16 96       	adiw	r26, 0x06	; 6
 e7a:	8d 91       	ld	r24, X+
 e7c:	9c 91       	ld	r25, X
 e7e:	17 97       	sbiw	r26, 0x07	; 7
 e80:	01 96       	adiw	r24, 0x01	; 1
 e82:	17 96       	adiw	r26, 0x07	; 7
 e84:	9c 93       	st	X, r25
 e86:	8e 93       	st	-X, r24
 e88:	16 97       	sbiw	r26, 0x06	; 6
 e8a:	ce 01       	movw	r24, r28
 e8c:	df 91       	pop	r29
 e8e:	cf 91       	pop	r28
 e90:	1f 91       	pop	r17
 e92:	0f 91       	pop	r16
 e94:	08 95       	ret

00000e96 <__ultoa_invert>:
 e96:	fa 01       	movw	r30, r20
 e98:	aa 27       	eor	r26, r26
 e9a:	28 30       	cpi	r18, 0x08	; 8
 e9c:	51 f1       	breq	.+84     	; 0xef2 <__ultoa_invert+0x5c>
 e9e:	20 31       	cpi	r18, 0x10	; 16
 ea0:	81 f1       	breq	.+96     	; 0xf02 <__ultoa_invert+0x6c>
 ea2:	e8 94       	clt
 ea4:	6f 93       	push	r22
 ea6:	6e 7f       	andi	r22, 0xFE	; 254
 ea8:	6e 5f       	subi	r22, 0xFE	; 254
 eaa:	7f 4f       	sbci	r23, 0xFF	; 255
 eac:	8f 4f       	sbci	r24, 0xFF	; 255
 eae:	9f 4f       	sbci	r25, 0xFF	; 255
 eb0:	af 4f       	sbci	r26, 0xFF	; 255
 eb2:	b1 e0       	ldi	r27, 0x01	; 1
 eb4:	3e d0       	rcall	.+124    	; 0xf32 <__ultoa_invert+0x9c>
 eb6:	b4 e0       	ldi	r27, 0x04	; 4
 eb8:	3c d0       	rcall	.+120    	; 0xf32 <__ultoa_invert+0x9c>
 eba:	67 0f       	add	r22, r23
 ebc:	78 1f       	adc	r23, r24
 ebe:	89 1f       	adc	r24, r25
 ec0:	9a 1f       	adc	r25, r26
 ec2:	a1 1d       	adc	r26, r1
 ec4:	68 0f       	add	r22, r24
 ec6:	79 1f       	adc	r23, r25
 ec8:	8a 1f       	adc	r24, r26
 eca:	91 1d       	adc	r25, r1
 ecc:	a1 1d       	adc	r26, r1
 ece:	6a 0f       	add	r22, r26
 ed0:	71 1d       	adc	r23, r1
 ed2:	81 1d       	adc	r24, r1
 ed4:	91 1d       	adc	r25, r1
 ed6:	a1 1d       	adc	r26, r1
 ed8:	20 d0       	rcall	.+64     	; 0xf1a <__ultoa_invert+0x84>
 eda:	09 f4       	brne	.+2      	; 0xede <__ultoa_invert+0x48>
 edc:	68 94       	set
 ede:	3f 91       	pop	r19
 ee0:	2a e0       	ldi	r18, 0x0A	; 10
 ee2:	26 9f       	mul	r18, r22
 ee4:	11 24       	eor	r1, r1
 ee6:	30 19       	sub	r19, r0
 ee8:	30 5d       	subi	r19, 0xD0	; 208
 eea:	31 93       	st	Z+, r19
 eec:	de f6       	brtc	.-74     	; 0xea4 <__ultoa_invert+0xe>
 eee:	cf 01       	movw	r24, r30
 ef0:	08 95       	ret
 ef2:	46 2f       	mov	r20, r22
 ef4:	47 70       	andi	r20, 0x07	; 7
 ef6:	40 5d       	subi	r20, 0xD0	; 208
 ef8:	41 93       	st	Z+, r20
 efa:	b3 e0       	ldi	r27, 0x03	; 3
 efc:	0f d0       	rcall	.+30     	; 0xf1c <__ultoa_invert+0x86>
 efe:	c9 f7       	brne	.-14     	; 0xef2 <__ultoa_invert+0x5c>
 f00:	f6 cf       	rjmp	.-20     	; 0xeee <__ultoa_invert+0x58>
 f02:	46 2f       	mov	r20, r22
 f04:	4f 70       	andi	r20, 0x0F	; 15
 f06:	40 5d       	subi	r20, 0xD0	; 208
 f08:	4a 33       	cpi	r20, 0x3A	; 58
 f0a:	18 f0       	brcs	.+6      	; 0xf12 <__ultoa_invert+0x7c>
 f0c:	49 5d       	subi	r20, 0xD9	; 217
 f0e:	31 fd       	sbrc	r19, 1
 f10:	40 52       	subi	r20, 0x20	; 32
 f12:	41 93       	st	Z+, r20
 f14:	02 d0       	rcall	.+4      	; 0xf1a <__ultoa_invert+0x84>
 f16:	a9 f7       	brne	.-22     	; 0xf02 <__ultoa_invert+0x6c>
 f18:	ea cf       	rjmp	.-44     	; 0xeee <__ultoa_invert+0x58>
 f1a:	b4 e0       	ldi	r27, 0x04	; 4
 f1c:	a6 95       	lsr	r26
 f1e:	97 95       	ror	r25
 f20:	87 95       	ror	r24
 f22:	77 95       	ror	r23
 f24:	67 95       	ror	r22
 f26:	ba 95       	dec	r27
 f28:	c9 f7       	brne	.-14     	; 0xf1c <__ultoa_invert+0x86>
 f2a:	00 97       	sbiw	r24, 0x00	; 0
 f2c:	61 05       	cpc	r22, r1
 f2e:	71 05       	cpc	r23, r1
 f30:	08 95       	ret
 f32:	9b 01       	movw	r18, r22
 f34:	ac 01       	movw	r20, r24
 f36:	0a 2e       	mov	r0, r26
 f38:	06 94       	lsr	r0
 f3a:	57 95       	ror	r21
 f3c:	47 95       	ror	r20
 f3e:	37 95       	ror	r19
 f40:	27 95       	ror	r18
 f42:	ba 95       	dec	r27
 f44:	c9 f7       	brne	.-14     	; 0xf38 <__ultoa_invert+0xa2>
 f46:	62 0f       	add	r22, r18
 f48:	73 1f       	adc	r23, r19
 f4a:	84 1f       	adc	r24, r20
 f4c:	95 1f       	adc	r25, r21
 f4e:	a0 1d       	adc	r26, r0
 f50:	08 95       	ret

00000f52 <__prologue_saves__>:
 f52:	2f 92       	push	r2
 f54:	3f 92       	push	r3
 f56:	4f 92       	push	r4
 f58:	5f 92       	push	r5
 f5a:	6f 92       	push	r6
 f5c:	7f 92       	push	r7
 f5e:	8f 92       	push	r8
 f60:	9f 92       	push	r9
 f62:	af 92       	push	r10
 f64:	bf 92       	push	r11
 f66:	cf 92       	push	r12
 f68:	df 92       	push	r13
 f6a:	ef 92       	push	r14
 f6c:	ff 92       	push	r15
 f6e:	0f 93       	push	r16
 f70:	1f 93       	push	r17
 f72:	cf 93       	push	r28
 f74:	df 93       	push	r29
 f76:	cd b7       	in	r28, 0x3d	; 61
 f78:	de b7       	in	r29, 0x3e	; 62
 f7a:	ca 1b       	sub	r28, r26
 f7c:	db 0b       	sbc	r29, r27
 f7e:	0f b6       	in	r0, 0x3f	; 63
 f80:	f8 94       	cli
 f82:	de bf       	out	0x3e, r29	; 62
 f84:	0f be       	out	0x3f, r0	; 63
 f86:	cd bf       	out	0x3d, r28	; 61
 f88:	09 94       	ijmp

00000f8a <__epilogue_restores__>:
 f8a:	2a 88       	ldd	r2, Y+18	; 0x12
 f8c:	39 88       	ldd	r3, Y+17	; 0x11
 f8e:	48 88       	ldd	r4, Y+16	; 0x10
 f90:	5f 84       	ldd	r5, Y+15	; 0x0f
 f92:	6e 84       	ldd	r6, Y+14	; 0x0e
 f94:	7d 84       	ldd	r7, Y+13	; 0x0d
 f96:	8c 84       	ldd	r8, Y+12	; 0x0c
 f98:	9b 84       	ldd	r9, Y+11	; 0x0b
 f9a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f9c:	b9 84       	ldd	r11, Y+9	; 0x09
 f9e:	c8 84       	ldd	r12, Y+8	; 0x08
 fa0:	df 80       	ldd	r13, Y+7	; 0x07
 fa2:	ee 80       	ldd	r14, Y+6	; 0x06
 fa4:	fd 80       	ldd	r15, Y+5	; 0x05
 fa6:	0c 81       	ldd	r16, Y+4	; 0x04
 fa8:	1b 81       	ldd	r17, Y+3	; 0x03
 faa:	aa 81       	ldd	r26, Y+2	; 0x02
 fac:	b9 81       	ldd	r27, Y+1	; 0x01
 fae:	ce 0f       	add	r28, r30
 fb0:	d1 1d       	adc	r29, r1
 fb2:	0f b6       	in	r0, 0x3f	; 63
 fb4:	f8 94       	cli
 fb6:	de bf       	out	0x3e, r29	; 62
 fb8:	0f be       	out	0x3f, r0	; 63
 fba:	cd bf       	out	0x3d, r28	; 61
 fbc:	ed 01       	movw	r28, r26
 fbe:	08 95       	ret

00000fc0 <_exit>:
 fc0:	f8 94       	cli

00000fc2 <__stop_program>:
 fc2:	ff cf       	rjmp	.-2      	; 0xfc2 <__stop_program>
