
node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00080ca8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  2000043c  000810e4  0002043c  2**2
                  ALLOC
  3 .stack        00000400  200004c0  00081168  0002043c  2**0
                  ALLOC
  4 .heap         00000200  200008c0  00081568  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   000053a1  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e41  00000000  00000000  0002585f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001174  00000000  00000000  000266a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001a8  00000000  00000000  00027814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000279bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011f6a  00000000  00000000  00027b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000340d  00000000  00000000  00039a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055311  00000000  00000000  0003ce9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000055c  00000000  00000000  000921ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c0 08 00 20 71 03 08 00 6d 03 08 00 6d 03 08 00     ... q...m...m...
   80010:	6d 03 08 00 6d 03 08 00 6d 03 08 00 00 00 00 00     m...m...m.......
	...
   8002c:	6d 03 08 00 6d 03 08 00 00 00 00 00 6d 03 08 00     m...m.......m...
   8003c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   8004c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   8005c:	6d 03 08 00 19 0a 08 00 6d 03 08 00 00 00 00 00     m.......m.......
   8006c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
	...
   80084:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   80094:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800a4:	00 00 00 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     ....m...m...m...
   800b4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800c4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800d4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800e4:	6d 03 08 00 6d 03 08 00 e1 02 08 00 6d 03 08 00     m...m.......m...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000043c 	.word	0x2000043c
   80110:	00000000 	.word	0x00000000
   80114:	00080ca8 	.word	0x00080ca8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080ca8 	.word	0x00080ca8
   80154:	20000440 	.word	0x20000440
   80158:	00080ca8 	.word	0x00080ca8
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if((num_rx_mb > 8) | (num_tx_mb > 8) | (num_rx_mb + num_tx_mb > 8))
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(0x00290165, 5, 2); // 0x00290165 SMP + BRP + SJW + PRSEG + PHSEG1 + PHSEG2
   80246:	2202      	movs	r2, #2
   80248:	2105      	movs	r1, #5
   8024a:	4802      	ldr	r0, [pc, #8]	; (80254 <can_init_def_tx_rx_mb+0x10>)
   8024c:	4b02      	ldr	r3, [pc, #8]	; (80258 <can_init_def_tx_rx_mb+0x14>)
   8024e:	4798      	blx	r3
}
   80250:	bd08      	pop	{r3, pc}
   80252:	bf00      	nop
   80254:	00290165 	.word	0x00290165
   80258:	00080161 	.word	0x00080161

0008025c <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8025c:	014b      	lsls	r3, r1, #5
   8025e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80262:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80266:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8026e:	d033      	beq.n	802d8 <can_receive+0x7c>
{
   80270:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80272:	014b      	lsls	r3, r1, #5
   80274:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80278:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8027c:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80280:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80284:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80288:	f3c5 458a 	ubfx	r5, r5, #18, #11
   8028c:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8028e:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   80292:	f3c5 4503 	ubfx	r5, r5, #16, #4
   80296:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80298:	2300      	movs	r3, #0
   8029a:	e003      	b.n	802a4 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   8029c:	18c6      	adds	r6, r0, r3
   8029e:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   802a0:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802a2:	3301      	adds	r3, #1
   802a4:	42ab      	cmp	r3, r5
   802a6:	da05      	bge.n	802b4 <can_receive+0x58>
			if(i < 4)
   802a8:	2b03      	cmp	r3, #3
   802aa:	dcf7      	bgt.n	8029c <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802ac:	18c6      	adds	r6, r0, r3
   802ae:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802b0:	0a24      	lsrs	r4, r4, #8
   802b2:	e7f6      	b.n	802a2 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802b4:	4b09      	ldr	r3, [pc, #36]	; (802dc <can_receive+0x80>)
   802b6:	f101 0210 	add.w	r2, r1, #16
   802ba:	0152      	lsls	r2, r2, #5
   802bc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c0:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802c2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802c6:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802ce:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802d2:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802d4:	bc70      	pop	{r4, r5, r6}
   802d6:	4770      	bx	lr
		return 1;
   802d8:	2001      	movs	r0, #1
   802da:	4770      	bx	lr
   802dc:	400b4000 	.word	0x400b4000

000802e0 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802e0:	b510      	push	{r4, lr}
   802e2:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802e4:	4b1a      	ldr	r3, [pc, #104]	; (80350 <CAN0_Handler+0x70>)
   802e6:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802e8:	f014 0f06 	tst.w	r4, #6
   802ec:	d022      	beq.n	80334 <CAN0_Handler+0x54>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802ee:	f014 0f02 	tst.w	r4, #2
   802f2:	d111      	bne.n	80318 <CAN0_Handler+0x38>
		{
			can_receive(&message, 1);
		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802f4:	f014 0f04 	tst.w	r4, #4
   802f8:	d013      	beq.n	80322 <CAN0_Handler+0x42>
		
		{
			can_receive(&message, 2);
   802fa:	2102      	movs	r1, #2
   802fc:	a801      	add	r0, sp, #4
   802fe:	4b15      	ldr	r3, [pc, #84]	; (80354 <CAN0_Handler+0x74>)
   80300:	4798      	blx	r3
		}
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		printf("joystick: %d (DOWN = 1, UP, RIGHT, LEFT)\n", message.data[0]);
   80302:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80306:	4814      	ldr	r0, [pc, #80]	; (80358 <CAN0_Handler+0x78>)
   80308:	4b14      	ldr	r3, [pc, #80]	; (8035c <CAN0_Handler+0x7c>)
   8030a:	4798      	blx	r3
		pwm_joystick_read(message.data[0]);
   8030c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80310:	4b13      	ldr	r3, [pc, #76]	; (80360 <CAN0_Handler+0x80>)
   80312:	4798      	blx	r3

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80314:	2300      	movs	r3, #0
   80316:	e009      	b.n	8032c <CAN0_Handler+0x4c>
			can_receive(&message, 1);
   80318:	2101      	movs	r1, #1
   8031a:	a801      	add	r0, sp, #4
   8031c:	4b0d      	ldr	r3, [pc, #52]	; (80354 <CAN0_Handler+0x74>)
   8031e:	4798      	blx	r3
   80320:	e7ef      	b.n	80302 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80322:	4810      	ldr	r0, [pc, #64]	; (80364 <CAN0_Handler+0x84>)
   80324:	4b0d      	ldr	r3, [pc, #52]	; (8035c <CAN0_Handler+0x7c>)
   80326:	4798      	blx	r3
   80328:	e7eb      	b.n	80302 <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   8032a:	3301      	adds	r3, #1
   8032c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80330:	4293      	cmp	r3, r2
   80332:	dbfa      	blt.n	8032a <CAN0_Handler+0x4a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80334:	f014 0f01 	tst.w	r4, #1
   80338:	d002      	beq.n	80340 <CAN0_Handler+0x60>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8033a:	2201      	movs	r2, #1
   8033c:	4b04      	ldr	r3, [pc, #16]	; (80350 <CAN0_Handler+0x70>)
   8033e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80340:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80344:	4b08      	ldr	r3, [pc, #32]	; (80368 <CAN0_Handler+0x88>)
   80346:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();
}
   8034a:	b004      	add	sp, #16
   8034c:	bd10      	pop	{r4, pc}
   8034e:	bf00      	nop
   80350:	400b4000 	.word	0x400b4000
   80354:	0008025d 	.word	0x0008025d
   80358:	00080c1c 	.word	0x00080c1c
   8035c:	00080969 	.word	0x00080969
   80360:	000805ed 	.word	0x000805ed
   80364:	00080bf0 	.word	0x00080bf0
   80368:	e000e100 	.word	0xe000e100

0008036c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8036c:	e7fe      	b.n	8036c <Dummy_Handler>
	...

00080370 <Reset_Handler>:
{
   80370:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80372:	4b11      	ldr	r3, [pc, #68]	; (803b8 <Reset_Handler+0x48>)
   80374:	4a11      	ldr	r2, [pc, #68]	; (803bc <Reset_Handler+0x4c>)
   80376:	429a      	cmp	r2, r3
   80378:	d009      	beq.n	8038e <Reset_Handler+0x1e>
   8037a:	4b0f      	ldr	r3, [pc, #60]	; (803b8 <Reset_Handler+0x48>)
   8037c:	4a0f      	ldr	r2, [pc, #60]	; (803bc <Reset_Handler+0x4c>)
   8037e:	e003      	b.n	80388 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80380:	6811      	ldr	r1, [r2, #0]
   80382:	6019      	str	r1, [r3, #0]
   80384:	3304      	adds	r3, #4
   80386:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80388:	490d      	ldr	r1, [pc, #52]	; (803c0 <Reset_Handler+0x50>)
   8038a:	428b      	cmp	r3, r1
   8038c:	d3f8      	bcc.n	80380 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   8038e:	4b0d      	ldr	r3, [pc, #52]	; (803c4 <Reset_Handler+0x54>)
   80390:	e002      	b.n	80398 <Reset_Handler+0x28>
                *pDest++ = 0;
   80392:	2200      	movs	r2, #0
   80394:	601a      	str	r2, [r3, #0]
   80396:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80398:	4a0b      	ldr	r2, [pc, #44]	; (803c8 <Reset_Handler+0x58>)
   8039a:	4293      	cmp	r3, r2
   8039c:	d3f9      	bcc.n	80392 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8039e:	4b0b      	ldr	r3, [pc, #44]	; (803cc <Reset_Handler+0x5c>)
   803a0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803a8:	4a09      	ldr	r2, [pc, #36]	; (803d0 <Reset_Handler+0x60>)
   803aa:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803ac:	4b09      	ldr	r3, [pc, #36]	; (803d4 <Reset_Handler+0x64>)
   803ae:	4798      	blx	r3
        main();
   803b0:	4b09      	ldr	r3, [pc, #36]	; (803d8 <Reset_Handler+0x68>)
   803b2:	4798      	blx	r3
   803b4:	e7fe      	b.n	803b4 <Reset_Handler+0x44>
   803b6:	bf00      	nop
   803b8:	20000000 	.word	0x20000000
   803bc:	00080ca8 	.word	0x00080ca8
   803c0:	2000043c 	.word	0x2000043c
   803c4:	2000043c 	.word	0x2000043c
   803c8:	200004c0 	.word	0x200004c0
   803cc:	00080000 	.word	0x00080000
   803d0:	e000ed00 	.word	0xe000ed00
   803d4:	00080a81 	.word	0x00080a81
   803d8:	00080679 	.word	0x00080679

000803dc <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803e0:	4a20      	ldr	r2, [pc, #128]	; (80464 <SystemInit+0x88>)
   803e2:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   803e4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   803e8:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   803ea:	4b1f      	ldr	r3, [pc, #124]	; (80468 <SystemInit+0x8c>)
   803ec:	6a1b      	ldr	r3, [r3, #32]
   803ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   803f2:	d107      	bne.n	80404 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   803f4:	4a1d      	ldr	r2, [pc, #116]	; (8046c <SystemInit+0x90>)
   803f6:	4b1c      	ldr	r3, [pc, #112]	; (80468 <SystemInit+0x8c>)
   803f8:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   803fa:	4b1b      	ldr	r3, [pc, #108]	; (80468 <SystemInit+0x8c>)
   803fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803fe:	f013 0f01 	tst.w	r3, #1
   80402:	d0fa      	beq.n	803fa <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80404:	4a1a      	ldr	r2, [pc, #104]	; (80470 <SystemInit+0x94>)
   80406:	4b18      	ldr	r3, [pc, #96]	; (80468 <SystemInit+0x8c>)
   80408:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8040a:	4b17      	ldr	r3, [pc, #92]	; (80468 <SystemInit+0x8c>)
   8040c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8040e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80412:	d0fa      	beq.n	8040a <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80414:	4a14      	ldr	r2, [pc, #80]	; (80468 <SystemInit+0x8c>)
   80416:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80418:	f023 0303 	bic.w	r3, r3, #3
   8041c:	f043 0301 	orr.w	r3, r3, #1
   80420:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80422:	4b11      	ldr	r3, [pc, #68]	; (80468 <SystemInit+0x8c>)
   80424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80426:	f013 0f08 	tst.w	r3, #8
   8042a:	d0fa      	beq.n	80422 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8042c:	4a11      	ldr	r2, [pc, #68]	; (80474 <SystemInit+0x98>)
   8042e:	4b0e      	ldr	r3, [pc, #56]	; (80468 <SystemInit+0x8c>)
   80430:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80432:	4b0d      	ldr	r3, [pc, #52]	; (80468 <SystemInit+0x8c>)
   80434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80436:	f013 0f02 	tst.w	r3, #2
   8043a:	d0fa      	beq.n	80432 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8043c:	2211      	movs	r2, #17
   8043e:	4b0a      	ldr	r3, [pc, #40]	; (80468 <SystemInit+0x8c>)
   80440:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80442:	4b09      	ldr	r3, [pc, #36]	; (80468 <SystemInit+0x8c>)
   80444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80446:	f013 0f08 	tst.w	r3, #8
   8044a:	d0fa      	beq.n	80442 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8044c:	2212      	movs	r2, #18
   8044e:	4b06      	ldr	r3, [pc, #24]	; (80468 <SystemInit+0x8c>)
   80450:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80452:	4b05      	ldr	r3, [pc, #20]	; (80468 <SystemInit+0x8c>)
   80454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80456:	f013 0f08 	tst.w	r3, #8
   8045a:	d0fa      	beq.n	80452 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8045c:	4a06      	ldr	r2, [pc, #24]	; (80478 <SystemInit+0x9c>)
   8045e:	4b07      	ldr	r3, [pc, #28]	; (8047c <SystemInit+0xa0>)
   80460:	601a      	str	r2, [r3, #0]
   80462:	4770      	bx	lr
   80464:	400e0a00 	.word	0x400e0a00
   80468:	400e0600 	.word	0x400e0600
   8046c:	00370809 	.word	0x00370809
   80470:	01370809 	.word	0x01370809
   80474:	200d3f01 	.word	0x200d3f01
   80478:	0501bd00 	.word	0x0501bd00
   8047c:	20000000 	.word	0x20000000

00080480 <pin_util_set_dir>:

enum PIN_DIR_TYPE{OUTPUT_ENABLE = 1, PIO_ENABLE, PIO_DISABLE};
	
void pin_util_set_dir(char port, uint8_t pin, enum PIN_DIR_TYPE type)
{
	switch (port) {
   80480:	2841      	cmp	r0, #65	; 0x41
   80482:	d002      	beq.n	8048a <pin_util_set_dir+0xa>
   80484:	2842      	cmp	r0, #66	; 0x42
   80486:	d014      	beq.n	804b2 <pin_util_set_dir+0x32>
   80488:	4770      	bx	lr
		case 'A':
		{
			if (type == 1){
   8048a:	2a01      	cmp	r2, #1
   8048c:	d002      	beq.n	80494 <pin_util_set_dir+0x14>
				PIOA->PIO_OER |= 1u << pin;	
			} else if (type == 2){
   8048e:	2a02      	cmp	r2, #2
   80490:	d007      	beq.n	804a2 <pin_util_set_dir+0x22>
   80492:	4770      	bx	lr
				PIOA->PIO_OER |= 1u << pin;	
   80494:	4810      	ldr	r0, [pc, #64]	; (804d8 <pin_util_set_dir+0x58>)
   80496:	6903      	ldr	r3, [r0, #16]
   80498:	fa02 f101 	lsl.w	r1, r2, r1
   8049c:	4319      	orrs	r1, r3
   8049e:	6101      	str	r1, [r0, #16]
   804a0:	4770      	bx	lr
				PIOA->PIO_PER |= 1u << pin;
   804a2:	480d      	ldr	r0, [pc, #52]	; (804d8 <pin_util_set_dir+0x58>)
   804a4:	6803      	ldr	r3, [r0, #0]
   804a6:	2201      	movs	r2, #1
   804a8:	fa02 f101 	lsl.w	r1, r2, r1
   804ac:	4319      	orrs	r1, r3
   804ae:	6001      	str	r1, [r0, #0]
   804b0:	4770      	bx	lr
			}
			break;
		}
		case 'B':
		{
			if (type == 1){
   804b2:	2a01      	cmp	r2, #1
   804b4:	d009      	beq.n	804ca <pin_util_set_dir+0x4a>
				PIOB->PIO_OER |= 1u << pin;
			} else if (type == 2){
   804b6:	2a02      	cmp	r2, #2
   804b8:	d1eb      	bne.n	80492 <pin_util_set_dir+0x12>
				PIOB->PIO_PER |= 1u << pin;
   804ba:	4808      	ldr	r0, [pc, #32]	; (804dc <pin_util_set_dir+0x5c>)
   804bc:	6803      	ldr	r3, [r0, #0]
   804be:	2201      	movs	r2, #1
   804c0:	fa02 f101 	lsl.w	r1, r2, r1
   804c4:	4319      	orrs	r1, r3
   804c6:	6001      	str	r1, [r0, #0]
			}
			break;
		}
		default: break;
	}
}
   804c8:	e7e3      	b.n	80492 <pin_util_set_dir+0x12>
				PIOB->PIO_OER |= 1u << pin;
   804ca:	4804      	ldr	r0, [pc, #16]	; (804dc <pin_util_set_dir+0x5c>)
   804cc:	6903      	ldr	r3, [r0, #16]
   804ce:	fa02 f101 	lsl.w	r1, r2, r1
   804d2:	4319      	orrs	r1, r3
   804d4:	6101      	str	r1, [r0, #16]
   804d6:	4770      	bx	lr
   804d8:	400e0e00 	.word	0x400e0e00
   804dc:	400e1000 	.word	0x400e1000

000804e0 <pin_util_toggle>:

void pin_util_toggle(char port, uint8_t pin)
{
	switch (port) {
   804e0:	2841      	cmp	r0, #65	; 0x41
   804e2:	d109      	bne.n	804f8 <pin_util_toggle+0x18>
		case 'A':
		{
			uint32_t port_data = PIOA->PIO_ODSR;
   804e4:	4b06      	ldr	r3, [pc, #24]	; (80500 <pin_util_toggle+0x20>)
   804e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
			if (port_data & (1u << pin))	PIOA->PIO_CODR = (1u << pin);
   804e8:	2301      	movs	r3, #1
   804ea:	fa03 f101 	lsl.w	r1, r3, r1
   804ee:	420a      	tst	r2, r1
   804f0:	d103      	bne.n	804fa <pin_util_toggle+0x1a>
			else							PIOA->PIO_SODR = port_data | (1u << pin);
   804f2:	4311      	orrs	r1, r2
   804f4:	4b02      	ldr	r3, [pc, #8]	; (80500 <pin_util_toggle+0x20>)
   804f6:	6319      	str	r1, [r3, #48]	; 0x30
   804f8:	4770      	bx	lr
			if (port_data & (1u << pin))	PIOA->PIO_CODR = (1u << pin);
   804fa:	4b01      	ldr	r3, [pc, #4]	; (80500 <pin_util_toggle+0x20>)
   804fc:	6359      	str	r1, [r3, #52]	; 0x34
   804fe:	4770      	bx	lr
   80500:	400e0e00 	.word	0x400e0e00

00080504 <pwm_config>:
	
	pwm_config(5);
	pwm_config(6);
}

void pwm_config(uint8_t ch_num){
   80504:	b430      	push	{r4, r5}
	
	PWM->PWM_ENA &= ~(1 << ch_num);
   80506:	4b10      	ldr	r3, [pc, #64]	; (80548 <pwm_config+0x44>)
   80508:	6859      	ldr	r1, [r3, #4]
   8050a:	2201      	movs	r2, #1
   8050c:	4082      	lsls	r2, r0
   8050e:	ea21 0102 	bic.w	r1, r1, r2
   80512:	6059      	str	r1, [r3, #4]
	// disable write protect for all register groups to enable configuration of pwm
	PWM->PWM_WPCR = ('P' << 24) + ('W' << 16) + ('M' << 8) + (0b1111111 << 2) + 0b00;
   80514:	490d      	ldr	r1, [pc, #52]	; (8054c <pwm_config+0x48>)
   80516:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
	
	// clk gen?
	//PWM->PWM_CLK = PWM_CLK_DIVA(1) + PWM_CLK_DIVB(1) + PWM_CLK_PREA(1) + PWM_CLK_PREB(1);
	
	// select clock
	PWM->PWM_CH_NUM[ch_num].PWM_CMR = 0b0101; // select CLKA : 0b1011, select MCLK : 0b0000;
   8051a:	f100 0110 	add.w	r1, r0, #16
   8051e:	0149      	lsls	r1, r1, #5
   80520:	185c      	adds	r4, r3, r1
   80522:	2505      	movs	r5, #5
   80524:	505d      	str	r5, [r3, r1]
	
	// select period
	PWM->PWM_CH_NUM[ch_num].PWM_CPRD = CPRD;
   80526:	490a      	ldr	r1, [pc, #40]	; (80550 <pwm_config+0x4c>)
   80528:	6809      	ldr	r1, [r1, #0]
   8052a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   8052e:	f8c0 120c 	str.w	r1, [r0, #524]	; 0x20c
	
	// set duty cycle
	PWM->PWM_CH_NUM[ch_num].PWM_CDTY = CPRD - 1500 * 84 / 32;
   80532:	f6a1 7161 	subw	r1, r1, #3937	; 0xf61
   80536:	6061      	str	r1, [r4, #4]
	
	// set cmp mode
	//PWM->PWM_CH_NUM[ch_num].PWM_CMPM =
	
	// enable pwm channel
	PWM->PWM_ENA |= 1 << ch_num;
   80538:	6859      	ldr	r1, [r3, #4]
   8053a:	430a      	orrs	r2, r1
   8053c:	605a      	str	r2, [r3, #4]
	
	// lock write-protect
	PWM->PWM_WPCR = ('P' << 24) + ('W' << 16) + ('M' << 8) + (0b1111111 << 2) + 0b10;
   8053e:	4a05      	ldr	r2, [pc, #20]	; (80554 <pwm_config+0x50>)
   80540:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   80544:	bc30      	pop	{r4, r5}
   80546:	4770      	bx	lr
   80548:	40094000 	.word	0x40094000
   8054c:	50574efc 	.word	0x50574efc
   80550:	20000004 	.word	0x20000004
   80554:	50574efe 	.word	0x50574efe

00080558 <init_pwm>:
void init_pwm(){
   80558:	b510      	push	{r4, lr}
	PIOC->PIO_PDR |= PIO_PDR_P19;
   8055a:	4b0e      	ldr	r3, [pc, #56]	; (80594 <init_pwm+0x3c>)
   8055c:	685a      	ldr	r2, [r3, #4]
   8055e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80562:	605a      	str	r2, [r3, #4]
	PIOC->PIO_PDR |= PIO_PDR_P18;
   80564:	685a      	ldr	r2, [r3, #4]
   80566:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8056a:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   8056c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8056e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80572:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_ABSR |= PIO_ABSR_P18;
   80574:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80576:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8057a:	671a      	str	r2, [r3, #112]	; 0x70
	PMC->PMC_PCR = (1 << 28) + (1 << 12) + 36;
   8057c:	4a06      	ldr	r2, [pc, #24]	; (80598 <init_pwm+0x40>)
   8057e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
   80582:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pwm_config(5);
   80586:	2005      	movs	r0, #5
   80588:	4c04      	ldr	r4, [pc, #16]	; (8059c <init_pwm+0x44>)
   8058a:	47a0      	blx	r4
	pwm_config(6);
   8058c:	2006      	movs	r0, #6
   8058e:	47a0      	blx	r4
   80590:	bd10      	pop	{r4, pc}
   80592:	bf00      	nop
   80594:	400e1200 	.word	0x400e1200
   80598:	10001024 	.word	0x10001024
   8059c:	00080505 	.word	0x00080505

000805a0 <pwm_set_dc>:

/*
error 1 on invalid us value
*/
uint8_t pwm_set_dc(uint8_t ch_num, uint32_t us_high){
	if (us_high >= 2000 || us_high <= 1000){
   805a0:	f2a1 32e9 	subw	r2, r1, #1001	; 0x3e9
   805a4:	f240 33e6 	movw	r3, #998	; 0x3e6
   805a8:	429a      	cmp	r2, r3
   805aa:	d818      	bhi.n	805de <pwm_set_dc+0x3e>
uint8_t pwm_set_dc(uint8_t ch_num, uint32_t us_high){
   805ac:	b410      	push	{r4}
		return 1;	
	}
	uint32_t period_us = CPRD * 32 / 84; // us
   805ae:	4b0d      	ldr	r3, [pc, #52]	; (805e4 <pwm_set_dc+0x44>)
   805b0:	681a      	ldr	r2, [r3, #0]
   805b2:	0153      	lsls	r3, r2, #5
   805b4:	089b      	lsrs	r3, r3, #2
   805b6:	4c0c      	ldr	r4, [pc, #48]	; (805e8 <pwm_set_dc+0x48>)
   805b8:	fba4 4303 	umull	r4, r3, r4, r3
   805bc:	089b      	lsrs	r3, r3, #2
	uint8_t duty_cycle_divisor = period_us / us_high;
   805be:	fbb3 f1f1 	udiv	r1, r3, r1
	
	//PWM->PWM_WPCR = ('P' << 24) + ('W' << 16) + ('M' << 8) + (0b1111111 << 2) + 0b00;
	//PWM->PWM_CH_NUM[ch_num].PWM_CDTY = CPRD - CPRD / duty_cycle_divisor;
	//PWM->PWM_WPCR = ('P' << 24) + ('W' << 16) + ('M' << 8) + (0b1111111 << 2) + 0b10;
	
	PWM->PWM_CH_NUM[ch_num].PWM_CDTYUPD = CPRD - CPRD / duty_cycle_divisor;
   805c2:	b2c9      	uxtb	r1, r1
   805c4:	fbb2 f1f1 	udiv	r1, r2, r1
   805c8:	1a51      	subs	r1, r2, r1
   805ca:	0140      	lsls	r0, r0, #5
   805cc:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   805d0:	f500 2010 	add.w	r0, r0, #589824	; 0x90000
   805d4:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
	
	return 0;
   805d8:	2000      	movs	r0, #0
}
   805da:	bc10      	pop	{r4}
   805dc:	4770      	bx	lr
		return 1;	
   805de:	2001      	movs	r0, #1
   805e0:	4770      	bx	lr
   805e2:	bf00      	nop
   805e4:	20000004 	.word	0x20000004
   805e8:	30c30c31 	.word	0x30c30c31

000805ec <pwm_joystick_read>:

void pwm_joystick_read(uint8_t dir){
   805ec:	b508      	push	{r3, lr}
	uint8_t joystick_delta = 50;
	
	if (dir == 3){
   805ee:	2803      	cmp	r0, #3
   805f0:	d002      	beq.n	805f8 <pwm_joystick_read+0xc>
		// right
		servo_pos_us += joystick_delta;
		if(pwm_set_dc(5, servo_pos_us) != 0) servo_pos_us -= joystick_delta; // out of bounds correction
	} else if (dir == 4){
   805f2:	2804      	cmp	r0, #4
   805f4:	d00e      	beq.n	80614 <pwm_joystick_read+0x28>
   805f6:	bd08      	pop	{r3, pc}
		servo_pos_us += joystick_delta;
   805f8:	4b0d      	ldr	r3, [pc, #52]	; (80630 <pwm_joystick_read+0x44>)
   805fa:	6859      	ldr	r1, [r3, #4]
   805fc:	3132      	adds	r1, #50	; 0x32
   805fe:	6059      	str	r1, [r3, #4]
		if(pwm_set_dc(5, servo_pos_us) != 0) servo_pos_us -= joystick_delta; // out of bounds correction
   80600:	2005      	movs	r0, #5
   80602:	4b0c      	ldr	r3, [pc, #48]	; (80634 <pwm_joystick_read+0x48>)
   80604:	4798      	blx	r3
   80606:	2800      	cmp	r0, #0
   80608:	d0f5      	beq.n	805f6 <pwm_joystick_read+0xa>
   8060a:	4a09      	ldr	r2, [pc, #36]	; (80630 <pwm_joystick_read+0x44>)
   8060c:	6853      	ldr	r3, [r2, #4]
   8060e:	3b32      	subs	r3, #50	; 0x32
   80610:	6053      	str	r3, [r2, #4]
   80612:	bd08      	pop	{r3, pc}
		// left
		servo_pos_us -= joystick_delta;
   80614:	4b06      	ldr	r3, [pc, #24]	; (80630 <pwm_joystick_read+0x44>)
   80616:	6859      	ldr	r1, [r3, #4]
   80618:	3932      	subs	r1, #50	; 0x32
   8061a:	6059      	str	r1, [r3, #4]
		if(pwm_set_dc(5, servo_pos_us) != 0) servo_pos_us += joystick_delta; // out of bounds correction
   8061c:	2005      	movs	r0, #5
   8061e:	4b05      	ldr	r3, [pc, #20]	; (80634 <pwm_joystick_read+0x48>)
   80620:	4798      	blx	r3
   80622:	2800      	cmp	r0, #0
   80624:	d0e7      	beq.n	805f6 <pwm_joystick_read+0xa>
   80626:	4a02      	ldr	r2, [pc, #8]	; (80630 <pwm_joystick_read+0x44>)
   80628:	6853      	ldr	r3, [r2, #4]
   8062a:	3332      	adds	r3, #50	; 0x32
   8062c:	6053      	str	r3, [r2, #4]
	}
}
   8062e:	e7e2      	b.n	805f6 <pwm_joystick_read+0xa>
   80630:	20000004 	.word	0x20000004
   80634:	000805a1 	.word	0x000805a1

00080638 <delay>:
#include "pwm_driver.h"

#define F_CPU 4000

void delay(uint32_t ms){
	for(uint32_t i=0; i<F_CPU * ms / 4; i++){__NOP();}
   80638:	2200      	movs	r2, #0
   8063a:	e001      	b.n	80640 <delay+0x8>
   8063c:	bf00      	nop
   8063e:	3201      	adds	r2, #1
   80640:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   80644:	fb03 f300 	mul.w	r3, r3, r0
   80648:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
   8064c:	d3f6      	bcc.n	8063c <delay+0x4>
}
   8064e:	4770      	bx	lr

00080650 <init>:

void init()
{
   80650:	b510      	push	{r4, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
   80652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80656:	4b06      	ldr	r3, [pc, #24]	; (80670 <init+0x20>)
   80658:	605a      	str	r2, [r3, #4]
	pin_util_set_dir('A', 19, OUTPUT_ENABLE);
   8065a:	2201      	movs	r2, #1
   8065c:	2113      	movs	r1, #19
   8065e:	2041      	movs	r0, #65	; 0x41
   80660:	4c04      	ldr	r4, [pc, #16]	; (80674 <init+0x24>)
   80662:	47a0      	blx	r4
	pin_util_set_dir('A', 20, OUTPUT_ENABLE);
   80664:	2201      	movs	r2, #1
   80666:	2114      	movs	r1, #20
   80668:	2041      	movs	r0, #65	; 0x41
   8066a:	47a0      	blx	r4
   8066c:	bd10      	pop	{r4, pc}
   8066e:	bf00      	nop
   80670:	400e1a50 	.word	0x400e1a50
   80674:	00080481 	.word	0x00080481

00080678 <main>:
	
}

int main(void)
{
   80678:	b510      	push	{r4, lr}
	SystemInit();
   8067a:	4b0e      	ldr	r3, [pc, #56]	; (806b4 <main+0x3c>)
   8067c:	4798      	blx	r3
	init();
   8067e:	4b0e      	ldr	r3, [pc, #56]	; (806b8 <main+0x40>)
   80680:	4798      	blx	r3
	configure_uart();
   80682:	4b0e      	ldr	r3, [pc, #56]	; (806bc <main+0x44>)
   80684:	4798      	blx	r3
	uint8_t ret = can_init_def_tx_rx_mb();
   80686:	4b0e      	ldr	r3, [pc, #56]	; (806c0 <main+0x48>)
   80688:	4798      	blx	r3
	if(ret == 1) printf("can init failed");
   8068a:	2801      	cmp	r0, #1
   8068c:	d00d      	beq.n	806aa <main+0x32>
	init_pwm();
   8068e:	4b0d      	ldr	r3, [pc, #52]	; (806c4 <main+0x4c>)
   80690:	4798      	blx	r3
	//printf("begin");	
	//uart_putchar("c");
	
    while (1) 
    {
		pin_util_toggle('A', 19);
   80692:	2113      	movs	r1, #19
   80694:	2041      	movs	r0, #65	; 0x41
   80696:	4c0c      	ldr	r4, [pc, #48]	; (806c8 <main+0x50>)
   80698:	47a0      	blx	r4
		pin_util_toggle('A', 20);
   8069a:	2114      	movs	r1, #20
   8069c:	2041      	movs	r0, #65	; 0x41
   8069e:	47a0      	blx	r4
		msg.data[3] = 0x44;
		int ret = can_send(&msg, 0);
		//if (ret != 0) printf(" can tx mb busy");
		*/
		//pwm_set_dc(5, 1999);
		delay(500);
   806a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   806a4:	4b09      	ldr	r3, [pc, #36]	; (806cc <main+0x54>)
   806a6:	4798      	blx	r3
   806a8:	e7f3      	b.n	80692 <main+0x1a>
	if(ret == 1) printf("can init failed");
   806aa:	4809      	ldr	r0, [pc, #36]	; (806d0 <main+0x58>)
   806ac:	4b09      	ldr	r3, [pc, #36]	; (806d4 <main+0x5c>)
   806ae:	4798      	blx	r3
   806b0:	e7ed      	b.n	8068e <main+0x16>
   806b2:	bf00      	nop
   806b4:	000803dd 	.word	0x000803dd
   806b8:	00080651 	.word	0x00080651
   806bc:	0008098d 	.word	0x0008098d
   806c0:	00080245 	.word	0x00080245
   806c4:	00080559 	.word	0x00080559
   806c8:	000804e1 	.word	0x000804e1
   806cc:	00080639 	.word	0x00080639
   806d0:	00080c48 	.word	0x00080c48
   806d4:	00080969 	.word	0x00080969

000806d8 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   806d8:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   806da:	b2c8      	uxtb	r0, r1
   806dc:	4b01      	ldr	r3, [pc, #4]	; (806e4 <printchar+0xc>)
   806de:	4798      	blx	r3
   806e0:	bd08      	pop	{r3, pc}
   806e2:	bf00      	nop
   806e4:	000809f5 	.word	0x000809f5

000806e8 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   806e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806ec:	4607      	mov	r7, r0
   806ee:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   806f0:	1e15      	subs	r5, r2, #0
   806f2:	dd02      	ble.n	806fa <prints+0x12>
   806f4:	460a      	mov	r2, r1
   806f6:	2100      	movs	r1, #0
   806f8:	e004      	b.n	80704 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   806fa:	f04f 0820 	mov.w	r8, #32
   806fe:	e00e      	b.n	8071e <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80700:	3101      	adds	r1, #1
   80702:	3201      	adds	r2, #1
   80704:	7810      	ldrb	r0, [r2, #0]
   80706:	2800      	cmp	r0, #0
   80708:	d1fa      	bne.n	80700 <prints+0x18>
		if (len >= width) width = 0;
   8070a:	42a9      	cmp	r1, r5
   8070c:	da01      	bge.n	80712 <prints+0x2a>
		else width -= len;
   8070e:	1a6d      	subs	r5, r5, r1
   80710:	e000      	b.n	80714 <prints+0x2c>
		if (len >= width) width = 0;
   80712:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80714:	f013 0f02 	tst.w	r3, #2
   80718:	d106      	bne.n	80728 <prints+0x40>
	register int pc = 0, padchar = ' ';
   8071a:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   8071e:	f013 0401 	ands.w	r4, r3, #1
   80722:	d00a      	beq.n	8073a <prints+0x52>
	register int pc = 0, padchar = ' ';
   80724:	2400      	movs	r4, #0
   80726:	e010      	b.n	8074a <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80728:	f04f 0830 	mov.w	r8, #48	; 0x30
   8072c:	e7f7      	b.n	8071e <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   8072e:	4641      	mov	r1, r8
   80730:	4638      	mov	r0, r7
   80732:	4b0d      	ldr	r3, [pc, #52]	; (80768 <prints+0x80>)
   80734:	4798      	blx	r3
			++pc;
   80736:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80738:	3d01      	subs	r5, #1
   8073a:	2d00      	cmp	r5, #0
   8073c:	dcf7      	bgt.n	8072e <prints+0x46>
   8073e:	e004      	b.n	8074a <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80740:	4638      	mov	r0, r7
   80742:	4b09      	ldr	r3, [pc, #36]	; (80768 <prints+0x80>)
   80744:	4798      	blx	r3
		++pc;
   80746:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80748:	3601      	adds	r6, #1
   8074a:	7831      	ldrb	r1, [r6, #0]
   8074c:	2900      	cmp	r1, #0
   8074e:	d1f7      	bne.n	80740 <prints+0x58>
   80750:	e005      	b.n	8075e <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80752:	4641      	mov	r1, r8
   80754:	4638      	mov	r0, r7
   80756:	4b04      	ldr	r3, [pc, #16]	; (80768 <prints+0x80>)
   80758:	4798      	blx	r3
		++pc;
   8075a:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   8075c:	3d01      	subs	r5, #1
   8075e:	2d00      	cmp	r5, #0
   80760:	dcf7      	bgt.n	80752 <prints+0x6a>
	}

	return pc;
}
   80762:	4620      	mov	r0, r4
   80764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80768:	000806d9 	.word	0x000806d9

0008076c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   8076c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8076e:	b085      	sub	sp, #20
   80770:	4607      	mov	r7, r0
   80772:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80774:	b151      	cbz	r1, 8078c <printi+0x20>
   80776:	461e      	mov	r6, r3
   80778:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8077a:	b113      	cbz	r3, 80782 <printi+0x16>
   8077c:	2a0a      	cmp	r2, #10
   8077e:	d012      	beq.n	807a6 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80780:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80782:	ad04      	add	r5, sp, #16
   80784:	2300      	movs	r3, #0
   80786:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   8078a:	e018      	b.n	807be <printi+0x52>
		print_buf[0] = '0';
   8078c:	2330      	movs	r3, #48	; 0x30
   8078e:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80792:	2300      	movs	r3, #0
   80794:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8079a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8079c:	a901      	add	r1, sp, #4
   8079e:	4638      	mov	r0, r7
   807a0:	4c1b      	ldr	r4, [pc, #108]	; (80810 <printi+0xa4>)
   807a2:	47a0      	blx	r4
   807a4:	e029      	b.n	807fa <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   807a6:	2900      	cmp	r1, #0
   807a8:	db01      	blt.n	807ae <printi+0x42>
	register int t, neg = 0, pc = 0;
   807aa:	2600      	movs	r6, #0
   807ac:	e7e9      	b.n	80782 <printi+0x16>
		u = -i;
   807ae:	424c      	negs	r4, r1
		neg = 1;
   807b0:	2601      	movs	r6, #1
   807b2:	e7e6      	b.n	80782 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   807b4:	3330      	adds	r3, #48	; 0x30
   807b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   807ba:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   807be:	b14c      	cbz	r4, 807d4 <printi+0x68>
		t = u % b;
   807c0:	fbb4 f3f2 	udiv	r3, r4, r2
   807c4:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   807c8:	2b09      	cmp	r3, #9
   807ca:	ddf3      	ble.n	807b4 <printi+0x48>
			t += letbase - '0' - 10;
   807cc:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   807d0:	440b      	add	r3, r1
   807d2:	e7ef      	b.n	807b4 <printi+0x48>
	}

	if (neg) {
   807d4:	b156      	cbz	r6, 807ec <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   807d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   807d8:	b11b      	cbz	r3, 807e2 <printi+0x76>
   807da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   807dc:	f013 0f02 	tst.w	r3, #2
   807e0:	d10d      	bne.n	807fe <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   807e2:	232d      	movs	r3, #45	; 0x2d
   807e4:	f805 3c01 	strb.w	r3, [r5, #-1]
   807e8:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   807ea:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   807ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   807ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   807f0:	4629      	mov	r1, r5
   807f2:	4638      	mov	r0, r7
   807f4:	4c06      	ldr	r4, [pc, #24]	; (80810 <printi+0xa4>)
   807f6:	47a0      	blx	r4
   807f8:	4430      	add	r0, r6
}
   807fa:	b005      	add	sp, #20
   807fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   807fe:	212d      	movs	r1, #45	; 0x2d
   80800:	4638      	mov	r0, r7
   80802:	4b04      	ldr	r3, [pc, #16]	; (80814 <printi+0xa8>)
   80804:	4798      	blx	r3
			--width;
   80806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80808:	3b01      	subs	r3, #1
   8080a:	930a      	str	r3, [sp, #40]	; 0x28
   8080c:	e7ee      	b.n	807ec <printi+0x80>
   8080e:	bf00      	nop
   80810:	000806e9 	.word	0x000806e9
   80814:	000806d9 	.word	0x000806d9

00080818 <print>:

static int print( char **out, const char *format, va_list args )
{
   80818:	b5f0      	push	{r4, r5, r6, r7, lr}
   8081a:	b089      	sub	sp, #36	; 0x24
   8081c:	4606      	mov	r6, r0
   8081e:	460c      	mov	r4, r1
   80820:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80822:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80824:	e081      	b.n	8092a <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80826:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80828:	2301      	movs	r3, #1
   8082a:	e08b      	b.n	80944 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   8082c:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   8082e:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80832:	7822      	ldrb	r2, [r4, #0]
   80834:	2a30      	cmp	r2, #48	; 0x30
   80836:	d0f9      	beq.n	8082c <print+0x14>
   80838:	2200      	movs	r2, #0
   8083a:	e006      	b.n	8084a <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   8083c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80840:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80842:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80846:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80848:	3401      	adds	r4, #1
   8084a:	7821      	ldrb	r1, [r4, #0]
   8084c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80850:	b2c0      	uxtb	r0, r0
   80852:	2809      	cmp	r0, #9
   80854:	d9f2      	bls.n	8083c <print+0x24>
			}
			if( *format == 's' ) {
   80856:	2973      	cmp	r1, #115	; 0x73
   80858:	d018      	beq.n	8088c <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   8085a:	2964      	cmp	r1, #100	; 0x64
   8085c:	d022      	beq.n	808a4 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   8085e:	2978      	cmp	r1, #120	; 0x78
   80860:	d02f      	beq.n	808c2 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80862:	2958      	cmp	r1, #88	; 0x58
   80864:	d03c      	beq.n	808e0 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80866:	2975      	cmp	r1, #117	; 0x75
   80868:	d049      	beq.n	808fe <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   8086a:	2963      	cmp	r1, #99	; 0x63
   8086c:	d15c      	bne.n	80928 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   8086e:	9905      	ldr	r1, [sp, #20]
   80870:	1d08      	adds	r0, r1, #4
   80872:	9005      	str	r0, [sp, #20]
   80874:	7809      	ldrb	r1, [r1, #0]
   80876:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   8087a:	2100      	movs	r1, #0
   8087c:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80880:	a907      	add	r1, sp, #28
   80882:	4630      	mov	r0, r6
   80884:	4f34      	ldr	r7, [pc, #208]	; (80958 <print+0x140>)
   80886:	47b8      	blx	r7
   80888:	4405      	add	r5, r0
				continue;
   8088a:	e04d      	b.n	80928 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   8088c:	9905      	ldr	r1, [sp, #20]
   8088e:	1d08      	adds	r0, r1, #4
   80890:	9005      	str	r0, [sp, #20]
   80892:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80894:	b121      	cbz	r1, 808a0 <print+0x88>
   80896:	4630      	mov	r0, r6
   80898:	4f2f      	ldr	r7, [pc, #188]	; (80958 <print+0x140>)
   8089a:	47b8      	blx	r7
   8089c:	4405      	add	r5, r0
				continue;
   8089e:	e043      	b.n	80928 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   808a0:	492e      	ldr	r1, [pc, #184]	; (8095c <print+0x144>)
   808a2:	e7f8      	b.n	80896 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   808a4:	9905      	ldr	r1, [sp, #20]
   808a6:	1d08      	adds	r0, r1, #4
   808a8:	9005      	str	r0, [sp, #20]
   808aa:	6809      	ldr	r1, [r1, #0]
   808ac:	2061      	movs	r0, #97	; 0x61
   808ae:	9002      	str	r0, [sp, #8]
   808b0:	9301      	str	r3, [sp, #4]
   808b2:	9200      	str	r2, [sp, #0]
   808b4:	2301      	movs	r3, #1
   808b6:	220a      	movs	r2, #10
   808b8:	4630      	mov	r0, r6
   808ba:	4f29      	ldr	r7, [pc, #164]	; (80960 <print+0x148>)
   808bc:	47b8      	blx	r7
   808be:	4405      	add	r5, r0
				continue;
   808c0:	e032      	b.n	80928 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   808c2:	9905      	ldr	r1, [sp, #20]
   808c4:	1d08      	adds	r0, r1, #4
   808c6:	9005      	str	r0, [sp, #20]
   808c8:	6809      	ldr	r1, [r1, #0]
   808ca:	2061      	movs	r0, #97	; 0x61
   808cc:	9002      	str	r0, [sp, #8]
   808ce:	9301      	str	r3, [sp, #4]
   808d0:	9200      	str	r2, [sp, #0]
   808d2:	2300      	movs	r3, #0
   808d4:	2210      	movs	r2, #16
   808d6:	4630      	mov	r0, r6
   808d8:	4f21      	ldr	r7, [pc, #132]	; (80960 <print+0x148>)
   808da:	47b8      	blx	r7
   808dc:	4405      	add	r5, r0
				continue;
   808de:	e023      	b.n	80928 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   808e0:	9905      	ldr	r1, [sp, #20]
   808e2:	1d08      	adds	r0, r1, #4
   808e4:	9005      	str	r0, [sp, #20]
   808e6:	6809      	ldr	r1, [r1, #0]
   808e8:	2041      	movs	r0, #65	; 0x41
   808ea:	9002      	str	r0, [sp, #8]
   808ec:	9301      	str	r3, [sp, #4]
   808ee:	9200      	str	r2, [sp, #0]
   808f0:	2300      	movs	r3, #0
   808f2:	2210      	movs	r2, #16
   808f4:	4630      	mov	r0, r6
   808f6:	4f1a      	ldr	r7, [pc, #104]	; (80960 <print+0x148>)
   808f8:	47b8      	blx	r7
   808fa:	4405      	add	r5, r0
				continue;
   808fc:	e014      	b.n	80928 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   808fe:	9905      	ldr	r1, [sp, #20]
   80900:	1d08      	adds	r0, r1, #4
   80902:	9005      	str	r0, [sp, #20]
   80904:	6809      	ldr	r1, [r1, #0]
   80906:	2061      	movs	r0, #97	; 0x61
   80908:	9002      	str	r0, [sp, #8]
   8090a:	9301      	str	r3, [sp, #4]
   8090c:	9200      	str	r2, [sp, #0]
   8090e:	2300      	movs	r3, #0
   80910:	220a      	movs	r2, #10
   80912:	4630      	mov	r0, r6
   80914:	4f12      	ldr	r7, [pc, #72]	; (80960 <print+0x148>)
   80916:	47b8      	blx	r7
   80918:	4405      	add	r5, r0
				continue;
   8091a:	e005      	b.n	80928 <print+0x110>
			++format;
   8091c:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   8091e:	7821      	ldrb	r1, [r4, #0]
   80920:	4630      	mov	r0, r6
   80922:	4b10      	ldr	r3, [pc, #64]	; (80964 <print+0x14c>)
   80924:	4798      	blx	r3
			++pc;
   80926:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80928:	3401      	adds	r4, #1
   8092a:	7823      	ldrb	r3, [r4, #0]
   8092c:	b163      	cbz	r3, 80948 <print+0x130>
		if (*format == '%') {
   8092e:	2b25      	cmp	r3, #37	; 0x25
   80930:	d1f5      	bne.n	8091e <print+0x106>
			++format;
   80932:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80934:	7863      	ldrb	r3, [r4, #1]
   80936:	b13b      	cbz	r3, 80948 <print+0x130>
			if (*format == '%') goto out;
   80938:	2b25      	cmp	r3, #37	; 0x25
   8093a:	d0ef      	beq.n	8091c <print+0x104>
			if (*format == '-') {
   8093c:	2b2d      	cmp	r3, #45	; 0x2d
   8093e:	f43f af72 	beq.w	80826 <print+0xe>
			width = pad = 0;
   80942:	2300      	movs	r3, #0
   80944:	4614      	mov	r4, r2
   80946:	e774      	b.n	80832 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80948:	b116      	cbz	r6, 80950 <print+0x138>
   8094a:	6833      	ldr	r3, [r6, #0]
   8094c:	2200      	movs	r2, #0
   8094e:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80950:	4628      	mov	r0, r5
   80952:	b009      	add	sp, #36	; 0x24
   80954:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80956:	bf00      	nop
   80958:	000806e9 	.word	0x000806e9
   8095c:	00080c58 	.word	0x00080c58
   80960:	0008076d 	.word	0x0008076d
   80964:	000806d9 	.word	0x000806d9

00080968 <printf>:

int printf(const char *format, ...)
{
   80968:	b40f      	push	{r0, r1, r2, r3}
   8096a:	b500      	push	{lr}
   8096c:	b083      	sub	sp, #12
   8096e:	aa04      	add	r2, sp, #16
   80970:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80974:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80976:	2000      	movs	r0, #0
   80978:	4b03      	ldr	r3, [pc, #12]	; (80988 <printf+0x20>)
   8097a:	4798      	blx	r3
}
   8097c:	b003      	add	sp, #12
   8097e:	f85d eb04 	ldr.w	lr, [sp], #4
   80982:	b004      	add	sp, #16
   80984:	4770      	bx	lr
   80986:	bf00      	nop
   80988:	00080819 	.word	0x00080819

0008098c <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   8098c:	4b16      	ldr	r3, [pc, #88]	; (809e8 <configure_uart+0x5c>)
   8098e:	2200      	movs	r2, #0
   80990:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80992:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80994:	4b15      	ldr	r3, [pc, #84]	; (809ec <configure_uart+0x60>)
   80996:	f44f 7140 	mov.w	r1, #768	; 0x300
   8099a:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8099c:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   8099e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   809a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   809a2:	4002      	ands	r2, r0
   809a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   809a8:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809aa:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   809ac:	f44f 7280 	mov.w	r2, #256	; 0x100
   809b0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   809b4:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   809b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   809ba:	21ac      	movs	r1, #172	; 0xac
   809bc:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	//UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
	//UART->UART_BRGR = 547; // MCK = 12 MHz, => BaudRate = 9612
	UART->UART_BRGR = 547;
   809be:	f240 2123 	movw	r1, #547	; 0x223
   809c2:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   809c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   809c8:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   809ca:	f240 2102 	movw	r1, #514	; 0x202
   809ce:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   809d2:	f04f 31ff 	mov.w	r1, #4294967295
   809d6:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   809d8:	21e1      	movs	r1, #225	; 0xe1
   809da:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   809dc:	4904      	ldr	r1, [pc, #16]	; (809f0 <configure_uart+0x64>)
   809de:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   809e0:	2250      	movs	r2, #80	; 0x50
   809e2:	601a      	str	r2, [r3, #0]
   809e4:	4770      	bx	lr
   809e6:	bf00      	nop
   809e8:	20000458 	.word	0x20000458
   809ec:	400e0e00 	.word	0x400e0e00
   809f0:	e000e100 	.word	0xe000e100

000809f4 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   809f4:	4b07      	ldr	r3, [pc, #28]	; (80a14 <uart_putchar+0x20>)
   809f6:	695b      	ldr	r3, [r3, #20]
   809f8:	f013 0f02 	tst.w	r3, #2
   809fc:	d008      	beq.n	80a10 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   809fe:	4b05      	ldr	r3, [pc, #20]	; (80a14 <uart_putchar+0x20>)
   80a00:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80a02:	4b04      	ldr	r3, [pc, #16]	; (80a14 <uart_putchar+0x20>)
   80a04:	695b      	ldr	r3, [r3, #20]
   80a06:	f413 7f00 	tst.w	r3, #512	; 0x200
   80a0a:	d0fa      	beq.n	80a02 <uart_putchar+0xe>
	return 0;
   80a0c:	2000      	movs	r0, #0
   80a0e:	4770      	bx	lr
	return 1;
   80a10:	2001      	movs	r0, #1
}
   80a12:	4770      	bx	lr
   80a14:	400e0800 	.word	0x400e0800

00080a18 <UART_Handler>:

void UART_Handler(void)
{
   80a18:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80a1a:	4b15      	ldr	r3, [pc, #84]	; (80a70 <UART_Handler+0x58>)
   80a1c:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80a1e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80a22:	d003      	beq.n	80a2c <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80a24:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80a28:	4a11      	ldr	r2, [pc, #68]	; (80a70 <UART_Handler+0x58>)
   80a2a:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80a2c:	f013 0f01 	tst.w	r3, #1
   80a30:	d012      	beq.n	80a58 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80a32:	4810      	ldr	r0, [pc, #64]	; (80a74 <UART_Handler+0x5c>)
   80a34:	7842      	ldrb	r2, [r0, #1]
   80a36:	1c53      	adds	r3, r2, #1
   80a38:	4259      	negs	r1, r3
   80a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80a3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80a42:	bf58      	it	pl
   80a44:	424b      	negpl	r3, r1
   80a46:	7801      	ldrb	r1, [r0, #0]
   80a48:	428b      	cmp	r3, r1
   80a4a:	d006      	beq.n	80a5a <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80a4c:	4908      	ldr	r1, [pc, #32]	; (80a70 <UART_Handler+0x58>)
   80a4e:	6988      	ldr	r0, [r1, #24]
   80a50:	4908      	ldr	r1, [pc, #32]	; (80a74 <UART_Handler+0x5c>)
   80a52:	440a      	add	r2, r1
   80a54:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80a56:	704b      	strb	r3, [r1, #1]
   80a58:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80a5a:	4807      	ldr	r0, [pc, #28]	; (80a78 <UART_Handler+0x60>)
   80a5c:	4b07      	ldr	r3, [pc, #28]	; (80a7c <UART_Handler+0x64>)
   80a5e:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80a60:	4b04      	ldr	r3, [pc, #16]	; (80a74 <UART_Handler+0x5c>)
   80a62:	7859      	ldrb	r1, [r3, #1]
   80a64:	4a02      	ldr	r2, [pc, #8]	; (80a70 <UART_Handler+0x58>)
   80a66:	6992      	ldr	r2, [r2, #24]
   80a68:	440b      	add	r3, r1
   80a6a:	709a      	strb	r2, [r3, #2]
			return;
   80a6c:	bd08      	pop	{r3, pc}
   80a6e:	bf00      	nop
   80a70:	400e0800 	.word	0x400e0800
   80a74:	20000458 	.word	0x20000458
   80a78:	00080c60 	.word	0x00080c60
   80a7c:	00080969 	.word	0x00080969

00080a80 <__libc_init_array>:
   80a80:	b570      	push	{r4, r5, r6, lr}
   80a82:	4e0f      	ldr	r6, [pc, #60]	; (80ac0 <__libc_init_array+0x40>)
   80a84:	4d0f      	ldr	r5, [pc, #60]	; (80ac4 <__libc_init_array+0x44>)
   80a86:	1b76      	subs	r6, r6, r5
   80a88:	10b6      	asrs	r6, r6, #2
   80a8a:	bf18      	it	ne
   80a8c:	2400      	movne	r4, #0
   80a8e:	d005      	beq.n	80a9c <__libc_init_array+0x1c>
   80a90:	3401      	adds	r4, #1
   80a92:	f855 3b04 	ldr.w	r3, [r5], #4
   80a96:	4798      	blx	r3
   80a98:	42a6      	cmp	r6, r4
   80a9a:	d1f9      	bne.n	80a90 <__libc_init_array+0x10>
   80a9c:	4e0a      	ldr	r6, [pc, #40]	; (80ac8 <__libc_init_array+0x48>)
   80a9e:	4d0b      	ldr	r5, [pc, #44]	; (80acc <__libc_init_array+0x4c>)
   80aa0:	f000 f8f0 	bl	80c84 <_init>
   80aa4:	1b76      	subs	r6, r6, r5
   80aa6:	10b6      	asrs	r6, r6, #2
   80aa8:	bf18      	it	ne
   80aaa:	2400      	movne	r4, #0
   80aac:	d006      	beq.n	80abc <__libc_init_array+0x3c>
   80aae:	3401      	adds	r4, #1
   80ab0:	f855 3b04 	ldr.w	r3, [r5], #4
   80ab4:	4798      	blx	r3
   80ab6:	42a6      	cmp	r6, r4
   80ab8:	d1f9      	bne.n	80aae <__libc_init_array+0x2e>
   80aba:	bd70      	pop	{r4, r5, r6, pc}
   80abc:	bd70      	pop	{r4, r5, r6, pc}
   80abe:	bf00      	nop
   80ac0:	00080c90 	.word	0x00080c90
   80ac4:	00080c90 	.word	0x00080c90
   80ac8:	00080c98 	.word	0x00080c98
   80acc:	00080c90 	.word	0x00080c90

00080ad0 <register_fini>:
   80ad0:	4b02      	ldr	r3, [pc, #8]	; (80adc <register_fini+0xc>)
   80ad2:	b113      	cbz	r3, 80ada <register_fini+0xa>
   80ad4:	4802      	ldr	r0, [pc, #8]	; (80ae0 <register_fini+0x10>)
   80ad6:	f000 b805 	b.w	80ae4 <atexit>
   80ada:	4770      	bx	lr
   80adc:	00000000 	.word	0x00000000
   80ae0:	00080af1 	.word	0x00080af1

00080ae4 <atexit>:
   80ae4:	2300      	movs	r3, #0
   80ae6:	4601      	mov	r1, r0
   80ae8:	461a      	mov	r2, r3
   80aea:	4618      	mov	r0, r3
   80aec:	f000 b81e 	b.w	80b2c <__register_exitproc>

00080af0 <__libc_fini_array>:
   80af0:	b538      	push	{r3, r4, r5, lr}
   80af2:	4c0a      	ldr	r4, [pc, #40]	; (80b1c <__libc_fini_array+0x2c>)
   80af4:	4d0a      	ldr	r5, [pc, #40]	; (80b20 <__libc_fini_array+0x30>)
   80af6:	1b64      	subs	r4, r4, r5
   80af8:	10a4      	asrs	r4, r4, #2
   80afa:	d00a      	beq.n	80b12 <__libc_fini_array+0x22>
   80afc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80b00:	3b01      	subs	r3, #1
   80b02:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80b06:	3c01      	subs	r4, #1
   80b08:	f855 3904 	ldr.w	r3, [r5], #-4
   80b0c:	4798      	blx	r3
   80b0e:	2c00      	cmp	r4, #0
   80b10:	d1f9      	bne.n	80b06 <__libc_fini_array+0x16>
   80b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80b16:	f000 b8bf 	b.w	80c98 <_fini>
   80b1a:	bf00      	nop
   80b1c:	00080ca8 	.word	0x00080ca8
   80b20:	00080ca4 	.word	0x00080ca4

00080b24 <__retarget_lock_acquire_recursive>:
   80b24:	4770      	bx	lr
   80b26:	bf00      	nop

00080b28 <__retarget_lock_release_recursive>:
   80b28:	4770      	bx	lr
   80b2a:	bf00      	nop

00080b2c <__register_exitproc>:
   80b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b30:	4d2c      	ldr	r5, [pc, #176]	; (80be4 <__register_exitproc+0xb8>)
   80b32:	4606      	mov	r6, r0
   80b34:	6828      	ldr	r0, [r5, #0]
   80b36:	4698      	mov	r8, r3
   80b38:	460f      	mov	r7, r1
   80b3a:	4691      	mov	r9, r2
   80b3c:	f7ff fff2 	bl	80b24 <__retarget_lock_acquire_recursive>
   80b40:	4b29      	ldr	r3, [pc, #164]	; (80be8 <__register_exitproc+0xbc>)
   80b42:	681c      	ldr	r4, [r3, #0]
   80b44:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80b48:	2b00      	cmp	r3, #0
   80b4a:	d03e      	beq.n	80bca <__register_exitproc+0x9e>
   80b4c:	685a      	ldr	r2, [r3, #4]
   80b4e:	2a1f      	cmp	r2, #31
   80b50:	dc1c      	bgt.n	80b8c <__register_exitproc+0x60>
   80b52:	f102 0e01 	add.w	lr, r2, #1
   80b56:	b176      	cbz	r6, 80b76 <__register_exitproc+0x4a>
   80b58:	2101      	movs	r1, #1
   80b5a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80b5e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80b62:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80b66:	4091      	lsls	r1, r2
   80b68:	4308      	orrs	r0, r1
   80b6a:	2e02      	cmp	r6, #2
   80b6c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b70:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80b74:	d023      	beq.n	80bbe <__register_exitproc+0x92>
   80b76:	3202      	adds	r2, #2
   80b78:	f8c3 e004 	str.w	lr, [r3, #4]
   80b7c:	6828      	ldr	r0, [r5, #0]
   80b7e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80b82:	f7ff ffd1 	bl	80b28 <__retarget_lock_release_recursive>
   80b86:	2000      	movs	r0, #0
   80b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b8c:	4b17      	ldr	r3, [pc, #92]	; (80bec <__register_exitproc+0xc0>)
   80b8e:	b30b      	cbz	r3, 80bd4 <__register_exitproc+0xa8>
   80b90:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80b94:	f3af 8000 	nop.w
   80b98:	4603      	mov	r3, r0
   80b9a:	b1d8      	cbz	r0, 80bd4 <__register_exitproc+0xa8>
   80b9c:	2000      	movs	r0, #0
   80b9e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80ba2:	f04f 0e01 	mov.w	lr, #1
   80ba6:	6058      	str	r0, [r3, #4]
   80ba8:	6019      	str	r1, [r3, #0]
   80baa:	4602      	mov	r2, r0
   80bac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80bb0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80bb4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80bb8:	2e00      	cmp	r6, #0
   80bba:	d0dc      	beq.n	80b76 <__register_exitproc+0x4a>
   80bbc:	e7cc      	b.n	80b58 <__register_exitproc+0x2c>
   80bbe:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80bc2:	4301      	orrs	r1, r0
   80bc4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80bc8:	e7d5      	b.n	80b76 <__register_exitproc+0x4a>
   80bca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80bce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80bd2:	e7bb      	b.n	80b4c <__register_exitproc+0x20>
   80bd4:	6828      	ldr	r0, [r5, #0]
   80bd6:	f7ff ffa7 	bl	80b28 <__retarget_lock_release_recursive>
   80bda:	f04f 30ff 	mov.w	r0, #4294967295
   80bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80be2:	bf00      	nop
   80be4:	20000438 	.word	0x20000438
   80be8:	00080c80 	.word	0x00080c80
   80bec:	00000000 	.word	0x00000000
   80bf0:	304e4143 	.word	0x304e4143
   80bf4:	73656d20 	.word	0x73656d20
   80bf8:	65676173 	.word	0x65676173
   80bfc:	72726120 	.word	0x72726120
   80c00:	64657669 	.word	0x64657669
   80c04:	206e6920 	.word	0x206e6920
   80c08:	2d6e6f6e 	.word	0x2d6e6f6e
   80c0c:	64657375 	.word	0x64657375
   80c10:	69616d20 	.word	0x69616d20
   80c14:	786f626c 	.word	0x786f626c
   80c18:	00000d0a 	.word	0x00000d0a
   80c1c:	73796f6a 	.word	0x73796f6a
   80c20:	6b636974 	.word	0x6b636974
   80c24:	6425203a 	.word	0x6425203a
   80c28:	4f442820 	.word	0x4f442820
   80c2c:	3d204e57 	.word	0x3d204e57
   80c30:	202c3120 	.word	0x202c3120
   80c34:	202c5055 	.word	0x202c5055
   80c38:	48474952 	.word	0x48474952
   80c3c:	4c202c54 	.word	0x4c202c54
   80c40:	29544645 	.word	0x29544645
   80c44:	0000000a 	.word	0x0000000a
   80c48:	206e6163 	.word	0x206e6163
   80c4c:	74696e69 	.word	0x74696e69
   80c50:	69616620 	.word	0x69616620
   80c54:	0064656c 	.word	0x0064656c
   80c58:	6c756e28 	.word	0x6c756e28
   80c5c:	0000296c 	.word	0x0000296c
   80c60:	3a525245 	.word	0x3a525245
   80c64:	52415520 	.word	0x52415520
   80c68:	58522054 	.word	0x58522054
   80c6c:	66756220 	.word	0x66756220
   80c70:	20726566 	.word	0x20726566
   80c74:	66207369 	.word	0x66207369
   80c78:	0a6c6c75 	.word	0x0a6c6c75
   80c7c:	0000000d 	.word	0x0000000d

00080c80 <_global_impure_ptr>:
   80c80:	20000010                                ... 

00080c84 <_init>:
   80c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c86:	bf00      	nop
   80c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c8a:	bc08      	pop	{r3}
   80c8c:	469e      	mov	lr, r3
   80c8e:	4770      	bx	lr

00080c90 <__init_array_start>:
   80c90:	00080ad1 	.word	0x00080ad1

00080c94 <__frame_dummy_init_array_entry>:
   80c94:	00080119                                ....

00080c98 <_fini>:
   80c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c9a:	bf00      	nop
   80c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80c9e:	bc08      	pop	{r3}
   80ca0:	469e      	mov	lr, r3
   80ca2:	4770      	bx	lr

00080ca4 <__fini_array_start>:
   80ca4:	000800f5 	.word	0x000800f5
