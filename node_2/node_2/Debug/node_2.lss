
node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001014  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00081014  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  2000043c  00081450  0002043c  2**2
                  ALLOC
  3 .stack        00000400  200004c8  000814dc  0002043c  2**0
                  ALLOC
  4 .heap         00000200  200008c8  000818dc  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007123  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001227  00000000  00000000  000275e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000014d2  00000000  00000000  00028808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000260  00000000  00000000  00029cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00029f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000124ad  00000000  00000000  0002a162  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003e60  00000000  00000000  0003c60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055718  00000000  00000000  0004046f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000006f8  00000000  00000000  00095b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 08 00 20 75 04 08 00 71 04 08 00 71 04 08 00     ... u...q...q...
   80010:	71 04 08 00 71 04 08 00 71 04 08 00 00 00 00 00     q...q...q.......
	...
   8002c:	71 04 08 00 71 04 08 00 00 00 00 00 71 04 08 00     q...q.......q...
   8003c:	71 04 08 00 71 04 08 00 71 04 08 00 71 04 08 00     q...q...q...q...
   8004c:	71 04 08 00 71 04 08 00 71 04 08 00 71 04 08 00     q...q...q...q...
   8005c:	71 04 08 00 55 0d 08 00 71 04 08 00 00 00 00 00     q...U...q.......
   8006c:	71 04 08 00 71 04 08 00 71 04 08 00 71 04 08 00     q...q...q...q...
	...
   80084:	71 04 08 00 71 04 08 00 71 04 08 00 71 04 08 00     q...q...q...q...
   80094:	71 04 08 00 71 04 08 00 71 04 08 00 71 04 08 00     q...q...q...q...
   800a4:	00 00 00 00 71 04 08 00 09 09 08 00 71 04 08 00     ....q.......q...
   800b4:	71 04 08 00 71 04 08 00 71 04 08 00 71 04 08 00     q...q...q...q...
   800c4:	71 04 08 00 71 04 08 00 71 04 08 00 71 04 08 00     q...q...q...q...
   800d4:	1d 02 08 00 71 04 08 00 71 04 08 00 71 04 08 00     ....q...q...q...
   800e4:	71 04 08 00 71 04 08 00 e9 03 08 00 71 04 08 00     q...q.......q...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000043c 	.word	0x2000043c
   80110:	00000000 	.word	0x00000000
   80114:	00081014 	.word	0x00081014

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081014 	.word	0x00081014
   80154:	20000440 	.word	0x20000440
   80158:	00081014 	.word	0x00081014
   8015c:	00000000 	.word	0x00000000

00080160 <adc_config>:
void adc_config(){
	
	uint8_t ch_num = 7;
	
	// disable write protection
	ADC->ADC_WPMR = ('A' << 24) + ('D' << 16) + ('C' << 8) + 0b0;
   80160:	4b08      	ldr	r3, [pc, #32]	; (80184 <adc_config+0x24>)
   80162:	4a09      	ldr	r2, [pc, #36]	; (80188 <adc_config+0x28>)
   80164:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ANACH: no change by default
	TRACKTIM: (Tracking time = (TRACKTIM + 1) * adc_clock_periods)
	TRANSFER: (Transfer period = (TRANSFER*2 + 3) * adc_clock_periods)
	USEQ: Normal mode by default
	*/
	ADC->ADC_MR = 1 << 7; // enable free run
   80168:	2280      	movs	r2, #128	; 0x80
   8016a:	605a      	str	r2, [r3, #4]
	
	// interrupt on negedge
	if(1){
		// interrupt enable
		ADC->ADC_IER = 1 << 26; // trigger on comparison event
   8016c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80170:	6259      	str	r1, [r3, #36]	; 0x24
		
		// enable tag in extended mode register for channel numbers in output
		ADC->ADC_EMR = (1 << 24) + (7 << 4) + 0x0; // tri
   80172:	4906      	ldr	r1, [pc, #24]	; (8018c <adc_config+0x2c>)
   80174:	6419      	str	r1, [r3, #64]	; 0x40
		
		// set threshold values
		uint16_t hig_th = 0xfff;
		uint16_t low_th = adc_interrupt_lth;
		ADC->ADC_CWR = (hig_th << 16) + low_th;	
   80176:	4906      	ldr	r1, [pc, #24]	; (80190 <adc_config+0x30>)
   80178:	6459      	str	r1, [r3, #68]	; 0x44
	}
	
	// channel enable
	ADC->ADC_CHER = 1 << ch_num;
   8017a:	611a      	str	r2, [r3, #16]
	//ADC->ADC_CHDR = ~(1 << ch_num); // disable other channels for freerun mode
	
	// enable write protection
	ADC->ADC_WPMR = ('A' << 24) + ('D' << 16) + ('C' << 8) + 0b1;
   8017c:	4a05      	ldr	r2, [pc, #20]	; (80194 <adc_config+0x34>)
   8017e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80182:	4770      	bx	lr
   80184:	400c0000 	.word	0x400c0000
   80188:	41444300 	.word	0x41444300
   8018c:	01000070 	.word	0x01000070
   80190:	0fff00f0 	.word	0x0fff00f0
   80194:	41444301 	.word	0x41444301

00080198 <init_adc>:
void init_adc(){
   80198:	b508      	push	{r3, lr}
	PMC->PMC_PCR = (1 << 28) + (1 << 12) + 37;
   8019a:	4a05      	ldr	r2, [pc, #20]	; (801b0 <init_adc+0x18>)
   8019c:	4b05      	ldr	r3, [pc, #20]	; (801b4 <init_adc+0x1c>)
   8019e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	adc_config();
   801a2:	4b05      	ldr	r3, [pc, #20]	; (801b8 <init_adc+0x20>)
   801a4:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   801a6:	2220      	movs	r2, #32
   801a8:	4b04      	ldr	r3, [pc, #16]	; (801bc <init_adc+0x24>)
   801aa:	605a      	str	r2, [r3, #4]
   801ac:	bd08      	pop	{r3, pc}
   801ae:	bf00      	nop
   801b0:	10001025 	.word	0x10001025
   801b4:	400e0600 	.word	0x400e0600
   801b8:	00080161 	.word	0x00080161
   801bc:	e000e100 	.word	0xe000e100

000801c0 <adc_read_lcdr>:
}



uint16_t adc_read_lcdr(uint8_t ch_num){
   801c0:	b508      	push	{r3, lr}
	// control register: ADC_CR, START bits to begin conversion
	ADC->ADC_CR = 0b10;
   801c2:	4b08      	ldr	r3, [pc, #32]	; (801e4 <adc_read_lcdr+0x24>)
   801c4:	2202      	movs	r2, #2
   801c6:	601a      	str	r2, [r3, #0]
	
	// wait?
	// eventually wait for transfer period and conversion period
	
	uint32_t adc_data = ADC->ADC_LCDR;
   801c8:	6a1b      	ldr	r3, [r3, #32]
		
	// channel data check
	uint32_t adc_data_channel = (adc_data & (0b1111 << 12)) >> 12;
   801ca:	f3c3 3203 	ubfx	r2, r3, #12, #4
	if(adc_data_channel != ch_num){
   801ce:	4282      	cmp	r2, r0
   801d0:	d102      	bne.n	801d8 <adc_read_lcdr+0x18>
		printf("\n\rData read from wrong channel (ch_num: %d)", ch_num);
		return 0;
	}
	
	// Last converted data register: ADC_LCDR
	return (adc_data & (0xfff));
   801d2:	f3c3 000b 	ubfx	r0, r3, #0, #12
}
   801d6:	bd08      	pop	{r3, pc}
   801d8:	4601      	mov	r1, r0
		printf("\n\rData read from wrong channel (ch_num: %d)", ch_num);
   801da:	4803      	ldr	r0, [pc, #12]	; (801e8 <adc_read_lcdr+0x28>)
   801dc:	4b03      	ldr	r3, [pc, #12]	; (801ec <adc_read_lcdr+0x2c>)
   801de:	4798      	blx	r3
		return 0;
   801e0:	2000      	movs	r0, #0
   801e2:	bd08      	pop	{r3, pc}
   801e4:	400c0000 	.word	0x400c0000
   801e8:	00080f2c 	.word	0x00080f2c
   801ec:	00080ca5 	.word	0x00080ca5

000801f0 <adc_interrupt_disable>:
	ADC->ADC_WPMR = ('A' << 24) + ('D' << 16) + ('C' << 8) + 0b1;
	adc_interrupt_flag = 0;
}

void adc_interrupt_disable(){
	ADC->ADC_WPMR = ('A' << 24) + ('D' << 16) + ('C' << 8) + 0b0;
   801f0:	4b07      	ldr	r3, [pc, #28]	; (80210 <adc_interrupt_disable+0x20>)
   801f2:	4a08      	ldr	r2, [pc, #32]	; (80214 <adc_interrupt_disable+0x24>)
   801f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	ADC->ADC_IDR = (0x1f << 24) + 0xffff;
   801f8:	4a07      	ldr	r2, [pc, #28]	; (80218 <adc_interrupt_disable+0x28>)
   801fa:	629a      	str	r2, [r3, #40]	; 0x28
	ADC->ADC_WPMR = ('A' << 24) + ('D' << 16) + ('C' << 8) + 0b1;
   801fc:	f102 5209 	add.w	r2, r2, #574619648	; 0x22400000
   80200:	f502 3250 	add.w	r2, r2, #212992	; 0x34000
   80204:	f202 3202 	addw	r2, r2, #770	; 0x302
   80208:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop
   80210:	400c0000 	.word	0x400c0000
   80214:	41444300 	.word	0x41444300
   80218:	1f00ffff 	.word	0x1f00ffff

0008021c <ADC_Handler>:
	adc_interrupt_flag = 1;
}

void ADC_Handler(void){
   8021c:	b538      	push	{r3, r4, r5, lr}
	uint16_t adc_data = adc_read_lcdr(7);
   8021e:	2007      	movs	r0, #7
   80220:	4b0a      	ldr	r3, [pc, #40]	; (8024c <ADC_Handler+0x30>)
   80222:	4798      	blx	r3
   80224:	4604      	mov	r4, r0
	printf("INTERRIPt, adc: %x\n\r", adc_data);
   80226:	4601      	mov	r1, r0
   80228:	4809      	ldr	r0, [pc, #36]	; (80250 <ADC_Handler+0x34>)
   8022a:	4d0a      	ldr	r5, [pc, #40]	; (80254 <ADC_Handler+0x38>)
   8022c:	47a8      	blx	r5
	printf("is: %x\n\r", ADC->ADC_ISR);
   8022e:	4b0a      	ldr	r3, [pc, #40]	; (80258 <ADC_Handler+0x3c>)
   80230:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80232:	480a      	ldr	r0, [pc, #40]	; (8025c <ADC_Handler+0x40>)
   80234:	47a8      	blx	r5
	
	if(adc_data < adc_interrupt_lth){
   80236:	2cef      	cmp	r4, #239	; 0xef
   80238:	d904      	bls.n	80244 <ADC_Handler+0x28>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8023a:	2220      	movs	r2, #32
   8023c:	4b08      	ldr	r3, [pc, #32]	; (80260 <ADC_Handler+0x44>)
   8023e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   80242:	bd38      	pop	{r3, r4, r5, pc}
		adc_interrupt_disable();
   80244:	4b07      	ldr	r3, [pc, #28]	; (80264 <ADC_Handler+0x48>)
   80246:	4798      	blx	r3
   80248:	e7f7      	b.n	8023a <ADC_Handler+0x1e>
   8024a:	bf00      	nop
   8024c:	000801c1 	.word	0x000801c1
   80250:	00080f58 	.word	0x00080f58
   80254:	00080ca5 	.word	0x00080ca5
   80258:	400c0000 	.word	0x400c0000
   8025c:	00080f70 	.word	0x00080f70
   80260:	e000e100 	.word	0xe000e100
   80264:	000801f1 	.word	0x000801f1

00080268 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80268:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if((num_rx_mb > 8) | (num_tx_mb > 8) | (num_rx_mb + num_tx_mb > 8))
   8026a:	1857      	adds	r7, r2, r1
   8026c:	2f08      	cmp	r7, #8
   8026e:	bfd4      	ite	le
   80270:	2300      	movle	r3, #0
   80272:	2301      	movgt	r3, #1
   80274:	2908      	cmp	r1, #8
   80276:	bf98      	it	ls
   80278:	2a08      	cmpls	r2, #8
   8027a:	d85c      	bhi.n	80336 <can_init+0xce>
   8027c:	460d      	mov	r5, r1
   8027e:	2b00      	cmp	r3, #0
   80280:	d159      	bne.n	80336 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80282:	4a2e      	ldr	r2, [pc, #184]	; (8033c <can_init+0xd4>)
   80284:	6813      	ldr	r3, [r2, #0]
   80286:	f023 0301 	bic.w	r3, r3, #1
   8028a:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8028c:	6913      	ldr	r3, [r2, #16]
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8028e:	4b2c      	ldr	r3, [pc, #176]	; (80340 <can_init+0xd8>)
   80290:	f44f 7440 	mov.w	r4, #768	; 0x300
   80294:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80296:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80298:	f024 0403 	bic.w	r4, r4, #3
   8029c:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   8029e:	2403      	movs	r4, #3
   802a0:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   802a2:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   802a4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   802a8:	4c26      	ldr	r4, [pc, #152]	; (80344 <can_init+0xdc>)
   802aa:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   802ae:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   802b2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   802b6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   802ba:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   802bc:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   802be:	e019      	b.n	802f4 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   802c0:	481e      	ldr	r0, [pc, #120]	; (8033c <can_init+0xd4>)
   802c2:	f101 0310 	add.w	r3, r1, #16
   802c6:	015b      	lsls	r3, r3, #5
   802c8:	18c2      	adds	r2, r0, r3
   802ca:	2600      	movs	r6, #0
   802cc:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802ce:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   802d2:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   802d6:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   802da:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   802de:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   802e0:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   802e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802e8:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   802ec:	2301      	movs	r3, #1
   802ee:	408b      	lsls	r3, r1
   802f0:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   802f2:	3101      	adds	r1, #1
   802f4:	42b9      	cmp	r1, r7
   802f6:	dde3      	ble.n	802c0 <can_init+0x58>
   802f8:	2300      	movs	r3, #0
   802fa:	e00d      	b.n	80318 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802fc:	490f      	ldr	r1, [pc, #60]	; (8033c <can_init+0xd4>)
   802fe:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80302:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80306:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8030a:	f103 0210 	add.w	r2, r3, #16
   8030e:	0152      	lsls	r2, r2, #5
   80310:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80314:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80316:	3301      	adds	r3, #1
   80318:	42ab      	cmp	r3, r5
   8031a:	dbef      	blt.n	802fc <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8031c:	4b07      	ldr	r3, [pc, #28]	; (8033c <can_init+0xd4>)
   8031e:	605c      	str	r4, [r3, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80320:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80324:	4a08      	ldr	r2, [pc, #32]	; (80348 <can_init+0xe0>)
   80326:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80328:	681a      	ldr	r2, [r3, #0]
   8032a:	f042 0201 	orr.w	r2, r2, #1
   8032e:	601a      	str	r2, [r3, #0]

	return 0;
   80330:	2000      	movs	r0, #0
}
   80332:	bcf0      	pop	{r4, r5, r6, r7}
   80334:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80336:	2001      	movs	r0, #1
   80338:	e7fb      	b.n	80332 <can_init+0xca>
   8033a:	bf00      	nop
   8033c:	400b4000 	.word	0x400b4000
   80340:	400e0e00 	.word	0x400e0e00
   80344:	1000102b 	.word	0x1000102b
   80348:	e000e100 	.word	0xe000e100

0008034c <can_init_def_tx_rx_mb>:
{
   8034c:	b508      	push	{r3, lr}
	return can_init(0x00290165, 5, 2); // 0x00290165 SMP + BRP + SJW + PRSEG + PHSEG1 + PHSEG2
   8034e:	2202      	movs	r2, #2
   80350:	2105      	movs	r1, #5
   80352:	4802      	ldr	r0, [pc, #8]	; (8035c <can_init_def_tx_rx_mb+0x10>)
   80354:	4b02      	ldr	r3, [pc, #8]	; (80360 <can_init_def_tx_rx_mb+0x14>)
   80356:	4798      	blx	r3
}
   80358:	bd08      	pop	{r3, pc}
   8035a:	bf00      	nop
   8035c:	00290165 	.word	0x00290165
   80360:	00080269 	.word	0x00080269

00080364 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80364:	014b      	lsls	r3, r1, #5
   80366:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8036a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8036e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80372:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80376:	d033      	beq.n	803e0 <can_receive+0x7c>
{
   80378:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8037a:	014b      	lsls	r3, r1, #5
   8037c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80380:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80384:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80388:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8038c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80390:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80394:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80396:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8039a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8039e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   803a0:	2300      	movs	r3, #0
   803a2:	e003      	b.n	803ac <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   803a4:	18c6      	adds	r6, r0, r3
   803a6:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   803a8:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   803aa:	3301      	adds	r3, #1
   803ac:	42ab      	cmp	r3, r5
   803ae:	da05      	bge.n	803bc <can_receive+0x58>
			if(i < 4)
   803b0:	2b03      	cmp	r3, #3
   803b2:	dcf7      	bgt.n	803a4 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   803b4:	18c6      	adds	r6, r0, r3
   803b6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   803b8:	0a24      	lsrs	r4, r4, #8
   803ba:	e7f6      	b.n	803aa <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   803bc:	4b09      	ldr	r3, [pc, #36]	; (803e4 <can_receive+0x80>)
   803be:	f101 0210 	add.w	r2, r1, #16
   803c2:	0152      	lsls	r2, r2, #5
   803c4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803c8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   803ca:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   803ce:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   803d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   803d6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   803da:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   803dc:	bc70      	pop	{r4, r5, r6}
   803de:	4770      	bx	lr
		return 1;
   803e0:	2001      	movs	r0, #1
   803e2:	4770      	bx	lr
   803e4:	400b4000 	.word	0x400b4000

000803e8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   803e8:	b510      	push	{r4, lr}
   803ea:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   803ec:	4b1a      	ldr	r3, [pc, #104]	; (80458 <CAN0_Handler+0x70>)
   803ee:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   803f0:	f014 0f06 	tst.w	r4, #6
   803f4:	d022      	beq.n	8043c <CAN0_Handler+0x54>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   803f6:	f014 0f02 	tst.w	r4, #2
   803fa:	d10c      	bne.n	80416 <CAN0_Handler+0x2e>
		{
			can_receive(&message, 1);
		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   803fc:	f014 0f04 	tst.w	r4, #4
   80400:	d00e      	beq.n	80420 <CAN0_Handler+0x38>
		
		{
			can_receive(&message, 2);
   80402:	2102      	movs	r1, #2
   80404:	a801      	add	r0, sp, #4
   80406:	4b15      	ldr	r3, [pc, #84]	; (8045c <CAN0_Handler+0x74>)
   80408:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		switch (message.data[0]){
   8040a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   8040e:	2b1f      	cmp	r3, #31
   80410:	d00a      	beq.n	80428 <CAN0_Handler+0x40>
			}
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80412:	2300      	movs	r3, #0
   80414:	e00e      	b.n	80434 <CAN0_Handler+0x4c>
			can_receive(&message, 1);
   80416:	2101      	movs	r1, #1
   80418:	a801      	add	r0, sp, #4
   8041a:	4b10      	ldr	r3, [pc, #64]	; (8045c <CAN0_Handler+0x74>)
   8041c:	4798      	blx	r3
   8041e:	e7f4      	b.n	8040a <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80420:	480f      	ldr	r0, [pc, #60]	; (80460 <CAN0_Handler+0x78>)
   80422:	4b10      	ldr	r3, [pc, #64]	; (80464 <CAN0_Handler+0x7c>)
   80424:	4798      	blx	r3
   80426:	e7f0      	b.n	8040a <CAN0_Handler+0x22>
				pwm_joystick_move(message.data[1]);
   80428:	f89d 0008 	ldrb.w	r0, [sp, #8]
   8042c:	4b0e      	ldr	r3, [pc, #56]	; (80468 <CAN0_Handler+0x80>)
   8042e:	4798      	blx	r3
				break;
   80430:	e7ef      	b.n	80412 <CAN0_Handler+0x2a>
		for (int i = 0; i < message.data_length; i++)
   80432:	3301      	adds	r3, #1
   80434:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80438:	4293      	cmp	r3, r2
   8043a:	dbfa      	blt.n	80432 <CAN0_Handler+0x4a>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   8043c:	f014 0f01 	tst.w	r4, #1
   80440:	d002      	beq.n	80448 <CAN0_Handler+0x60>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80442:	2201      	movs	r2, #1
   80444:	4b04      	ldr	r3, [pc, #16]	; (80458 <CAN0_Handler+0x70>)
   80446:	609a      	str	r2, [r3, #8]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80448:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8044c:	4b07      	ldr	r3, [pc, #28]	; (8046c <CAN0_Handler+0x84>)
   8044e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();
}
   80452:	b004      	add	sp, #16
   80454:	bd10      	pop	{r4, pc}
   80456:	bf00      	nop
   80458:	400b4000 	.word	0x400b4000
   8045c:	00080365 	.word	0x00080365
   80460:	00080f7c 	.word	0x00080f7c
   80464:	00080ca5 	.word	0x00080ca5
   80468:	000808bd 	.word	0x000808bd
   8046c:	e000e100 	.word	0xe000e100

00080470 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80470:	e7fe      	b.n	80470 <Dummy_Handler>
	...

00080474 <Reset_Handler>:
{
   80474:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80476:	4b11      	ldr	r3, [pc, #68]	; (804bc <Reset_Handler+0x48>)
   80478:	4a11      	ldr	r2, [pc, #68]	; (804c0 <Reset_Handler+0x4c>)
   8047a:	429a      	cmp	r2, r3
   8047c:	d009      	beq.n	80492 <Reset_Handler+0x1e>
   8047e:	4b0f      	ldr	r3, [pc, #60]	; (804bc <Reset_Handler+0x48>)
   80480:	4a0f      	ldr	r2, [pc, #60]	; (804c0 <Reset_Handler+0x4c>)
   80482:	e003      	b.n	8048c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80484:	6811      	ldr	r1, [r2, #0]
   80486:	6019      	str	r1, [r3, #0]
   80488:	3304      	adds	r3, #4
   8048a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8048c:	490d      	ldr	r1, [pc, #52]	; (804c4 <Reset_Handler+0x50>)
   8048e:	428b      	cmp	r3, r1
   80490:	d3f8      	bcc.n	80484 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80492:	4b0d      	ldr	r3, [pc, #52]	; (804c8 <Reset_Handler+0x54>)
   80494:	e002      	b.n	8049c <Reset_Handler+0x28>
                *pDest++ = 0;
   80496:	2200      	movs	r2, #0
   80498:	601a      	str	r2, [r3, #0]
   8049a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8049c:	4a0b      	ldr	r2, [pc, #44]	; (804cc <Reset_Handler+0x58>)
   8049e:	4293      	cmp	r3, r2
   804a0:	d3f9      	bcc.n	80496 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   804a2:	4b0b      	ldr	r3, [pc, #44]	; (804d0 <Reset_Handler+0x5c>)
   804a4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804ac:	4a09      	ldr	r2, [pc, #36]	; (804d4 <Reset_Handler+0x60>)
   804ae:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   804b0:	4b09      	ldr	r3, [pc, #36]	; (804d8 <Reset_Handler+0x64>)
   804b2:	4798      	blx	r3
        main();
   804b4:	4b09      	ldr	r3, [pc, #36]	; (804dc <Reset_Handler+0x68>)
   804b6:	4798      	blx	r3
   804b8:	e7fe      	b.n	804b8 <Reset_Handler+0x44>
   804ba:	bf00      	nop
   804bc:	20000000 	.word	0x20000000
   804c0:	00081014 	.word	0x00081014
   804c4:	2000043c 	.word	0x2000043c
   804c8:	2000043c 	.word	0x2000043c
   804cc:	200004c8 	.word	0x200004c8
   804d0:	00080000 	.word	0x00080000
   804d4:	e000ed00 	.word	0xe000ed00
   804d8:	00080dbd 	.word	0x00080dbd
   804dc:	000809d1 	.word	0x000809d1

000804e0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   804e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   804e4:	4a20      	ldr	r2, [pc, #128]	; (80568 <SystemInit+0x88>)
   804e6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   804e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   804ec:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   804ee:	4b1f      	ldr	r3, [pc, #124]	; (8056c <SystemInit+0x8c>)
   804f0:	6a1b      	ldr	r3, [r3, #32]
   804f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804f6:	d107      	bne.n	80508 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   804f8:	4a1d      	ldr	r2, [pc, #116]	; (80570 <SystemInit+0x90>)
   804fa:	4b1c      	ldr	r3, [pc, #112]	; (8056c <SystemInit+0x8c>)
   804fc:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   804fe:	4b1b      	ldr	r3, [pc, #108]	; (8056c <SystemInit+0x8c>)
   80500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80502:	f013 0f01 	tst.w	r3, #1
   80506:	d0fa      	beq.n	804fe <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80508:	4a1a      	ldr	r2, [pc, #104]	; (80574 <SystemInit+0x94>)
   8050a:	4b18      	ldr	r3, [pc, #96]	; (8056c <SystemInit+0x8c>)
   8050c:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8050e:	4b17      	ldr	r3, [pc, #92]	; (8056c <SystemInit+0x8c>)
   80510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80512:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80516:	d0fa      	beq.n	8050e <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80518:	4a14      	ldr	r2, [pc, #80]	; (8056c <SystemInit+0x8c>)
   8051a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8051c:	f023 0303 	bic.w	r3, r3, #3
   80520:	f043 0301 	orr.w	r3, r3, #1
   80524:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80526:	4b11      	ldr	r3, [pc, #68]	; (8056c <SystemInit+0x8c>)
   80528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8052a:	f013 0f08 	tst.w	r3, #8
   8052e:	d0fa      	beq.n	80526 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80530:	4a11      	ldr	r2, [pc, #68]	; (80578 <SystemInit+0x98>)
   80532:	4b0e      	ldr	r3, [pc, #56]	; (8056c <SystemInit+0x8c>)
   80534:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80536:	4b0d      	ldr	r3, [pc, #52]	; (8056c <SystemInit+0x8c>)
   80538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8053a:	f013 0f02 	tst.w	r3, #2
   8053e:	d0fa      	beq.n	80536 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80540:	2211      	movs	r2, #17
   80542:	4b0a      	ldr	r3, [pc, #40]	; (8056c <SystemInit+0x8c>)
   80544:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80546:	4b09      	ldr	r3, [pc, #36]	; (8056c <SystemInit+0x8c>)
   80548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8054a:	f013 0f08 	tst.w	r3, #8
   8054e:	d0fa      	beq.n	80546 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80550:	2212      	movs	r2, #18
   80552:	4b06      	ldr	r3, [pc, #24]	; (8056c <SystemInit+0x8c>)
   80554:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80556:	4b05      	ldr	r3, [pc, #20]	; (8056c <SystemInit+0x8c>)
   80558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8055a:	f013 0f08 	tst.w	r3, #8
   8055e:	d0fa      	beq.n	80556 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80560:	4a06      	ldr	r2, [pc, #24]	; (8057c <SystemInit+0x9c>)
   80562:	4b07      	ldr	r3, [pc, #28]	; (80580 <SystemInit+0xa0>)
   80564:	601a      	str	r2, [r3, #0]
   80566:	4770      	bx	lr
   80568:	400e0a00 	.word	0x400e0a00
   8056c:	400e0600 	.word	0x400e0600
   80570:	00370809 	.word	0x00370809
   80574:	01370809 	.word	0x01370809
   80578:	200d3f01 	.word	0x200d3f01
   8057c:	0501bd00 	.word	0x0501bd00
   80580:	20000000 	.word	0x20000000

00080584 <pin_util_set_dir>:

enum PIN_DIR_TYPE{OUTPUT_ENABLE = 1, PIO_ENABLE, PIO_DISABLE};
	
void pin_util_set_dir(char port, uint8_t pin, enum PIN_DIR_TYPE type)
{
	switch (port) {
   80584:	3841      	subs	r0, #65	; 0x41
   80586:	2803      	cmp	r0, #3
   80588:	d807      	bhi.n	8059a <pin_util_set_dir+0x16>
   8058a:	e8df f000 	tbb	[pc, r0]
   8058e:	1602      	.short	0x1602
   80590:	3c29      	.short	0x3c29
		case 'A':
		{
			//PIOA->PIO_WPMR = ('P' << 24) + ('I' << 16) + ('O' << 8) + 0;
			if (type == 1){
   80592:	2a01      	cmp	r2, #1
   80594:	d002      	beq.n	8059c <pin_util_set_dir+0x18>
				PIOA->PIO_OER |= 1u << pin;	
			} else if (type == 2){
   80596:	2a02      	cmp	r2, #2
   80598:	d007      	beq.n	805aa <pin_util_set_dir+0x26>
   8059a:	4770      	bx	lr
				PIOA->PIO_OER |= 1u << pin;	
   8059c:	4823      	ldr	r0, [pc, #140]	; (8062c <pin_util_set_dir+0xa8>)
   8059e:	6903      	ldr	r3, [r0, #16]
   805a0:	fa02 f101 	lsl.w	r1, r2, r1
   805a4:	4319      	orrs	r1, r3
   805a6:	6101      	str	r1, [r0, #16]
   805a8:	4770      	bx	lr
				PIOA->PIO_PER |= 1u << pin;
   805aa:	4820      	ldr	r0, [pc, #128]	; (8062c <pin_util_set_dir+0xa8>)
   805ac:	6803      	ldr	r3, [r0, #0]
   805ae:	2201      	movs	r2, #1
   805b0:	fa02 f101 	lsl.w	r1, r2, r1
   805b4:	4319      	orrs	r1, r3
   805b6:	6001      	str	r1, [r0, #0]
   805b8:	4770      	bx	lr
			break;
		}
		case 'B':
		{
			//PIOB->PIO_WPMR = ('P' << 24) + ('I' << 16) + ('O' << 8) + 0;
			if (type == 1){
   805ba:	2a01      	cmp	r2, #1
   805bc:	d009      	beq.n	805d2 <pin_util_set_dir+0x4e>
				PIOB->PIO_OER |= 1u << pin;
			} else if (type == 2){
   805be:	2a02      	cmp	r2, #2
   805c0:	d1eb      	bne.n	8059a <pin_util_set_dir+0x16>
				PIOB->PIO_PER |= 1u << pin;
   805c2:	481b      	ldr	r0, [pc, #108]	; (80630 <pin_util_set_dir+0xac>)
   805c4:	6803      	ldr	r3, [r0, #0]
   805c6:	2201      	movs	r2, #1
   805c8:	fa02 f101 	lsl.w	r1, r2, r1
   805cc:	4319      	orrs	r1, r3
   805ce:	6001      	str	r1, [r0, #0]
   805d0:	4770      	bx	lr
				PIOB->PIO_OER |= 1u << pin;
   805d2:	4817      	ldr	r0, [pc, #92]	; (80630 <pin_util_set_dir+0xac>)
   805d4:	6903      	ldr	r3, [r0, #16]
   805d6:	fa02 f101 	lsl.w	r1, r2, r1
   805da:	4319      	orrs	r1, r3
   805dc:	6101      	str	r1, [r0, #16]
   805de:	4770      	bx	lr
			break;
		}
		case 'C':
		{
			//PIOC->PIO_WPMR = ('P' << 24) + ('I' << 16) + ('O' << 8) + 0;
			if (type == 1){
   805e0:	2a01      	cmp	r2, #1
   805e2:	d009      	beq.n	805f8 <pin_util_set_dir+0x74>
				PIOC->PIO_OER |= 1u << pin;
				} else if (type == 2){
   805e4:	2a02      	cmp	r2, #2
   805e6:	d1d8      	bne.n	8059a <pin_util_set_dir+0x16>
				PIOC->PIO_PER |= 1u << pin;
   805e8:	4812      	ldr	r0, [pc, #72]	; (80634 <pin_util_set_dir+0xb0>)
   805ea:	6803      	ldr	r3, [r0, #0]
   805ec:	2201      	movs	r2, #1
   805ee:	fa02 f101 	lsl.w	r1, r2, r1
   805f2:	4319      	orrs	r1, r3
   805f4:	6001      	str	r1, [r0, #0]
   805f6:	4770      	bx	lr
				PIOC->PIO_OER |= 1u << pin;
   805f8:	480e      	ldr	r0, [pc, #56]	; (80634 <pin_util_set_dir+0xb0>)
   805fa:	6903      	ldr	r3, [r0, #16]
   805fc:	fa02 f101 	lsl.w	r1, r2, r1
   80600:	4319      	orrs	r1, r3
   80602:	6101      	str	r1, [r0, #16]
   80604:	4770      	bx	lr
			break;
		}
		case 'D':
		{
			//PIOD->PIO_WPMR = ('P' << 24) + ('I' << 16) + ('O' << 8) + 0;
			if (type == 1){
   80606:	2a01      	cmp	r2, #1
   80608:	d009      	beq.n	8061e <pin_util_set_dir+0x9a>
				PIOD->PIO_OER |= 1u << pin;
				} else if (type == 2){
   8060a:	2a02      	cmp	r2, #2
   8060c:	d1c5      	bne.n	8059a <pin_util_set_dir+0x16>
				PIOD->PIO_PER |= 1u << pin;
   8060e:	480a      	ldr	r0, [pc, #40]	; (80638 <pin_util_set_dir+0xb4>)
   80610:	6803      	ldr	r3, [r0, #0]
   80612:	2201      	movs	r2, #1
   80614:	fa02 f101 	lsl.w	r1, r2, r1
   80618:	4319      	orrs	r1, r3
   8061a:	6001      	str	r1, [r0, #0]
			//PIOD->PIO_WPMR = ('P' << 24) + ('I' << 16) + ('O' << 8) + 1;
			break;
		}
		default: break;
	}
}
   8061c:	e7bd      	b.n	8059a <pin_util_set_dir+0x16>
				PIOD->PIO_OER |= 1u << pin;
   8061e:	4806      	ldr	r0, [pc, #24]	; (80638 <pin_util_set_dir+0xb4>)
   80620:	6903      	ldr	r3, [r0, #16]
   80622:	fa02 f101 	lsl.w	r1, r2, r1
   80626:	4319      	orrs	r1, r3
   80628:	6101      	str	r1, [r0, #16]
   8062a:	4770      	bx	lr
   8062c:	400e0e00 	.word	0x400e0e00
   80630:	400e1000 	.word	0x400e1000
   80634:	400e1200 	.word	0x400e1200
   80638:	400e1400 	.word	0x400e1400

0008063c <pin_util_toggle>:

void pin_util_toggle(char port, uint8_t pin)
{
	switch (port) {
   8063c:	2841      	cmp	r0, #65	; 0x41
   8063e:	d109      	bne.n	80654 <pin_util_toggle+0x18>
		case 'A':
		{
			uint32_t port_data = PIOA->PIO_ODSR;
   80640:	4b06      	ldr	r3, [pc, #24]	; (8065c <pin_util_toggle+0x20>)
   80642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
			if (port_data & (1u << pin))	PIOA->PIO_CODR = (1u << pin);
   80644:	2301      	movs	r3, #1
   80646:	fa03 f101 	lsl.w	r1, r3, r1
   8064a:	420a      	tst	r2, r1
   8064c:	d103      	bne.n	80656 <pin_util_toggle+0x1a>
			else							PIOA->PIO_SODR = port_data | (1u << pin);
   8064e:	4311      	orrs	r1, r2
   80650:	4b02      	ldr	r3, [pc, #8]	; (8065c <pin_util_toggle+0x20>)
   80652:	6319      	str	r1, [r3, #48]	; 0x30
   80654:	4770      	bx	lr
			if (port_data & (1u << pin))	PIOA->PIO_CODR = (1u << pin);
   80656:	4b01      	ldr	r3, [pc, #4]	; (8065c <pin_util_toggle+0x20>)
   80658:	6359      	str	r1, [r3, #52]	; 0x34
   8065a:	4770      	bx	lr
   8065c:	400e0e00 	.word	0x400e0e00

00080660 <dac_config>:
#include "pin_util.h"
#include <stdint.h>

void dac_config(){
	// write protect disable
	DACC->DACC_WPMR = ('D' << 24) + ('A' << 16) + ('C' << 8) + 0;
   80660:	4b08      	ldr	r3, [pc, #32]	; (80684 <dac_config+0x24>)
   80662:	4a09      	ldr	r2, [pc, #36]	; (80688 <dac_config+0x28>)
   80664:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	// set mode
	DACC->DACC_MR = (1 << 4);
   80668:	2210      	movs	r2, #16
   8066a:	605a      	str	r2, [r3, #4]
	
	// enable channel 0
	DACC->DACC_CHER = 1;
   8066c:	2201      	movs	r2, #1
   8066e:	611a      	str	r2, [r3, #16]
	
	
	
	// write protect enable
	DACC->DACC_WPMR = ('D' << 24) + ('A' << 16) + ('C' << 8) + 1;
   80670:	f102 4288 	add.w	r2, r2, #1140850688	; 0x44000000
   80674:	f502 0282 	add.w	r2, r2, #4259840	; 0x410000
   80678:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
   8067c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80680:	4770      	bx	lr
   80682:	bf00      	nop
   80684:	400c8000 	.word	0x400c8000
   80688:	44414300 	.word	0x44414300

0008068c <init_dac>:
}

void init_dac(){
   8068c:	b508      	push	{r3, lr}
	// enable pmc
	PMC->PMC_PCR = (1 << 28) + (1 << 12) + 38;
   8068e:	4a03      	ldr	r2, [pc, #12]	; (8069c <init_dac+0x10>)
   80690:	4b03      	ldr	r3, [pc, #12]	; (806a0 <init_dac+0x14>)
   80692:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	// configure dac
	dac_config();
   80696:	4b03      	ldr	r3, [pc, #12]	; (806a4 <init_dac+0x18>)
   80698:	4798      	blx	r3
   8069a:	bd08      	pop	{r3, pc}
   8069c:	10001026 	.word	0x10001026
   806a0:	400e0600 	.word	0x400e0600
   806a4:	00080661 	.word	0x00080661

000806a8 <dac_write>:

void dac_write(uint16_t d){
	// 12 bit resolution
	uint16_t data = d;//PIOC->PIO_PDSR & ((1<<9) - 1);
	
	DACC->DACC_CDR = (data & ((1<<9) - 1)) << 20;
   806a8:	4b02      	ldr	r3, [pc, #8]	; (806b4 <dac_write+0xc>)
   806aa:	ea03 5000 	and.w	r0, r3, r0, lsl #20
   806ae:	4b02      	ldr	r3, [pc, #8]	; (806b8 <dac_write+0x10>)
   806b0:	6218      	str	r0, [r3, #32]
   806b2:	4770      	bx	lr
   806b4:	1ff00000 	.word	0x1ff00000
   806b8:	400c8000 	.word	0x400c8000

000806bc <motor_set_direction>:
static uint8_t new_position = 0;

uint32_t e_sum;

void motor_set_direction(uint8_t d){
	if (d)	PIOD->PIO_SODR = 1 << 10;
   806bc:	b920      	cbnz	r0, 806c8 <motor_set_direction+0xc>
	else	PIOD->PIO_CODR = 1 << 10;
   806be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   806c2:	4b04      	ldr	r3, [pc, #16]	; (806d4 <motor_set_direction+0x18>)
   806c4:	635a      	str	r2, [r3, #52]	; 0x34
   806c6:	4770      	bx	lr
	if (d)	PIOD->PIO_SODR = 1 << 10;
   806c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   806cc:	4b01      	ldr	r3, [pc, #4]	; (806d4 <motor_set_direction+0x18>)
   806ce:	631a      	str	r2, [r3, #48]	; 0x30
   806d0:	4770      	bx	lr
   806d2:	bf00      	nop
   806d4:	400e1400 	.word	0x400e1400

000806d8 <motor_set_speed>:
}

// 8 bit
void motor_set_speed(uint16_t s){
   806d8:	b508      	push	{r3, lr}
	dac_write(s);
   806da:	4b01      	ldr	r3, [pc, #4]	; (806e0 <motor_set_speed+0x8>)
   806dc:	4798      	blx	r3
   806de:	bd08      	pop	{r3, pc}
   806e0:	000806a9 	.word	0x000806a9

000806e4 <motor_set_enable>:
}

void motor_set_enable(uint8_t en){
	if (en)	PIOD->PIO_SODR = 1 << 9;
   806e4:	b920      	cbnz	r0, 806f0 <motor_set_enable+0xc>
	else	PIOD->PIO_CODR = 1 << 9;
   806e6:	f44f 7200 	mov.w	r2, #512	; 0x200
   806ea:	4b04      	ldr	r3, [pc, #16]	; (806fc <motor_set_enable+0x18>)
   806ec:	635a      	str	r2, [r3, #52]	; 0x34
   806ee:	4770      	bx	lr
	if (en)	PIOD->PIO_SODR = 1 << 9;
   806f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   806f4:	4b01      	ldr	r3, [pc, #4]	; (806fc <motor_set_enable+0x18>)
   806f6:	631a      	str	r2, [r3, #48]	; 0x30
   806f8:	4770      	bx	lr
   806fa:	bf00      	nop
   806fc:	400e1400 	.word	0x400e1400

00080700 <init_motor>:

void motor_set_position(uint8_t pos){
	new_position = pos;
}

void init_motor(){
   80700:	b510      	push	{r4, lr}
	// output pins
	pin_util_set_dir('D', 9, OUTPUT_ENABLE);
   80702:	2201      	movs	r2, #1
   80704:	2109      	movs	r1, #9
   80706:	2044      	movs	r0, #68	; 0x44
   80708:	4c07      	ldr	r4, [pc, #28]	; (80728 <init_motor+0x28>)
   8070a:	47a0      	blx	r4
	pin_util_set_dir('D', 10, OUTPUT_ENABLE);
   8070c:	2201      	movs	r2, #1
   8070e:	210a      	movs	r1, #10
   80710:	2044      	movs	r0, #68	; 0x44
   80712:	47a0      	blx	r4
	motor_set_speed(0);
   80714:	2000      	movs	r0, #0
   80716:	4b05      	ldr	r3, [pc, #20]	; (8072c <init_motor+0x2c>)
   80718:	4798      	blx	r3
	motor_set_direction(0);
   8071a:	2000      	movs	r0, #0
   8071c:	4b04      	ldr	r3, [pc, #16]	; (80730 <init_motor+0x30>)
   8071e:	4798      	blx	r3
	motor_set_enable(0);
   80720:	2000      	movs	r0, #0
   80722:	4b04      	ldr	r3, [pc, #16]	; (80734 <init_motor+0x34>)
   80724:	4798      	blx	r3
   80726:	bd10      	pop	{r4, pc}
   80728:	00080585 	.word	0x00080585
   8072c:	000806d9 	.word	0x000806d9
   80730:	000806bd 	.word	0x000806bd
   80734:	000806e5 	.word	0x000806e5

00080738 <pid_reset>:
}

void pid_reset(){
	e_sum = 0;
   80738:	2200      	movs	r2, #0
   8073a:	4b01      	ldr	r3, [pc, #4]	; (80740 <pid_reset+0x8>)
   8073c:	601a      	str	r2, [r3, #0]
   8073e:	4770      	bx	lr
   80740:	2000045c 	.word	0x2000045c

00080744 <motor_interrupt>:
}

void motor_interrupt(){
   80744:	b510      	push	{r4, lr}
	printf("pos: %d, %d", position, new_position);
   80746:	4c1a      	ldr	r4, [pc, #104]	; (807b0 <motor_interrupt+0x6c>)
   80748:	7822      	ldrb	r2, [r4, #0]
   8074a:	2100      	movs	r1, #0
   8074c:	4819      	ldr	r0, [pc, #100]	; (807b4 <motor_interrupt+0x70>)
   8074e:	4b1a      	ldr	r3, [pc, #104]	; (807b8 <motor_interrupt+0x74>)
   80750:	4798      	blx	r3
	
	uint8_t dir;
	int e = position - new_position;
   80752:	7822      	ldrb	r2, [r4, #0]
   80754:	4252      	negs	r2, r2
	e_sum += e;
   80756:	4919      	ldr	r1, [pc, #100]	; (807bc <motor_interrupt+0x78>)
   80758:	680b      	ldr	r3, [r1, #0]
   8075a:	4413      	add	r3, r2
   8075c:	600b      	str	r3, [r1, #0]
	int u = controller_kp * e + controller_ki * e_sum / controller_T_inv;
   8075e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80762:	0050      	lsls	r0, r2, #1
   80764:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80768:	005a      	lsls	r2, r3, #1
   8076a:	4b15      	ldr	r3, [pc, #84]	; (807c0 <motor_interrupt+0x7c>)
   8076c:	fba3 2302 	umull	r2, r3, r3, r2
	if (u < 0){
   80770:	eb10 1013 	adds.w	r0, r0, r3, lsr #4
   80774:	d410      	bmi.n	80798 <motor_interrupt+0x54>
		dir = 0;
	}else{
		dir = 1;
		u = -u;
   80776:	4240      	negs	r0, r0
		dir = 1;
   80778:	2401      	movs	r4, #1
	}
	if(u > 0xff) u = 0xff;
   8077a:	28ff      	cmp	r0, #255	; 0xff
   8077c:	dd00      	ble.n	80780 <motor_interrupt+0x3c>
   8077e:	20ff      	movs	r0, #255	; 0xff
	
	if(u < 0x05){
   80780:	2804      	cmp	r0, #4
   80782:	dd0b      	ble.n	8079c <motor_interrupt+0x58>
		motor_set_speed(0);
		pid_reset();
		return;
	}
	
	motor_set_speed(u);
   80784:	b280      	uxth	r0, r0
   80786:	4b0f      	ldr	r3, [pc, #60]	; (807c4 <motor_interrupt+0x80>)
   80788:	4798      	blx	r3
	motor_set_direction(dir);
   8078a:	4620      	mov	r0, r4
   8078c:	4b0e      	ldr	r3, [pc, #56]	; (807c8 <motor_interrupt+0x84>)
   8078e:	4798      	blx	r3
	motor_set_enable(1);
   80790:	2001      	movs	r0, #1
   80792:	4b0e      	ldr	r3, [pc, #56]	; (807cc <motor_interrupt+0x88>)
   80794:	4798      	blx	r3
   80796:	bd10      	pop	{r4, pc}
		dir = 0;
   80798:	2400      	movs	r4, #0
   8079a:	e7ee      	b.n	8077a <motor_interrupt+0x36>
		motor_set_enable(0);
   8079c:	2000      	movs	r0, #0
   8079e:	4b0b      	ldr	r3, [pc, #44]	; (807cc <motor_interrupt+0x88>)
   807a0:	4798      	blx	r3
		motor_set_speed(0);
   807a2:	2000      	movs	r0, #0
   807a4:	4b07      	ldr	r3, [pc, #28]	; (807c4 <motor_interrupt+0x80>)
   807a6:	4798      	blx	r3
		pid_reset();
   807a8:	4b09      	ldr	r3, [pc, #36]	; (807d0 <motor_interrupt+0x8c>)
   807aa:	4798      	blx	r3
		return;
   807ac:	bd10      	pop	{r4, pc}
   807ae:	bf00      	nop
   807b0:	20000458 	.word	0x20000458
   807b4:	00080fa8 	.word	0x00080fa8
   807b8:	00080ca5 	.word	0x00080ca5
   807bc:	2000045c 	.word	0x2000045c
   807c0:	51eb851f 	.word	0x51eb851f
   807c4:	000806d9 	.word	0x000806d9
   807c8:	000806bd 	.word	0x000806bd
   807cc:	000806e5 	.word	0x000806e5
   807d0:	00080739 	.word	0x00080739

000807d4 <pwm_config>:
	
	pwm_config(5);
	pwm_config(6);
}

void pwm_config(uint8_t ch_num){
   807d4:	b430      	push	{r4, r5}
	
	PWM->PWM_ENA &= ~(1 << ch_num);
   807d6:	4b10      	ldr	r3, [pc, #64]	; (80818 <pwm_config+0x44>)
   807d8:	6859      	ldr	r1, [r3, #4]
   807da:	2201      	movs	r2, #1
   807dc:	4082      	lsls	r2, r0
   807de:	ea21 0102 	bic.w	r1, r1, r2
   807e2:	6059      	str	r1, [r3, #4]
	// disable write protect for all register groups to enable configuration of pwm
	PWM->PWM_WPCR = ('P' << 24) + ('W' << 16) + ('M' << 8) + (0b1111111 << 2) + 0b00;
   807e4:	490d      	ldr	r1, [pc, #52]	; (8081c <pwm_config+0x48>)
   807e6:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
	
	// clk gen?
	//PWM->PWM_CLK = PWM_CLK_DIVA(1) + PWM_CLK_DIVB(1) + PWM_CLK_PREA(1) + PWM_CLK_PREB(1);
	
	// select clock
	PWM->PWM_CH_NUM[ch_num].PWM_CMR = 0b0101; // select CLKA : 0b1011, select MCLK : 0b0000;
   807ea:	f100 0110 	add.w	r1, r0, #16
   807ee:	0149      	lsls	r1, r1, #5
   807f0:	185c      	adds	r4, r3, r1
   807f2:	2505      	movs	r5, #5
   807f4:	505d      	str	r5, [r3, r1]
	
	// select period
	PWM->PWM_CH_NUM[ch_num].PWM_CPRD = CPRD;
   807f6:	490a      	ldr	r1, [pc, #40]	; (80820 <pwm_config+0x4c>)
   807f8:	6809      	ldr	r1, [r1, #0]
   807fa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   807fe:	f8c0 120c 	str.w	r1, [r0, #524]	; 0x20c
	
	// set duty cycle
	PWM->PWM_CH_NUM[ch_num].PWM_CDTY = CPRD - 1500 * 84 / 32;
   80802:	f6a1 7161 	subw	r1, r1, #3937	; 0xf61
   80806:	6061      	str	r1, [r4, #4]
	
	// set cmp mode
	//PWM->PWM_CH_NUM[ch_num].PWM_CMPM =
	
	// enable pwm channel
	PWM->PWM_ENA |= 1 << ch_num;
   80808:	6859      	ldr	r1, [r3, #4]
   8080a:	430a      	orrs	r2, r1
   8080c:	605a      	str	r2, [r3, #4]
	
	// lock write-protect
	PWM->PWM_WPCR = ('P' << 24) + ('W' << 16) + ('M' << 8) + (0b1111111 << 2) + 0b10;
   8080e:	4a05      	ldr	r2, [pc, #20]	; (80824 <pwm_config+0x50>)
   80810:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   80814:	bc30      	pop	{r4, r5}
   80816:	4770      	bx	lr
   80818:	40094000 	.word	0x40094000
   8081c:	50574efc 	.word	0x50574efc
   80820:	20000004 	.word	0x20000004
   80824:	50574efe 	.word	0x50574efe

00080828 <init_pwm>:
void init_pwm(){
   80828:	b510      	push	{r4, lr}
	PIOC->PIO_PDR |= PIO_PDR_P19;
   8082a:	4b0e      	ldr	r3, [pc, #56]	; (80864 <init_pwm+0x3c>)
   8082c:	685a      	ldr	r2, [r3, #4]
   8082e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80832:	605a      	str	r2, [r3, #4]
	PIOC->PIO_PDR |= PIO_PDR_P18;
   80834:	685a      	ldr	r2, [r3, #4]
   80836:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8083a:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   8083c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8083e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80842:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_ABSR |= PIO_ABSR_P18;
   80844:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80846:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   8084a:	671a      	str	r2, [r3, #112]	; 0x70
	PMC->PMC_PCR = (1 << 28) + (1 << 12) + 36;
   8084c:	4a06      	ldr	r2, [pc, #24]	; (80868 <init_pwm+0x40>)
   8084e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
   80852:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pwm_config(5);
   80856:	2005      	movs	r0, #5
   80858:	4c04      	ldr	r4, [pc, #16]	; (8086c <init_pwm+0x44>)
   8085a:	47a0      	blx	r4
	pwm_config(6);
   8085c:	2006      	movs	r0, #6
   8085e:	47a0      	blx	r4
   80860:	bd10      	pop	{r4, pc}
   80862:	bf00      	nop
   80864:	400e1200 	.word	0x400e1200
   80868:	10001024 	.word	0x10001024
   8086c:	000807d5 	.word	0x000807d5

00080870 <pwm_set_dc>:

/*
error 1 on invalid us value
*/
uint8_t pwm_set_dc(uint8_t ch_num, uint32_t us_high){
	if (us_high >= 2000 || us_high <= 1000){
   80870:	f2a1 32e9 	subw	r2, r1, #1001	; 0x3e9
   80874:	f240 33e6 	movw	r3, #998	; 0x3e6
   80878:	429a      	cmp	r2, r3
   8087a:	d818      	bhi.n	808ae <pwm_set_dc+0x3e>
uint8_t pwm_set_dc(uint8_t ch_num, uint32_t us_high){
   8087c:	b410      	push	{r4}
		return 1;	
	}
	uint32_t period_us = CPRD * 32 / 84; // us
   8087e:	4b0d      	ldr	r3, [pc, #52]	; (808b4 <pwm_set_dc+0x44>)
   80880:	681a      	ldr	r2, [r3, #0]
   80882:	0153      	lsls	r3, r2, #5
   80884:	089b      	lsrs	r3, r3, #2
   80886:	4c0c      	ldr	r4, [pc, #48]	; (808b8 <pwm_set_dc+0x48>)
   80888:	fba4 4303 	umull	r4, r3, r4, r3
   8088c:	089b      	lsrs	r3, r3, #2
	uint8_t duty_cycle_divisor = period_us / us_high;
   8088e:	fbb3 f1f1 	udiv	r1, r3, r1
	
	//PWM->PWM_WPCR = ('P' << 24) + ('W' << 16) + ('M' << 8) + (0b1111111 << 2) + 0b00;
	//PWM->PWM_CH_NUM[ch_num].PWM_CDTY = CPRD - CPRD / duty_cycle_divisor;
	//PWM->PWM_WPCR = ('P' << 24) + ('W' << 16) + ('M' << 8) + (0b1111111 << 2) + 0b10;
	
	PWM->PWM_CH_NUM[ch_num].PWM_CDTYUPD = CPRD - CPRD / duty_cycle_divisor;
   80892:	b2c9      	uxtb	r1, r1
   80894:	fbb2 f1f1 	udiv	r1, r2, r1
   80898:	1a51      	subs	r1, r2, r1
   8089a:	0140      	lsls	r0, r0, #5
   8089c:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
   808a0:	f500 2010 	add.w	r0, r0, #589824	; 0x90000
   808a4:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
	
	return 0;
   808a8:	2000      	movs	r0, #0
}
   808aa:	bc10      	pop	{r4}
   808ac:	4770      	bx	lr
		return 1;	
   808ae:	2001      	movs	r0, #1
   808b0:	4770      	bx	lr
   808b2:	bf00      	nop
   808b4:	20000004 	.word	0x20000004
   808b8:	30c30c31 	.word	0x30c30c31

000808bc <pwm_joystick_move>:

void pwm_joystick_move(uint8_t dir){
   808bc:	b508      	push	{r3, lr}
	uint8_t joystick_delta = 50;
	
	if (dir == 3){
   808be:	2803      	cmp	r0, #3
   808c0:	d002      	beq.n	808c8 <pwm_joystick_move+0xc>
		
		//motor_set_enable(1);
		//motor_set_direction(1);
		//motor_set_speed(0xcf);
		
	} else if (dir == 4){
   808c2:	2804      	cmp	r0, #4
   808c4:	d00e      	beq.n	808e4 <pwm_joystick_move+0x28>
   808c6:	bd08      	pop	{r3, pc}
		servo_pos_us -= joystick_delta;
   808c8:	4b0d      	ldr	r3, [pc, #52]	; (80900 <pwm_joystick_move+0x44>)
   808ca:	6859      	ldr	r1, [r3, #4]
   808cc:	3932      	subs	r1, #50	; 0x32
   808ce:	6059      	str	r1, [r3, #4]
		if(pwm_set_dc(5, servo_pos_us) != 0) servo_pos_us += joystick_delta; // out of bounds correction
   808d0:	2005      	movs	r0, #5
   808d2:	4b0c      	ldr	r3, [pc, #48]	; (80904 <pwm_joystick_move+0x48>)
   808d4:	4798      	blx	r3
   808d6:	2800      	cmp	r0, #0
   808d8:	d0f5      	beq.n	808c6 <pwm_joystick_move+0xa>
   808da:	4a09      	ldr	r2, [pc, #36]	; (80900 <pwm_joystick_move+0x44>)
   808dc:	6853      	ldr	r3, [r2, #4]
   808de:	3332      	adds	r3, #50	; 0x32
   808e0:	6053      	str	r3, [r2, #4]
   808e2:	bd08      	pop	{r3, pc}
		// left
		servo_pos_us += joystick_delta;
   808e4:	4b06      	ldr	r3, [pc, #24]	; (80900 <pwm_joystick_move+0x44>)
   808e6:	6859      	ldr	r1, [r3, #4]
   808e8:	3132      	adds	r1, #50	; 0x32
   808ea:	6059      	str	r1, [r3, #4]
		if(pwm_set_dc(5, servo_pos_us) != 0) servo_pos_us -= joystick_delta; // out of bounds correction
   808ec:	2005      	movs	r0, #5
   808ee:	4b05      	ldr	r3, [pc, #20]	; (80904 <pwm_joystick_move+0x48>)
   808f0:	4798      	blx	r3
   808f2:	2800      	cmp	r0, #0
   808f4:	d0e7      	beq.n	808c6 <pwm_joystick_move+0xa>
   808f6:	4a02      	ldr	r2, [pc, #8]	; (80900 <pwm_joystick_move+0x44>)
   808f8:	6853      	ldr	r3, [r2, #4]
   808fa:	3b32      	subs	r3, #50	; 0x32
   808fc:	6053      	str	r3, [r2, #4]
		
		//motor_set_enable(1);
		//motor_set_direction(0);
		//motor_set_speed(0xcf);
	}
}
   808fe:	e7e2      	b.n	808c6 <pwm_joystick_move+0xa>
   80900:	20000004 	.word	0x20000004
   80904:	00080871 	.word	0x00080871

00080908 <TC0_Handler>:
	timer_config();
	
	NVIC_EnableIRQ(ID_TC0);
}

void TC0_Handler(){
   80908:	b508      	push	{r3, lr}
	//printf("interrupt: tc0\n\r");
	
	motor_interrupt();
   8090a:	4b06      	ldr	r3, [pc, #24]	; (80924 <TC0_Handler+0x1c>)
   8090c:	4798      	blx	r3
	
	TC0->TC_CHANNEL[0].TC_CCR = (1 << 2) + 1;
   8090e:	4b06      	ldr	r3, [pc, #24]	; (80928 <TC0_Handler+0x20>)
   80910:	2205      	movs	r2, #5
   80912:	601a      	str	r2, [r3, #0]
	uint32_t isr = TC0->TC_CHANNEL[0].TC_SR; // read status, cleared by read
   80914:	6a1b      	ldr	r3, [r3, #32]
   80916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8091a:	4b04      	ldr	r3, [pc, #16]	; (8092c <TC0_Handler+0x24>)
   8091c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   80920:	bd08      	pop	{r3, pc}
   80922:	bf00      	nop
   80924:	00080745 	.word	0x00080745
   80928:	40080000 	.word	0x40080000
   8092c:	e000e100 	.word	0xe000e100

00080930 <delay>:
#include "timer_driver.h"

#define F_CPU 4000

void delay(uint32_t ms){
	for(uint32_t i=0; i<F_CPU * ms / 4; i++){__NOP();}
   80930:	2200      	movs	r2, #0
   80932:	e001      	b.n	80938 <delay+0x8>
   80934:	bf00      	nop
   80936:	3201      	adds	r2, #1
   80938:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   8093c:	fb03 f300 	mul.w	r3, r3, r0
   80940:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
   80944:	d3f6      	bcc.n	80934 <delay+0x4>
}
   80946:	4770      	bx	lr

00080948 <init>:

void init()
{
   80948:	b510      	push	{r4, lr}
	SystemInit();
   8094a:	4b16      	ldr	r3, [pc, #88]	; (809a4 <init+0x5c>)
   8094c:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
   8094e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80952:	4b15      	ldr	r3, [pc, #84]	; (809a8 <init+0x60>)
   80954:	605a      	str	r2, [r3, #4]
	pin_util_set_dir('A', 19, OUTPUT_ENABLE);
   80956:	2201      	movs	r2, #1
   80958:	2113      	movs	r1, #19
   8095a:	2041      	movs	r0, #65	; 0x41
   8095c:	4c13      	ldr	r4, [pc, #76]	; (809ac <init+0x64>)
   8095e:	47a0      	blx	r4
	pin_util_set_dir('A', 20, OUTPUT_ENABLE);
   80960:	2201      	movs	r2, #1
   80962:	2114      	movs	r1, #20
   80964:	2041      	movs	r0, #65	; 0x41
   80966:	47a0      	blx	r4
	configure_uart();
   80968:	4b11      	ldr	r3, [pc, #68]	; (809b0 <init+0x68>)
   8096a:	4798      	blx	r3
	uint8_t ret = can_init_def_tx_rx_mb(); if(ret == 1) printf("can init failed");
   8096c:	4b11      	ldr	r3, [pc, #68]	; (809b4 <init+0x6c>)
   8096e:	4798      	blx	r3
   80970:	2801      	cmp	r0, #1
   80972:	d009      	beq.n	80988 <init+0x40>
	init_pwm();
   80974:	4b10      	ldr	r3, [pc, #64]	; (809b8 <init+0x70>)
   80976:	4798      	blx	r3
	init_adc();
   80978:	4b10      	ldr	r3, [pc, #64]	; (809bc <init+0x74>)
   8097a:	4798      	blx	r3
	init_dac();
   8097c:	4b10      	ldr	r3, [pc, #64]	; (809c0 <init+0x78>)
   8097e:	4798      	blx	r3
	init_motor();
   80980:	4b10      	ldr	r3, [pc, #64]	; (809c4 <init+0x7c>)
   80982:	4798      	blx	r3
	//init_timer();
	
	// set direction of MJ2
	for (uint8_t i = 1; i < 9; i++) pin_util_set_dir('C', i, PIO_ENABLE);
   80984:	2401      	movs	r4, #1
   80986:	e00a      	b.n	8099e <init+0x56>
	uint8_t ret = can_init_def_tx_rx_mb(); if(ret == 1) printf("can init failed");
   80988:	480f      	ldr	r0, [pc, #60]	; (809c8 <init+0x80>)
   8098a:	4b10      	ldr	r3, [pc, #64]	; (809cc <init+0x84>)
   8098c:	4798      	blx	r3
   8098e:	e7f1      	b.n	80974 <init+0x2c>
	for (uint8_t i = 1; i < 9; i++) pin_util_set_dir('C', i, PIO_ENABLE);
   80990:	2202      	movs	r2, #2
   80992:	4621      	mov	r1, r4
   80994:	2043      	movs	r0, #67	; 0x43
   80996:	4b05      	ldr	r3, [pc, #20]	; (809ac <init+0x64>)
   80998:	4798      	blx	r3
   8099a:	3401      	adds	r4, #1
   8099c:	b2e4      	uxtb	r4, r4
   8099e:	2c08      	cmp	r4, #8
   809a0:	d9f6      	bls.n	80990 <init+0x48>
}
   809a2:	bd10      	pop	{r4, pc}
   809a4:	000804e1 	.word	0x000804e1
   809a8:	400e1a50 	.word	0x400e1a50
   809ac:	00080585 	.word	0x00080585
   809b0:	00080cc9 	.word	0x00080cc9
   809b4:	0008034d 	.word	0x0008034d
   809b8:	00080829 	.word	0x00080829
   809bc:	00080199 	.word	0x00080199
   809c0:	0008068d 	.word	0x0008068d
   809c4:	00080701 	.word	0x00080701
   809c8:	00080fb4 	.word	0x00080fb4
   809cc:	00080ca5 	.word	0x00080ca5

000809d0 <main>:

int main(void)
{
   809d0:	b508      	push	{r3, lr}
	init();
   809d2:	4b0a      	ldr	r3, [pc, #40]	; (809fc <main+0x2c>)
   809d4:	4798      	blx	r3
	
    while (1) 
    {
		pin_util_toggle('A', 19);
   809d6:	2113      	movs	r1, #19
   809d8:	2041      	movs	r0, #65	; 0x41
   809da:	4c09      	ldr	r4, [pc, #36]	; (80a00 <main+0x30>)
   809dc:	47a0      	blx	r4
		pin_util_toggle('A', 20);
   809de:	2114      	movs	r1, #20
   809e0:	2041      	movs	r0, #65	; 0x41
   809e2:	47a0      	blx	r4
		msg.data[3] = 0x44;
		int ret = can_send(&msg, 0);
		//if (ret != 0) printf(" can tx mb busy");
		*/
		//pwm_set_dc(5, 1999);
		delay(500);
   809e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   809e8:	4b06      	ldr	r3, [pc, #24]	; (80a04 <main+0x34>)
   809ea:	4798      	blx	r3
		//printf("ADC read: %x\n\r", adc_read(7));
		printf("%x\n\r", PIOC->PIO_PDSR & ((1<<9) - 1));
   809ec:	4b06      	ldr	r3, [pc, #24]	; (80a08 <main+0x38>)
   809ee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   809f0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   809f4:	4805      	ldr	r0, [pc, #20]	; (80a0c <main+0x3c>)
   809f6:	4b06      	ldr	r3, [pc, #24]	; (80a10 <main+0x40>)
   809f8:	4798      	blx	r3
   809fa:	e7ec      	b.n	809d6 <main+0x6>
   809fc:	00080949 	.word	0x00080949
   80a00:	0008063d 	.word	0x0008063d
   80a04:	00080931 	.word	0x00080931
   80a08:	400e1200 	.word	0x400e1200
   80a0c:	00080f68 	.word	0x00080f68
   80a10:	00080ca5 	.word	0x00080ca5

00080a14 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80a14:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   80a16:	b2c8      	uxtb	r0, r1
   80a18:	4b01      	ldr	r3, [pc, #4]	; (80a20 <printchar+0xc>)
   80a1a:	4798      	blx	r3
   80a1c:	bd08      	pop	{r3, pc}
   80a1e:	bf00      	nop
   80a20:	00080d31 	.word	0x00080d31

00080a24 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a28:	4607      	mov	r7, r0
   80a2a:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80a2c:	1e15      	subs	r5, r2, #0
   80a2e:	dd02      	ble.n	80a36 <prints+0x12>
   80a30:	460a      	mov	r2, r1
   80a32:	2100      	movs	r1, #0
   80a34:	e004      	b.n	80a40 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80a36:	f04f 0820 	mov.w	r8, #32
   80a3a:	e00e      	b.n	80a5a <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80a3c:	3101      	adds	r1, #1
   80a3e:	3201      	adds	r2, #1
   80a40:	7810      	ldrb	r0, [r2, #0]
   80a42:	2800      	cmp	r0, #0
   80a44:	d1fa      	bne.n	80a3c <prints+0x18>
		if (len >= width) width = 0;
   80a46:	42a9      	cmp	r1, r5
   80a48:	da01      	bge.n	80a4e <prints+0x2a>
		else width -= len;
   80a4a:	1a6d      	subs	r5, r5, r1
   80a4c:	e000      	b.n	80a50 <prints+0x2c>
		if (len >= width) width = 0;
   80a4e:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80a50:	f013 0f02 	tst.w	r3, #2
   80a54:	d106      	bne.n	80a64 <prints+0x40>
	register int pc = 0, padchar = ' ';
   80a56:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   80a5a:	f013 0401 	ands.w	r4, r3, #1
   80a5e:	d00a      	beq.n	80a76 <prints+0x52>
	register int pc = 0, padchar = ' ';
   80a60:	2400      	movs	r4, #0
   80a62:	e010      	b.n	80a86 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80a64:	f04f 0830 	mov.w	r8, #48	; 0x30
   80a68:	e7f7      	b.n	80a5a <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   80a6a:	4641      	mov	r1, r8
   80a6c:	4638      	mov	r0, r7
   80a6e:	4b0d      	ldr	r3, [pc, #52]	; (80aa4 <prints+0x80>)
   80a70:	4798      	blx	r3
			++pc;
   80a72:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80a74:	3d01      	subs	r5, #1
   80a76:	2d00      	cmp	r5, #0
   80a78:	dcf7      	bgt.n	80a6a <prints+0x46>
   80a7a:	e004      	b.n	80a86 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   80a7c:	4638      	mov	r0, r7
   80a7e:	4b09      	ldr	r3, [pc, #36]	; (80aa4 <prints+0x80>)
   80a80:	4798      	blx	r3
		++pc;
   80a82:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80a84:	3601      	adds	r6, #1
   80a86:	7831      	ldrb	r1, [r6, #0]
   80a88:	2900      	cmp	r1, #0
   80a8a:	d1f7      	bne.n	80a7c <prints+0x58>
   80a8c:	e005      	b.n	80a9a <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   80a8e:	4641      	mov	r1, r8
   80a90:	4638      	mov	r0, r7
   80a92:	4b04      	ldr	r3, [pc, #16]	; (80aa4 <prints+0x80>)
   80a94:	4798      	blx	r3
		++pc;
   80a96:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80a98:	3d01      	subs	r5, #1
   80a9a:	2d00      	cmp	r5, #0
   80a9c:	dcf7      	bgt.n	80a8e <prints+0x6a>
	}

	return pc;
}
   80a9e:	4620      	mov	r0, r4
   80aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80aa4:	00080a15 	.word	0x00080a15

00080aa8 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   80aaa:	b085      	sub	sp, #20
   80aac:	4607      	mov	r7, r0
   80aae:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80ab0:	b151      	cbz	r1, 80ac8 <printi+0x20>
   80ab2:	461e      	mov	r6, r3
   80ab4:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80ab6:	b113      	cbz	r3, 80abe <printi+0x16>
   80ab8:	2a0a      	cmp	r2, #10
   80aba:	d012      	beq.n	80ae2 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80abc:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80abe:	ad04      	add	r5, sp, #16
   80ac0:	2300      	movs	r3, #0
   80ac2:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80ac6:	e018      	b.n	80afa <printi+0x52>
		print_buf[0] = '0';
   80ac8:	2330      	movs	r3, #48	; 0x30
   80aca:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80ace:	2300      	movs	r3, #0
   80ad0:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80ad8:	a901      	add	r1, sp, #4
   80ada:	4638      	mov	r0, r7
   80adc:	4c1b      	ldr	r4, [pc, #108]	; (80b4c <printi+0xa4>)
   80ade:	47a0      	blx	r4
   80ae0:	e029      	b.n	80b36 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80ae2:	2900      	cmp	r1, #0
   80ae4:	db01      	blt.n	80aea <printi+0x42>
	register int t, neg = 0, pc = 0;
   80ae6:	2600      	movs	r6, #0
   80ae8:	e7e9      	b.n	80abe <printi+0x16>
		u = -i;
   80aea:	424c      	negs	r4, r1
		neg = 1;
   80aec:	2601      	movs	r6, #1
   80aee:	e7e6      	b.n	80abe <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80af0:	3330      	adds	r3, #48	; 0x30
   80af2:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80af6:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80afa:	b14c      	cbz	r4, 80b10 <printi+0x68>
		t = u % b;
   80afc:	fbb4 f3f2 	udiv	r3, r4, r2
   80b00:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80b04:	2b09      	cmp	r3, #9
   80b06:	ddf3      	ble.n	80af0 <printi+0x48>
			t += letbase - '0' - 10;
   80b08:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80b0c:	440b      	add	r3, r1
   80b0e:	e7ef      	b.n	80af0 <printi+0x48>
	}

	if (neg) {
   80b10:	b156      	cbz	r6, 80b28 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80b14:	b11b      	cbz	r3, 80b1e <printi+0x76>
   80b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b18:	f013 0f02 	tst.w	r3, #2
   80b1c:	d10d      	bne.n	80b3a <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80b1e:	232d      	movs	r3, #45	; 0x2d
   80b20:	f805 3c01 	strb.w	r3, [r5, #-1]
   80b24:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80b26:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80b2c:	4629      	mov	r1, r5
   80b2e:	4638      	mov	r0, r7
   80b30:	4c06      	ldr	r4, [pc, #24]	; (80b4c <printi+0xa4>)
   80b32:	47a0      	blx	r4
   80b34:	4430      	add	r0, r6
}
   80b36:	b005      	add	sp, #20
   80b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80b3a:	212d      	movs	r1, #45	; 0x2d
   80b3c:	4638      	mov	r0, r7
   80b3e:	4b04      	ldr	r3, [pc, #16]	; (80b50 <printi+0xa8>)
   80b40:	4798      	blx	r3
			--width;
   80b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80b44:	3b01      	subs	r3, #1
   80b46:	930a      	str	r3, [sp, #40]	; 0x28
   80b48:	e7ee      	b.n	80b28 <printi+0x80>
   80b4a:	bf00      	nop
   80b4c:	00080a25 	.word	0x00080a25
   80b50:	00080a15 	.word	0x00080a15

00080b54 <print>:

static int print( char **out, const char *format, va_list args )
{
   80b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b56:	b089      	sub	sp, #36	; 0x24
   80b58:	4606      	mov	r6, r0
   80b5a:	460c      	mov	r4, r1
   80b5c:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80b5e:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80b60:	e081      	b.n	80c66 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80b62:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80b64:	2301      	movs	r3, #1
   80b66:	e08b      	b.n	80c80 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80b68:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80b6a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80b6e:	7822      	ldrb	r2, [r4, #0]
   80b70:	2a30      	cmp	r2, #48	; 0x30
   80b72:	d0f9      	beq.n	80b68 <print+0x14>
   80b74:	2200      	movs	r2, #0
   80b76:	e006      	b.n	80b86 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80b78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80b7c:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80b7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80b82:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80b84:	3401      	adds	r4, #1
   80b86:	7821      	ldrb	r1, [r4, #0]
   80b88:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80b8c:	b2c0      	uxtb	r0, r0
   80b8e:	2809      	cmp	r0, #9
   80b90:	d9f2      	bls.n	80b78 <print+0x24>
			}
			if( *format == 's' ) {
   80b92:	2973      	cmp	r1, #115	; 0x73
   80b94:	d018      	beq.n	80bc8 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80b96:	2964      	cmp	r1, #100	; 0x64
   80b98:	d022      	beq.n	80be0 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80b9a:	2978      	cmp	r1, #120	; 0x78
   80b9c:	d02f      	beq.n	80bfe <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80b9e:	2958      	cmp	r1, #88	; 0x58
   80ba0:	d03c      	beq.n	80c1c <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80ba2:	2975      	cmp	r1, #117	; 0x75
   80ba4:	d049      	beq.n	80c3a <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80ba6:	2963      	cmp	r1, #99	; 0x63
   80ba8:	d15c      	bne.n	80c64 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80baa:	9905      	ldr	r1, [sp, #20]
   80bac:	1d08      	adds	r0, r1, #4
   80bae:	9005      	str	r0, [sp, #20]
   80bb0:	7809      	ldrb	r1, [r1, #0]
   80bb2:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80bb6:	2100      	movs	r1, #0
   80bb8:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80bbc:	a907      	add	r1, sp, #28
   80bbe:	4630      	mov	r0, r6
   80bc0:	4f34      	ldr	r7, [pc, #208]	; (80c94 <print+0x140>)
   80bc2:	47b8      	blx	r7
   80bc4:	4405      	add	r5, r0
				continue;
   80bc6:	e04d      	b.n	80c64 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80bc8:	9905      	ldr	r1, [sp, #20]
   80bca:	1d08      	adds	r0, r1, #4
   80bcc:	9005      	str	r0, [sp, #20]
   80bce:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80bd0:	b121      	cbz	r1, 80bdc <print+0x88>
   80bd2:	4630      	mov	r0, r6
   80bd4:	4f2f      	ldr	r7, [pc, #188]	; (80c94 <print+0x140>)
   80bd6:	47b8      	blx	r7
   80bd8:	4405      	add	r5, r0
				continue;
   80bda:	e043      	b.n	80c64 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80bdc:	492e      	ldr	r1, [pc, #184]	; (80c98 <print+0x144>)
   80bde:	e7f8      	b.n	80bd2 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80be0:	9905      	ldr	r1, [sp, #20]
   80be2:	1d08      	adds	r0, r1, #4
   80be4:	9005      	str	r0, [sp, #20]
   80be6:	6809      	ldr	r1, [r1, #0]
   80be8:	2061      	movs	r0, #97	; 0x61
   80bea:	9002      	str	r0, [sp, #8]
   80bec:	9301      	str	r3, [sp, #4]
   80bee:	9200      	str	r2, [sp, #0]
   80bf0:	2301      	movs	r3, #1
   80bf2:	220a      	movs	r2, #10
   80bf4:	4630      	mov	r0, r6
   80bf6:	4f29      	ldr	r7, [pc, #164]	; (80c9c <print+0x148>)
   80bf8:	47b8      	blx	r7
   80bfa:	4405      	add	r5, r0
				continue;
   80bfc:	e032      	b.n	80c64 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80bfe:	9905      	ldr	r1, [sp, #20]
   80c00:	1d08      	adds	r0, r1, #4
   80c02:	9005      	str	r0, [sp, #20]
   80c04:	6809      	ldr	r1, [r1, #0]
   80c06:	2061      	movs	r0, #97	; 0x61
   80c08:	9002      	str	r0, [sp, #8]
   80c0a:	9301      	str	r3, [sp, #4]
   80c0c:	9200      	str	r2, [sp, #0]
   80c0e:	2300      	movs	r3, #0
   80c10:	2210      	movs	r2, #16
   80c12:	4630      	mov	r0, r6
   80c14:	4f21      	ldr	r7, [pc, #132]	; (80c9c <print+0x148>)
   80c16:	47b8      	blx	r7
   80c18:	4405      	add	r5, r0
				continue;
   80c1a:	e023      	b.n	80c64 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80c1c:	9905      	ldr	r1, [sp, #20]
   80c1e:	1d08      	adds	r0, r1, #4
   80c20:	9005      	str	r0, [sp, #20]
   80c22:	6809      	ldr	r1, [r1, #0]
   80c24:	2041      	movs	r0, #65	; 0x41
   80c26:	9002      	str	r0, [sp, #8]
   80c28:	9301      	str	r3, [sp, #4]
   80c2a:	9200      	str	r2, [sp, #0]
   80c2c:	2300      	movs	r3, #0
   80c2e:	2210      	movs	r2, #16
   80c30:	4630      	mov	r0, r6
   80c32:	4f1a      	ldr	r7, [pc, #104]	; (80c9c <print+0x148>)
   80c34:	47b8      	blx	r7
   80c36:	4405      	add	r5, r0
				continue;
   80c38:	e014      	b.n	80c64 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80c3a:	9905      	ldr	r1, [sp, #20]
   80c3c:	1d08      	adds	r0, r1, #4
   80c3e:	9005      	str	r0, [sp, #20]
   80c40:	6809      	ldr	r1, [r1, #0]
   80c42:	2061      	movs	r0, #97	; 0x61
   80c44:	9002      	str	r0, [sp, #8]
   80c46:	9301      	str	r3, [sp, #4]
   80c48:	9200      	str	r2, [sp, #0]
   80c4a:	2300      	movs	r3, #0
   80c4c:	220a      	movs	r2, #10
   80c4e:	4630      	mov	r0, r6
   80c50:	4f12      	ldr	r7, [pc, #72]	; (80c9c <print+0x148>)
   80c52:	47b8      	blx	r7
   80c54:	4405      	add	r5, r0
				continue;
   80c56:	e005      	b.n	80c64 <print+0x110>
			++format;
   80c58:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80c5a:	7821      	ldrb	r1, [r4, #0]
   80c5c:	4630      	mov	r0, r6
   80c5e:	4b10      	ldr	r3, [pc, #64]	; (80ca0 <print+0x14c>)
   80c60:	4798      	blx	r3
			++pc;
   80c62:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80c64:	3401      	adds	r4, #1
   80c66:	7823      	ldrb	r3, [r4, #0]
   80c68:	b163      	cbz	r3, 80c84 <print+0x130>
		if (*format == '%') {
   80c6a:	2b25      	cmp	r3, #37	; 0x25
   80c6c:	d1f5      	bne.n	80c5a <print+0x106>
			++format;
   80c6e:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80c70:	7863      	ldrb	r3, [r4, #1]
   80c72:	b13b      	cbz	r3, 80c84 <print+0x130>
			if (*format == '%') goto out;
   80c74:	2b25      	cmp	r3, #37	; 0x25
   80c76:	d0ef      	beq.n	80c58 <print+0x104>
			if (*format == '-') {
   80c78:	2b2d      	cmp	r3, #45	; 0x2d
   80c7a:	f43f af72 	beq.w	80b62 <print+0xe>
			width = pad = 0;
   80c7e:	2300      	movs	r3, #0
   80c80:	4614      	mov	r4, r2
   80c82:	e774      	b.n	80b6e <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80c84:	b116      	cbz	r6, 80c8c <print+0x138>
   80c86:	6833      	ldr	r3, [r6, #0]
   80c88:	2200      	movs	r2, #0
   80c8a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80c8c:	4628      	mov	r0, r5
   80c8e:	b009      	add	sp, #36	; 0x24
   80c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c92:	bf00      	nop
   80c94:	00080a25 	.word	0x00080a25
   80c98:	00080fc4 	.word	0x00080fc4
   80c9c:	00080aa9 	.word	0x00080aa9
   80ca0:	00080a15 	.word	0x00080a15

00080ca4 <printf>:

int printf(const char *format, ...)
{
   80ca4:	b40f      	push	{r0, r1, r2, r3}
   80ca6:	b500      	push	{lr}
   80ca8:	b083      	sub	sp, #12
   80caa:	aa04      	add	r2, sp, #16
   80cac:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80cb0:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80cb2:	2000      	movs	r0, #0
   80cb4:	4b03      	ldr	r3, [pc, #12]	; (80cc4 <printf+0x20>)
   80cb6:	4798      	blx	r3
}
   80cb8:	b003      	add	sp, #12
   80cba:	f85d eb04 	ldr.w	lr, [sp], #4
   80cbe:	b004      	add	sp, #16
   80cc0:	4770      	bx	lr
   80cc2:	bf00      	nop
   80cc4:	00080b55 	.word	0x00080b55

00080cc8 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80cc8:	4b16      	ldr	r3, [pc, #88]	; (80d24 <configure_uart+0x5c>)
   80cca:	2200      	movs	r2, #0
   80ccc:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80cce:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80cd0:	4b15      	ldr	r3, [pc, #84]	; (80d28 <configure_uart+0x60>)
   80cd2:	f44f 7140 	mov.w	r1, #768	; 0x300
   80cd6:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80cd8:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80cda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80cdc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80cde:	4002      	ands	r2, r0
   80ce0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80ce4:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ce6:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
   80cec:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80cf0:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80cf2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80cf6:	21ac      	movs	r1, #172	; 0xac
   80cf8:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	//UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
	//UART->UART_BRGR = 547; // MCK = 12 MHz, => BaudRate = 9612
	UART->UART_BRGR = 547;
   80cfa:	f240 2123 	movw	r1, #547	; 0x223
   80cfe:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80d04:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80d06:	f240 2102 	movw	r1, #514	; 0x202
   80d0a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80d0e:	f04f 31ff 	mov.w	r1, #4294967295
   80d12:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80d14:	21e1      	movs	r1, #225	; 0xe1
   80d16:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80d18:	4904      	ldr	r1, [pc, #16]	; (80d2c <configure_uart+0x64>)
   80d1a:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80d1c:	2250      	movs	r2, #80	; 0x50
   80d1e:	601a      	str	r2, [r3, #0]
   80d20:	4770      	bx	lr
   80d22:	bf00      	nop
   80d24:	20000460 	.word	0x20000460
   80d28:	400e0e00 	.word	0x400e0e00
   80d2c:	e000e100 	.word	0xe000e100

00080d30 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80d30:	4b07      	ldr	r3, [pc, #28]	; (80d50 <uart_putchar+0x20>)
   80d32:	695b      	ldr	r3, [r3, #20]
   80d34:	f013 0f02 	tst.w	r3, #2
   80d38:	d008      	beq.n	80d4c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80d3a:	4b05      	ldr	r3, [pc, #20]	; (80d50 <uart_putchar+0x20>)
   80d3c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80d3e:	4b04      	ldr	r3, [pc, #16]	; (80d50 <uart_putchar+0x20>)
   80d40:	695b      	ldr	r3, [r3, #20]
   80d42:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d46:	d0fa      	beq.n	80d3e <uart_putchar+0xe>
	return 0;
   80d48:	2000      	movs	r0, #0
   80d4a:	4770      	bx	lr
	return 1;
   80d4c:	2001      	movs	r0, #1
}
   80d4e:	4770      	bx	lr
   80d50:	400e0800 	.word	0x400e0800

00080d54 <UART_Handler>:

void UART_Handler(void)
{
   80d54:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80d56:	4b15      	ldr	r3, [pc, #84]	; (80dac <UART_Handler+0x58>)
   80d58:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80d5a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80d5e:	d003      	beq.n	80d68 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80d60:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80d64:	4a11      	ldr	r2, [pc, #68]	; (80dac <UART_Handler+0x58>)
   80d66:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80d68:	f013 0f01 	tst.w	r3, #1
   80d6c:	d012      	beq.n	80d94 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80d6e:	4810      	ldr	r0, [pc, #64]	; (80db0 <UART_Handler+0x5c>)
   80d70:	7842      	ldrb	r2, [r0, #1]
   80d72:	1c53      	adds	r3, r2, #1
   80d74:	4259      	negs	r1, r3
   80d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80d7e:	bf58      	it	pl
   80d80:	424b      	negpl	r3, r1
   80d82:	7801      	ldrb	r1, [r0, #0]
   80d84:	428b      	cmp	r3, r1
   80d86:	d006      	beq.n	80d96 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80d88:	4908      	ldr	r1, [pc, #32]	; (80dac <UART_Handler+0x58>)
   80d8a:	6988      	ldr	r0, [r1, #24]
   80d8c:	4908      	ldr	r1, [pc, #32]	; (80db0 <UART_Handler+0x5c>)
   80d8e:	440a      	add	r2, r1
   80d90:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80d92:	704b      	strb	r3, [r1, #1]
   80d94:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80d96:	4807      	ldr	r0, [pc, #28]	; (80db4 <UART_Handler+0x60>)
   80d98:	4b07      	ldr	r3, [pc, #28]	; (80db8 <UART_Handler+0x64>)
   80d9a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80d9c:	4b04      	ldr	r3, [pc, #16]	; (80db0 <UART_Handler+0x5c>)
   80d9e:	7859      	ldrb	r1, [r3, #1]
   80da0:	4a02      	ldr	r2, [pc, #8]	; (80dac <UART_Handler+0x58>)
   80da2:	6992      	ldr	r2, [r2, #24]
   80da4:	440b      	add	r3, r1
   80da6:	709a      	strb	r2, [r3, #2]
			return;
   80da8:	bd08      	pop	{r3, pc}
   80daa:	bf00      	nop
   80dac:	400e0800 	.word	0x400e0800
   80db0:	20000460 	.word	0x20000460
   80db4:	00080fcc 	.word	0x00080fcc
   80db8:	00080ca5 	.word	0x00080ca5

00080dbc <__libc_init_array>:
   80dbc:	b570      	push	{r4, r5, r6, lr}
   80dbe:	4e0f      	ldr	r6, [pc, #60]	; (80dfc <__libc_init_array+0x40>)
   80dc0:	4d0f      	ldr	r5, [pc, #60]	; (80e00 <__libc_init_array+0x44>)
   80dc2:	1b76      	subs	r6, r6, r5
   80dc4:	10b6      	asrs	r6, r6, #2
   80dc6:	bf18      	it	ne
   80dc8:	2400      	movne	r4, #0
   80dca:	d005      	beq.n	80dd8 <__libc_init_array+0x1c>
   80dcc:	3401      	adds	r4, #1
   80dce:	f855 3b04 	ldr.w	r3, [r5], #4
   80dd2:	4798      	blx	r3
   80dd4:	42a6      	cmp	r6, r4
   80dd6:	d1f9      	bne.n	80dcc <__libc_init_array+0x10>
   80dd8:	4e0a      	ldr	r6, [pc, #40]	; (80e04 <__libc_init_array+0x48>)
   80dda:	4d0b      	ldr	r5, [pc, #44]	; (80e08 <__libc_init_array+0x4c>)
   80ddc:	f000 f908 	bl	80ff0 <_init>
   80de0:	1b76      	subs	r6, r6, r5
   80de2:	10b6      	asrs	r6, r6, #2
   80de4:	bf18      	it	ne
   80de6:	2400      	movne	r4, #0
   80de8:	d006      	beq.n	80df8 <__libc_init_array+0x3c>
   80dea:	3401      	adds	r4, #1
   80dec:	f855 3b04 	ldr.w	r3, [r5], #4
   80df0:	4798      	blx	r3
   80df2:	42a6      	cmp	r6, r4
   80df4:	d1f9      	bne.n	80dea <__libc_init_array+0x2e>
   80df6:	bd70      	pop	{r4, r5, r6, pc}
   80df8:	bd70      	pop	{r4, r5, r6, pc}
   80dfa:	bf00      	nop
   80dfc:	00080ffc 	.word	0x00080ffc
   80e00:	00080ffc 	.word	0x00080ffc
   80e04:	00081004 	.word	0x00081004
   80e08:	00080ffc 	.word	0x00080ffc

00080e0c <register_fini>:
   80e0c:	4b02      	ldr	r3, [pc, #8]	; (80e18 <register_fini+0xc>)
   80e0e:	b113      	cbz	r3, 80e16 <register_fini+0xa>
   80e10:	4802      	ldr	r0, [pc, #8]	; (80e1c <register_fini+0x10>)
   80e12:	f000 b805 	b.w	80e20 <atexit>
   80e16:	4770      	bx	lr
   80e18:	00000000 	.word	0x00000000
   80e1c:	00080e2d 	.word	0x00080e2d

00080e20 <atexit>:
   80e20:	2300      	movs	r3, #0
   80e22:	4601      	mov	r1, r0
   80e24:	461a      	mov	r2, r3
   80e26:	4618      	mov	r0, r3
   80e28:	f000 b81e 	b.w	80e68 <__register_exitproc>

00080e2c <__libc_fini_array>:
   80e2c:	b538      	push	{r3, r4, r5, lr}
   80e2e:	4c0a      	ldr	r4, [pc, #40]	; (80e58 <__libc_fini_array+0x2c>)
   80e30:	4d0a      	ldr	r5, [pc, #40]	; (80e5c <__libc_fini_array+0x30>)
   80e32:	1b64      	subs	r4, r4, r5
   80e34:	10a4      	asrs	r4, r4, #2
   80e36:	d00a      	beq.n	80e4e <__libc_fini_array+0x22>
   80e38:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80e3c:	3b01      	subs	r3, #1
   80e3e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80e42:	3c01      	subs	r4, #1
   80e44:	f855 3904 	ldr.w	r3, [r5], #-4
   80e48:	4798      	blx	r3
   80e4a:	2c00      	cmp	r4, #0
   80e4c:	d1f9      	bne.n	80e42 <__libc_fini_array+0x16>
   80e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80e52:	f000 b8d7 	b.w	81004 <_fini>
   80e56:	bf00      	nop
   80e58:	00081014 	.word	0x00081014
   80e5c:	00081010 	.word	0x00081010

00080e60 <__retarget_lock_acquire_recursive>:
   80e60:	4770      	bx	lr
   80e62:	bf00      	nop

00080e64 <__retarget_lock_release_recursive>:
   80e64:	4770      	bx	lr
   80e66:	bf00      	nop

00080e68 <__register_exitproc>:
   80e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80e6c:	4d2c      	ldr	r5, [pc, #176]	; (80f20 <__register_exitproc+0xb8>)
   80e6e:	4606      	mov	r6, r0
   80e70:	6828      	ldr	r0, [r5, #0]
   80e72:	4698      	mov	r8, r3
   80e74:	460f      	mov	r7, r1
   80e76:	4691      	mov	r9, r2
   80e78:	f7ff fff2 	bl	80e60 <__retarget_lock_acquire_recursive>
   80e7c:	4b29      	ldr	r3, [pc, #164]	; (80f24 <__register_exitproc+0xbc>)
   80e7e:	681c      	ldr	r4, [r3, #0]
   80e80:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80e84:	2b00      	cmp	r3, #0
   80e86:	d03e      	beq.n	80f06 <__register_exitproc+0x9e>
   80e88:	685a      	ldr	r2, [r3, #4]
   80e8a:	2a1f      	cmp	r2, #31
   80e8c:	dc1c      	bgt.n	80ec8 <__register_exitproc+0x60>
   80e8e:	f102 0e01 	add.w	lr, r2, #1
   80e92:	b176      	cbz	r6, 80eb2 <__register_exitproc+0x4a>
   80e94:	2101      	movs	r1, #1
   80e96:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80e9a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80e9e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80ea2:	4091      	lsls	r1, r2
   80ea4:	4308      	orrs	r0, r1
   80ea6:	2e02      	cmp	r6, #2
   80ea8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80eac:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80eb0:	d023      	beq.n	80efa <__register_exitproc+0x92>
   80eb2:	3202      	adds	r2, #2
   80eb4:	f8c3 e004 	str.w	lr, [r3, #4]
   80eb8:	6828      	ldr	r0, [r5, #0]
   80eba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80ebe:	f7ff ffd1 	bl	80e64 <__retarget_lock_release_recursive>
   80ec2:	2000      	movs	r0, #0
   80ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ec8:	4b17      	ldr	r3, [pc, #92]	; (80f28 <__register_exitproc+0xc0>)
   80eca:	b30b      	cbz	r3, 80f10 <__register_exitproc+0xa8>
   80ecc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80ed0:	f3af 8000 	nop.w
   80ed4:	4603      	mov	r3, r0
   80ed6:	b1d8      	cbz	r0, 80f10 <__register_exitproc+0xa8>
   80ed8:	2000      	movs	r0, #0
   80eda:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80ede:	f04f 0e01 	mov.w	lr, #1
   80ee2:	6058      	str	r0, [r3, #4]
   80ee4:	6019      	str	r1, [r3, #0]
   80ee6:	4602      	mov	r2, r0
   80ee8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80eec:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ef0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80ef4:	2e00      	cmp	r6, #0
   80ef6:	d0dc      	beq.n	80eb2 <__register_exitproc+0x4a>
   80ef8:	e7cc      	b.n	80e94 <__register_exitproc+0x2c>
   80efa:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80efe:	4301      	orrs	r1, r0
   80f00:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80f04:	e7d5      	b.n	80eb2 <__register_exitproc+0x4a>
   80f06:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80f0a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80f0e:	e7bb      	b.n	80e88 <__register_exitproc+0x20>
   80f10:	6828      	ldr	r0, [r5, #0]
   80f12:	f7ff ffa7 	bl	80e64 <__retarget_lock_release_recursive>
   80f16:	f04f 30ff 	mov.w	r0, #4294967295
   80f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80f1e:	bf00      	nop
   80f20:	20000438 	.word	0x20000438
   80f24:	00080fec 	.word	0x00080fec
   80f28:	00000000 	.word	0x00000000
   80f2c:	61440d0a 	.word	0x61440d0a
   80f30:	72206174 	.word	0x72206174
   80f34:	20646165 	.word	0x20646165
   80f38:	6d6f7266 	.word	0x6d6f7266
   80f3c:	6f727720 	.word	0x6f727720
   80f40:	6320676e 	.word	0x6320676e
   80f44:	6e6e6168 	.word	0x6e6e6168
   80f48:	28206c65 	.word	0x28206c65
   80f4c:	6e5f6863 	.word	0x6e5f6863
   80f50:	203a6d75 	.word	0x203a6d75
   80f54:	00296425 	.word	0x00296425
   80f58:	45544e49 	.word	0x45544e49
   80f5c:	50495252 	.word	0x50495252
   80f60:	61202c74 	.word	0x61202c74
   80f64:	203a6364 	.word	0x203a6364
   80f68:	0d0a7825 	.word	0x0d0a7825
   80f6c:	00000000 	.word	0x00000000
   80f70:	203a7369 	.word	0x203a7369
   80f74:	0d0a7825 	.word	0x0d0a7825
   80f78:	00000000 	.word	0x00000000
   80f7c:	304e4143 	.word	0x304e4143
   80f80:	73656d20 	.word	0x73656d20
   80f84:	65676173 	.word	0x65676173
   80f88:	72726120 	.word	0x72726120
   80f8c:	64657669 	.word	0x64657669
   80f90:	206e6920 	.word	0x206e6920
   80f94:	2d6e6f6e 	.word	0x2d6e6f6e
   80f98:	64657375 	.word	0x64657375
   80f9c:	69616d20 	.word	0x69616d20
   80fa0:	786f626c 	.word	0x786f626c
   80fa4:	00000d0a 	.word	0x00000d0a
   80fa8:	3a736f70 	.word	0x3a736f70
   80fac:	2c642520 	.word	0x2c642520
   80fb0:	00642520 	.word	0x00642520
   80fb4:	206e6163 	.word	0x206e6163
   80fb8:	74696e69 	.word	0x74696e69
   80fbc:	69616620 	.word	0x69616620
   80fc0:	0064656c 	.word	0x0064656c
   80fc4:	6c756e28 	.word	0x6c756e28
   80fc8:	0000296c 	.word	0x0000296c
   80fcc:	3a525245 	.word	0x3a525245
   80fd0:	52415520 	.word	0x52415520
   80fd4:	58522054 	.word	0x58522054
   80fd8:	66756220 	.word	0x66756220
   80fdc:	20726566 	.word	0x20726566
   80fe0:	66207369 	.word	0x66207369
   80fe4:	0a6c6c75 	.word	0x0a6c6c75
   80fe8:	0000000d 	.word	0x0000000d

00080fec <_global_impure_ptr>:
   80fec:	20000010                                ... 

00080ff0 <_init>:
   80ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80ff2:	bf00      	nop
   80ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80ff6:	bc08      	pop	{r3}
   80ff8:	469e      	mov	lr, r3
   80ffa:	4770      	bx	lr

00080ffc <__init_array_start>:
   80ffc:	00080e0d 	.word	0x00080e0d

00081000 <__frame_dummy_init_array_entry>:
   81000:	00080119                                ....

00081004 <_fini>:
   81004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81006:	bf00      	nop
   81008:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8100a:	bc08      	pop	{r3}
   8100c:	469e      	mov	lr, r3
   8100e:	4770      	bx	lr

00081010 <__fini_array_start>:
   81010:	000800f5 	.word	0x000800f5
